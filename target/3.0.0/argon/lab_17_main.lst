
c:/Users/Abdurrahman/Documents/labs/lab_17/lab_17_main/target/3.0.0/argon/lab_17_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006144  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da160  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e4c0  000da164  0001e4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002bc  2003e534  2003e534  0002e534  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da1d8  000da1d8  0002a1d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da200  000da200  0002a200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0021d5c1  00000000  00000000  0002a204  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001ed09  00000000  00000000  002477c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000404d3  00000000  00000000  002664ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003218  00000000  00000000  002a69a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a510  00000000  00000000  002a9bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00043fb1  00000000  00000000  002b40c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00052248  00000000  00000000  002f807a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001300f2  00000000  00000000  0034a2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009130  00000000  00000000  0047a3b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 f97b 	bl	d8328 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 f983 	bl	d8344 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e4c0 	.word	0x2003e4c0
   d4048:	000da164 	.word	0x000da164
   d404c:	2003e534 	.word	0x2003e534
   d4050:	2003e534 	.word	0x2003e534
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f003 f945 	bl	d72ec <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000da138 	.word	0x000da138
   d407c:	000da15c 	.word	0x000da15c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 bdbc 	b.w	d4bfc <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 fe95 	bl	d4db4 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f003 b8ef 	b.w	d7270 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f002 be4f 	b.w	d6d34 <malloc>

000d4096 <_Znaj>:
   d4096:	f002 be4d 	b.w	d6d34 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f002 be53 	b.w	d6d44 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f002 fd98 	bl	d6bdc <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d68cd 	.word	0x000d68cd

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40c4:	4770      	bx	lr

000d40c6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d40c6:	b510      	push	{r4, lr}
  }
   d40c8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d40ca:	4604      	mov	r4, r0
  }
   d40cc:	f003 ffff 	bl	d80ce <_ZdlPvj>
   d40d0:	4620      	mov	r0, r4
   d40d2:	bd10      	pop	{r4, pc}

000d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40d6:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40d8:	4608      	mov	r0, r1
   d40da:	9101      	str	r1, [sp, #4]
   d40dc:	f004 f968 	bl	d83b0 <strlen>
    if (len + l > buff_size)
   d40e0:	6863      	ldr	r3, [r4, #4]
   d40e2:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40e4:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40e6:	18e8      	adds	r0, r5, r3
   d40e8:	4290      	cmp	r0, r2
   d40ea:	d808      	bhi.n	d40fe <_ZN10BlynkParam3addEPKc.part.0.constprop.0+0x2a>
    memcpy(buff+len, b, l);
   d40ec:	6820      	ldr	r0, [r4, #0]
   d40ee:	9901      	ldr	r1, [sp, #4]
   d40f0:	462a      	mov	r2, r5
   d40f2:	4418      	add	r0, r3
   d40f4:	f004 f918 	bl	d8328 <memcpy>
    len += l;
   d40f8:	6860      	ldr	r0, [r4, #4]
   d40fa:	4428      	add	r0, r5
   d40fc:	6060      	str	r0, [r4, #4]
}
   d40fe:	b003      	add	sp, #12
   d4100:	bd30      	pop	{r4, r5, pc}
	...

000d4104 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d4104:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4106:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4108:	4b0a      	ldr	r3, [pc, #40]	; (d4134 <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d410a:	6003      	str	r3, [r0, #0]
   d410c:	4605      	mov	r5, r0
   d410e:	b17c      	cbz	r4, d4130 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4110:	6863      	ldr	r3, [r4, #4]
   d4112:	3b01      	subs	r3, #1
   d4114:	6063      	str	r3, [r4, #4]
   d4116:	b95b      	cbnz	r3, d4130 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d4118:	6823      	ldr	r3, [r4, #0]
   d411a:	4620      	mov	r0, r4
   d411c:	689b      	ldr	r3, [r3, #8]
   d411e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4120:	68a3      	ldr	r3, [r4, #8]
   d4122:	3b01      	subs	r3, #1
   d4124:	60a3      	str	r3, [r4, #8]
   d4126:	b91b      	cbnz	r3, d4130 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d4128:	6823      	ldr	r3, [r4, #0]
   d412a:	4620      	mov	r0, r4
   d412c:	68db      	ldr	r3, [r3, #12]
   d412e:	4798      	blx	r3
   d4130:	4628      	mov	r0, r5
   d4132:	bd38      	pop	{r3, r4, r5, pc}
   d4134:	000d9e84 	.word	0x000d9e84

000d4138 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4138:	b40e      	push	{r1, r2, r3}
   d413a:	b503      	push	{r0, r1, lr}
   d413c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d413e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4140:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4144:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4146:	f002 ffea 	bl	d711e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d414a:	b002      	add	sp, #8
   d414c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4150:	b003      	add	sp, #12
   d4152:	4770      	bx	lr

000d4154 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d415a:	7922      	ldrb	r2, [r4, #4]
   d415c:	68a3      	ldr	r3, [r4, #8]
   d415e:	b132      	cbz	r2, d416e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4160:	b9a3      	cbnz	r3, d418c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4162:	490b      	ldr	r1, [pc, #44]	; (d4190 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4164:	b002      	add	sp, #8
   d4166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d416a:	f002 bf9d 	b.w	d70a8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d416e:	4a09      	ldr	r2, [pc, #36]	; (d4194 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4170:	7b26      	ldrb	r6, [r4, #12]
   d4172:	4d09      	ldr	r5, [pc, #36]	; (d4198 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4174:	4909      	ldr	r1, [pc, #36]	; (d419c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4176:	7b64      	ldrb	r4, [r4, #13]
   d4178:	2e01      	cmp	r6, #1
   d417a:	bf18      	it	ne
   d417c:	4629      	movne	r1, r5
   d417e:	e9cd 1400 	strd	r1, r4, [sp]
   d4182:	4907      	ldr	r1, [pc, #28]	; (d41a0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4184:	f7ff ffd8 	bl	d4138 <_ZN5Print6printfEPKcz>
  }
   d4188:	b002      	add	sp, #8
   d418a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d418c:	4a05      	ldr	r2, [pc, #20]	; (d41a4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d418e:	e7ef      	b.n	d4170 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4190:	000d8515 	.word	0x000d8515
   d4194:	000d8553 	.word	0x000d8553
   d4198:	000d8511 	.word	0x000d8511
   d419c:	000d850d 	.word	0x000d850d
   d41a0:	000d852b 	.word	0x000d852b
   d41a4:	000d8504 	.word	0x000d8504

000d41a8 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41a8:	b40e      	push	{r1, r2, r3}
   d41aa:	b503      	push	{r0, r1, lr}
   d41ac:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d41ae:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41b0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d41b4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d41b6:	f002 ffb2 	bl	d711e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d41ba:	b002      	add	sp, #8
   d41bc:	f85d eb04 	ldr.w	lr, [sp], #4
   d41c0:	b003      	add	sp, #12
   d41c2:	4770      	bx	lr

000d41c4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d41c4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d41c6:	f002 fb89 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d41ca:	4b03      	ldr	r3, [pc, #12]	; (d41d8 <_ZN10CloudClass7processEv+0x14>)
   d41cc:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d41ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d41d2:	f002 bd9f 	b.w	d6d14 <spark_process>
   d41d6:	bf00      	nop
   d41d8:	2003e7d4 	.word	0x2003e7d4

000d41dc <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41dc:	6803      	ldr	r3, [r0, #0]
   d41de:	b12b      	cbz	r3, d41ec <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d41e0:	6842      	ldr	r2, [r0, #4]
   d41e2:	4293      	cmp	r3, r2
   d41e4:	d202      	bcs.n	d41ec <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d41e6:	4618      	mov	r0, r3
   d41e8:	f004 b888 	b.w	d82fc <atoi>
   d41ec:	2000      	movs	r0, #0
   d41ee:	4770      	bx	lr

000d41f0 <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d41f0:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41f2:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d41f4:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d41f6:	b145      	cbz	r5, d420a <_ZN10BlynkParam8iteratorppEv+0x1a>
   d41f8:	6843      	ldr	r3, [r0, #4]
   d41fa:	429d      	cmp	r5, r3
   d41fc:	d205      	bcs.n	d420a <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d41fe:	4628      	mov	r0, r5
   d4200:	f004 f8d6 	bl	d83b0 <strlen>
   d4204:	3001      	adds	r0, #1
   d4206:	4405      	add	r5, r0
   d4208:	6025      	str	r5, [r4, #0]
        }
   d420a:	4620      	mov	r0, r4
   d420c:	bd38      	pop	{r3, r4, r5, pc}

000d420e <_ZNK10BlynkParamixEi>:
{
   d420e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    iterator end() const   { return iterator(buff+len, buff+len); }
   d4210:	e9d1 3600 	ldrd	r3, r6, [r1]
   d4214:	441e      	add	r6, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4216:	e9cd 3600 	strd	r3, r6, [sp]
{
   d421a:	4604      	mov	r4, r0
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d421c:	4615      	mov	r5, r2
   d421e:	466f      	mov	r7, sp
    for (iterator it = begin(); it < e; ++it) {
   d4220:	9b00      	ldr	r3, [sp, #0]
   d4222:	42b3      	cmp	r3, r6
   d4224:	d20c      	bcs.n	d4240 <_ZNK10BlynkParamixEi+0x32>
        if (!index--) {
   d4226:	b935      	cbnz	r5, d4236 <_ZNK10BlynkParamixEi+0x28>
            return it;
   d4228:	e897 0003 	ldmia.w	r7, {r0, r1}
   d422c:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d4230:	4620      	mov	r0, r4
   d4232:	b003      	add	sp, #12
   d4234:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (iterator it = begin(); it < e; ++it) {
   d4236:	4638      	mov	r0, r7
   d4238:	f7ff ffda 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d423c:	3d01      	subs	r5, #1
   d423e:	e7ef      	b.n	d4220 <_ZNK10BlynkParamixEi+0x12>
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4240:	2300      	movs	r3, #0
   d4242:	e9c4 3300 	strd	r3, r3, [r4]
        static iterator invalid() { return iterator(NULL, NULL); }
   d4246:	e7f3      	b.n	d4230 <_ZNK10BlynkParamixEi+0x22>

000d4248 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d4248:	b538      	push	{r3, r4, r5, lr}
   d424a:	4604      	mov	r4, r0
   d424c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d424e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d4252:	6825      	ldr	r5, [r4, #0]
   d4254:	4a04      	ldr	r2, [pc, #16]	; (d4268 <_ZN10BlynkParam3addEi+0x20>)
   d4256:	1a09      	subs	r1, r1, r0
   d4258:	4428      	add	r0, r5
   d425a:	f002 fd7b 	bl	d6d54 <snprintf>
   d425e:	6863      	ldr	r3, [r4, #4]
   d4260:	3001      	adds	r0, #1
   d4262:	4403      	add	r3, r0
   d4264:	6063      	str	r3, [r4, #4]
    }
   d4266:	bd38      	pop	{r3, r4, r5, pc}
   d4268:	000d8548 	.word	0x000d8548

000d426c <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d426c:	b538      	push	{r3, r4, r5, lr}
   d426e:	4604      	mov	r4, r0
   d4270:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d4272:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d4276:	6825      	ldr	r5, [r4, #0]
   d4278:	4a04      	ldr	r2, [pc, #16]	; (d428c <_ZN10BlynkParam3addEl+0x20>)
   d427a:	1a09      	subs	r1, r1, r0
   d427c:	4428      	add	r0, r5
   d427e:	f002 fd69 	bl	d6d54 <snprintf>
   d4282:	6863      	ldr	r3, [r4, #4]
   d4284:	3001      	adds	r0, #1
   d4286:	4403      	add	r3, r0
   d4288:	6063      	str	r3, [r4, #4]
    }
   d428a:	bd38      	pop	{r3, r4, r5, pc}
   d428c:	000d854b 	.word	0x000d854b

000d4290 <BlynkWidgetWrite1>:
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0};
BLYNK_WRITE(V1) {
   d4290:	b573      	push	{r0, r1, r4, r5, r6, lr}
  int xx = param[0].asInt();
   d4292:	2200      	movs	r2, #0
   d4294:	4668      	mov	r0, sp
BLYNK_WRITE(V1) {
   d4296:	460d      	mov	r5, r1
  int xx = param[0].asInt();
   d4298:	f7ff ffb9 	bl	d420e <_ZNK10BlynkParamixEi>
   d429c:	4668      	mov	r0, sp
   d429e:	f7ff ff9d 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>
  int yy = param[1].asInt();
   d42a2:	2201      	movs	r2, #1
   d42a4:	4629      	mov	r1, r5
  int xx = param[0].asInt();
   d42a6:	4604      	mov	r4, r0
  int yy = param[1].asInt();
   d42a8:	4668      	mov	r0, sp
   d42aa:	f7ff ffb0 	bl	d420e <_ZNK10BlynkParamixEi>
   d42ae:	4668      	mov	r0, sp
   d42b0:	f7ff ff94 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>
   d42b4:	4605      	mov	r5, r0
  
  Serial.print("X = ");
   d42b6:	f003 f941 	bl	d753c <_Z16_fetch_usbserialv>
   d42ba:	4919      	ldr	r1, [pc, #100]	; (d4320 <BlynkWidgetWrite1+0x90>)
   d42bc:	f002 fef4 	bl	d70a8 <_ZN5Print5printEPKc>
  Serial.print(xx);
   d42c0:	f003 f93c 	bl	d753c <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d42c4:	2c00      	cmp	r4, #0
   d42c6:	4606      	mov	r6, r0
   d42c8:	da25      	bge.n	d4316 <BlynkWidgetWrite1+0x86>
            t = print('-');
   d42ca:	212d      	movs	r1, #45	; 0x2d
   d42cc:	f002 fef0 	bl	d70b0 <_ZN5Print5printEc>
            val = -n;
   d42d0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d42d2:	220a      	movs	r2, #10
   d42d4:	4630      	mov	r0, r6
   d42d6:	f002 ff04 	bl	d70e2 <_ZN5Print11printNumberEmh>
  Serial.print("; Y = ");
   d42da:	f003 f92f 	bl	d753c <_Z16_fetch_usbserialv>
   d42de:	4911      	ldr	r1, [pc, #68]	; (d4324 <BlynkWidgetWrite1+0x94>)
   d42e0:	f002 fee2 	bl	d70a8 <_ZN5Print5printEPKc>
  Serial.println(yy);
   d42e4:	f003 f92a 	bl	d753c <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d42e8:	2d00      	cmp	r5, #0
   d42ea:	4606      	mov	r6, r0
   d42ec:	da15      	bge.n	d431a <BlynkWidgetWrite1+0x8a>
            t = print('-');
   d42ee:	212d      	movs	r1, #45	; 0x2d
   d42f0:	f002 fede 	bl	d70b0 <_ZN5Print5printEc>
            val = -n;
   d42f4:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d42f6:	220a      	movs	r2, #10
   d42f8:	4630      	mov	r0, r6
   d42fa:	f002 fef2 	bl	d70e2 <_ZN5Print11printNumberEmh>
        n += println();
   d42fe:	4630      	mov	r0, r6
   d4300:	f002 fed9 	bl	d70b6 <_ZN5Print7printlnEv>
  // int pinValue = param.asInt(); 
  // Serial.print("V1 Slider value is: ");
  // Serial.println(pinValue);
  if(chooseJolystick){
   d4304:	4b08      	ldr	r3, [pc, #32]	; (d4328 <BlynkWidgetWrite1+0x98>)
   d4306:	781b      	ldrb	r3, [r3, #0]
   d4308:	b11b      	cbz	r3, d4312 <BlynkWidgetWrite1+0x82>
    movingY = yy;
   d430a:	4b08      	ldr	r3, [pc, #32]	; (d432c <BlynkWidgetWrite1+0x9c>)
   d430c:	601d      	str	r5, [r3, #0]
    movingX = xx;
   d430e:	4b08      	ldr	r3, [pc, #32]	; (d4330 <BlynkWidgetWrite1+0xa0>)
   d4310:	601c      	str	r4, [r3, #0]
  }
}
   d4312:	b002      	add	sp, #8
   d4314:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d4316:	4621      	mov	r1, r4
   d4318:	e7db      	b.n	d42d2 <BlynkWidgetWrite1+0x42>
   d431a:	4629      	mov	r1, r5
   d431c:	e7eb      	b.n	d42f6 <BlynkWidgetWrite1+0x66>
   d431e:	bf00      	nop
   d4320:	000d854f 	.word	0x000d854f
   d4324:	000d8554 	.word	0x000d8554
   d4328:	2003e5c8 	.word	0x2003e5c8
   d432c:	2003e648 	.word	0x2003e648
   d4330:	2003e644 	.word	0x2003e644

000d4334 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d4334:	b508      	push	{r3, lr}
        state = CONNECTING;
   d4336:	2300      	movs	r3, #0
   d4338:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d433a:	6800      	ldr	r0, [r0, #0]
   d433c:	f003 fc00 	bl	d7b40 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d4340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d4344:	f002 ba4c 	b.w	d67e0 <BlynkNoOpCbk>

000d4348 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d4348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d434c:	188f      	adds	r7, r1, r2
   d434e:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d4350:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4352:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d4356:	4606      	mov	r6, r0
   d4358:	4689      	mov	r9, r1
   d435a:	4690      	mov	r8, r2
    if (it >= param.end())
   d435c:	f080 80c2 	bcs.w	d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d4360:	a805      	add	r0, sp, #20
   d4362:	880d      	ldrh	r5, [r1, #0]
   d4364:	f7ff ff44 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d4368:	6803      	ldr	r3, [r0, #0]
   d436a:	429f      	cmp	r7, r3
   d436c:	f240 80ba 	bls.w	d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4370:	9805      	ldr	r0, [sp, #20]
   d4372:	7803      	ldrb	r3, [r0, #0]
   d4374:	2b41      	cmp	r3, #65	; 0x41
   d4376:	d149      	bne.n	d440c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   d4378:	3001      	adds	r0, #1
   d437a:	f003 ffbf 	bl	d82fc <atoi>
   d437e:	2805      	cmp	r0, #5
   d4380:	dd37      	ble.n	d43f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   d4382:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   d4384:	f247 2376 	movw	r3, #29302	; 0x7276
   d4388:	429d      	cmp	r5, r3
   d438a:	f000 80d3 	beq.w	d4534 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   d438e:	d841      	bhi.n	d4414 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   d4390:	f247 2361 	movw	r3, #29281	; 0x7261
   d4394:	429d      	cmp	r5, r3
   d4396:	f000 80a8 	beq.w	d44ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   d439a:	f247 2364 	movw	r3, #29284	; 0x7264
   d439e:	429d      	cmp	r5, r3
   d43a0:	d06b      	beq.n	d447a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   d43a2:	f646 5370 	movw	r3, #28016	; 0x6d70
   d43a6:	429d      	cmp	r5, r3
   d43a8:	d141      	bne.n	d442e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d43aa:	4d78      	ldr	r5, [pc, #480]	; (d458c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d43ac:	4e78      	ldr	r6, [pc, #480]	; (d4590 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   d43ae:	f8df 81f4 	ldr.w	r8, [pc, #500]	; d45a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        while (it < param.end()) {
   d43b2:	9805      	ldr	r0, [sp, #20]
   d43b4:	4287      	cmp	r7, r0
   d43b6:	f240 8095 	bls.w	d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d43ba:	7803      	ldrb	r3, [r0, #0]
   d43bc:	2b41      	cmp	r3, #65	; 0x41
   d43be:	d14b      	bne.n	d4458 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   d43c0:	3001      	adds	r0, #1
   d43c2:	f003 ff9b 	bl	d82fc <atoi>
   d43c6:	2805      	cmp	r0, #5
   d43c8:	dd39      	ble.n	d443e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   d43ca:	24ff      	movs	r4, #255	; 0xff
            ++it;
   d43cc:	a805      	add	r0, sp, #20
   d43ce:	f7ff ff0f 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d43d2:	f8dd 9014 	ldr.w	r9, [sp, #20]
   d43d6:	4629      	mov	r1, r5
   d43d8:	4648      	mov	r0, r9
   d43da:	f003 ffdf 	bl	d839c <strcmp>
   d43de:	4601      	mov	r1, r0
   d43e0:	2800      	cmp	r0, #0
   d43e2:	d13d      	bne.n	d4460 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   d43e4:	4620      	mov	r0, r4
   d43e6:	f003 fdb3 	bl	d7f50 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d43ea:	a805      	add	r0, sp, #20
   d43ec:	f7ff ff00 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d43f0:	e7df      	b.n	d43b2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d43f2:	9805      	ldr	r0, [sp, #20]
   d43f4:	3001      	adds	r0, #1
   d43f6:	f003 ff81 	bl	d82fc <atoi>
   d43fa:	2800      	cmp	r0, #0
   d43fc:	dbc1      	blt.n	d4382 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   d43fe:	9805      	ldr	r0, [sp, #20]
   d4400:	3001      	adds	r0, #1
   d4402:	f003 ff7b 	bl	d82fc <atoi>
   d4406:	300e      	adds	r0, #14
   d4408:	b2c4      	uxtb	r4, r0
   d440a:	e7bb      	b.n	d4384 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   d440c:	a805      	add	r0, sp, #20
   d440e:	f7ff fee5 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>
   d4412:	e7f9      	b.n	d4408 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   d4414:	f247 7364 	movw	r3, #30564	; 0x7764
   d4418:	429d      	cmp	r5, r3
   d441a:	d04f      	beq.n	d44bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   d441c:	f247 7376 	movw	r3, #30582	; 0x7776
   d4420:	429d      	cmp	r5, r3
   d4422:	f000 8097 	beq.w	d4554 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   d4426:	f247 7361 	movw	r3, #30561	; 0x7761
   d442a:	429d      	cmp	r5, r3
   d442c:	d06f      	beq.n	d450e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d442e:	2300      	movs	r3, #0
   d4430:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4434:	2202      	movs	r2, #2
   d4436:	9200      	str	r2, [sp, #0]
   d4438:	8b72      	ldrh	r2, [r6, #26]
   d443a:	4619      	mov	r1, r3
   d443c:	e03a      	b.n	d44b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d443e:	9805      	ldr	r0, [sp, #20]
   d4440:	3001      	adds	r0, #1
   d4442:	f003 ff5b 	bl	d82fc <atoi>
   d4446:	2800      	cmp	r0, #0
   d4448:	dbbf      	blt.n	d43ca <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   d444a:	9805      	ldr	r0, [sp, #20]
   d444c:	3001      	adds	r0, #1
   d444e:	f003 ff55 	bl	d82fc <atoi>
   d4452:	300e      	adds	r0, #14
   d4454:	b2c4      	uxtb	r4, r0
   d4456:	e7b9      	b.n	d43cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   d4458:	a805      	add	r0, sp, #20
   d445a:	f7ff febf 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>
   d445e:	e7f9      	b.n	d4454 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4460:	4631      	mov	r1, r6
   d4462:	4648      	mov	r0, r9
   d4464:	f003 ff9a 	bl	d839c <strcmp>
   d4468:	b128      	cbz	r0, d4476 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   d446a:	4641      	mov	r1, r8
   d446c:	4648      	mov	r0, r9
   d446e:	f003 ff95 	bl	d839c <strcmp>
   d4472:	2800      	cmp	r0, #0
   d4474:	d1b9      	bne.n	d43ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   d4476:	2101      	movs	r1, #1
   d4478:	e7b4      	b.n	d43e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d447a:	ab0a      	add	r3, sp, #40	; 0x28
   d447c:	4945      	ldr	r1, [pc, #276]	; (d4594 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   d447e:	9307      	str	r3, [sp, #28]
   d4480:	a807      	add	r0, sp, #28
   d4482:	2310      	movs	r3, #16
   d4484:	2500      	movs	r5, #0
   d4486:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d448a:	f7ff fe23 	bl	d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d448e:	a807      	add	r0, sp, #28
   d4490:	4621      	mov	r1, r4
   d4492:	f7ff fed9 	bl	d4248 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d4496:	4620      	mov	r0, r4
   d4498:	f003 fd84 	bl	d7fa4 <digitalRead>
        rsp.add(analogRead(pin));
   d449c:	4601      	mov	r1, r0
   d449e:	a807      	add	r0, sp, #28
   d44a0:	f7ff fee4 	bl	d426c <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d44a4:	9b08      	ldr	r3, [sp, #32]
   d44a6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d44aa:	3b01      	subs	r3, #1
   d44ac:	9300      	str	r3, [sp, #0]
   d44ae:	9b07      	ldr	r3, [sp, #28]
   d44b0:	462a      	mov	r2, r5
   d44b2:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d44b4:	4630      	mov	r0, r6
   d44b6:	f000 fa97 	bl	d49e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d44ba:	e013      	b.n	d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   d44bc:	a805      	add	r0, sp, #20
   d44be:	f7ff fe97 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d44c2:	6803      	ldr	r3, [r0, #0]
   d44c4:	429f      	cmp	r7, r3
   d44c6:	d90d      	bls.n	d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   d44c8:	b2a4      	uxth	r4, r4
   d44ca:	2101      	movs	r1, #1
   d44cc:	4620      	mov	r0, r4
   d44ce:	f003 fd3f 	bl	d7f50 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d44d2:	a805      	add	r0, sp, #20
   d44d4:	f7ff fe82 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>
   d44d8:	1e01      	subs	r1, r0, #0
   d44da:	bf18      	it	ne
   d44dc:	2101      	movne	r1, #1
   d44de:	4620      	mov	r0, r4
   d44e0:	f003 fd47 	bl	d7f72 <digitalWrite>
    }
}
   d44e4:	b00f      	add	sp, #60	; 0x3c
   d44e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d44ea:	ab0a      	add	r3, sp, #40	; 0x28
   d44ec:	9307      	str	r3, [sp, #28]
   d44ee:	a807      	add	r0, sp, #28
   d44f0:	2310      	movs	r3, #16
   d44f2:	4929      	ldr	r1, [pc, #164]	; (d4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   d44f4:	2500      	movs	r5, #0
   d44f6:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d44fa:	f7ff fdeb 	bl	d40d4 <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d44fe:	a807      	add	r0, sp, #28
   d4500:	4621      	mov	r1, r4
   d4502:	f7ff fea1 	bl	d4248 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d4506:	4620      	mov	r0, r4
   d4508:	f003 fd5f 	bl	d7fca <analogRead>
   d450c:	e7c6      	b.n	d449c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   d450e:	a805      	add	r0, sp, #20
   d4510:	f7ff fe6e 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d4514:	6803      	ldr	r3, [r0, #0]
   d4516:	429f      	cmp	r7, r3
   d4518:	d9e4      	bls.n	d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   d451a:	b2a4      	uxth	r4, r4
   d451c:	2101      	movs	r1, #1
   d451e:	4620      	mov	r0, r4
   d4520:	f003 fd16 	bl	d7f50 <pinMode>
        analogWrite(pin, it.asInt());
   d4524:	a805      	add	r0, sp, #20
   d4526:	f7ff fe59 	bl	d41dc <_ZNK10BlynkParam8iterator5asIntEv>
   d452a:	4601      	mov	r1, r0
   d452c:	4620      	mov	r0, r4
   d452e:	f003 fd63 	bl	d7ff8 <_Z11analogWritetm>
    } break;
   d4532:	e7d7      	b.n	d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d4534:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d4536:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d453a:	f002 f953 	bl	d67e4 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d453e:	4603      	mov	r3, r0
            handler(req);
   d4540:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d4542:	b123      	cbz	r3, d454e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   d4544:	4a15      	ldr	r2, [pc, #84]	; (d459c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   d4546:	4293      	cmp	r3, r2
   d4548:	d001      	beq.n	d454e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   d454a:	4798      	blx	r3
   d454c:	e7ca      	b.n	d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   d454e:	f002 f945 	bl	d67dc <BlynkWidgetRead>
        }
    }
   d4552:	e7c7      	b.n	d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   d4554:	a805      	add	r0, sp, #20
   d4556:	f7ff fe4b 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d455a:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d455c:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d4560:	eba3 0109 	sub.w	r1, r3, r9
   d4564:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d4568:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d456a:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   d456e:	910c      	str	r1, [sp, #48]	; 0x30
   d4570:	f002 f942 	bl	d67f8 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d4574:	4603      	mov	r3, r0
            handler(req, param);
   d4576:	a90a      	add	r1, sp, #40	; 0x28
   d4578:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d457a:	b123      	cbz	r3, d4586 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   d457c:	4a08      	ldr	r2, [pc, #32]	; (d45a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   d457e:	4293      	cmp	r3, r2
   d4580:	d001      	beq.n	d4586 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   d4582:	4798      	blx	r3
   d4584:	e7ae      	b.n	d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   d4586:	f002 f92a 	bl	d67de <BlynkWidgetWrite>
    } break;
   d458a:	e7ab      	b.n	d44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   d458c:	000d855b 	.word	0x000d855b
   d4590:	000d855e 	.word	0x000d855e
   d4594:	000d8566 	.word	0x000d8566
   d4598:	000d8569 	.word	0x000d8569
   d459c:	000d67dd 	.word	0x000d67dd
   d45a0:	000d67df 	.word	0x000d67df
   d45a4:	000d8562 	.word	0x000d8562

000d45a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d45a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d45ac:	b08c      	sub	sp, #48	; 0x30
   d45ae:	af04      	add	r7, sp, #16
   d45b0:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d45b2:	2205      	movs	r2, #5
   d45b4:	6800      	ldr	r0, [r0, #0]
   d45b6:	1d39      	adds	r1, r7, #4
   d45b8:	f002 fdf7 	bl	d71aa <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d45bc:	b3b8      	cbz	r0, d462e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d45be:	2805      	cmp	r0, #5
   d45c0:	d004      	beq.n	d45cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d45c2:	2000      	movs	r0, #0
}
   d45c4:	3720      	adds	r7, #32
   d45c6:	46bd      	mov	sp, r7
   d45c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d45cc:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d45d0:	0a13      	lsrs	r3, r2, #8
   d45d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d45d6:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d45da:	f8a7 3005 	strh.w	r3, [r7, #5]
   d45de:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d45e0:	0a13      	lsrs	r3, r2, #8
   d45e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d45e6:	fa1f f883 	uxth.w	r8, r3
   d45ea:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d45ee:	2900      	cmp	r1, #0
   d45f0:	d0e7      	beq.n	d45c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d45f2:	793b      	ldrb	r3, [r7, #4]
   d45f4:	bb23      	cbnz	r3, d4640 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d45f6:	f002 f8ef 	bl	d67d8 <_Z11BlynkMillisv>
   d45fa:	4602      	mov	r2, r0
   d45fc:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d45fe:	7f60      	ldrb	r0, [r4, #29]
   d4600:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4604:	b9c0      	cbnz	r0, d4638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d4606:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d460a:	2901      	cmp	r1, #1
   d460c:	d114      	bne.n	d4638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d460e:	2b09      	cmp	r3, #9
   d4610:	d00f      	beq.n	d4632 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d4612:	2bc8      	cmp	r3, #200	; 0xc8
   d4614:	d001      	beq.n	d461a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d4616:	2b04      	cmp	r3, #4
   d4618:	d1d4      	bne.n	d45c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d461a:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d461c:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d461e:	4620      	mov	r0, r4
                state = CONNECTED;
   d4620:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d4622:	f000 fa8f 	bl	d4b44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d4626:	f7ff fdcd 	bl	d41c4 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d462a:	f002 f8d9 	bl	d67e0 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d462e:	2001      	movs	r0, #1
   d4630:	e7c8      	b.n	d45c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d4632:	2303      	movs	r3, #3
   d4634:	7763      	strb	r3, [r4, #29]
                break;
   d4636:	e7c5      	b.n	d45c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d4638:	1f58      	subs	r0, r3, #5
   d463a:	bf18      	it	ne
   d463c:	2001      	movne	r0, #1
   d463e:	e7c1      	b.n	d45c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d4640:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4644:	d903      	bls.n	d464e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d4646:	4620      	mov	r0, r4
   d4648:	f7ff fe74 	bl	d4334 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d464c:	e7ef      	b.n	d462e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d464e:	f108 0308 	add.w	r3, r8, #8
   d4652:	f023 0307 	bic.w	r3, r3, #7
   d4656:	466e      	mov	r6, sp
   d4658:	ebad 0d03 	sub.w	sp, sp, r3
   d465c:	ad04      	add	r5, sp, #16
   d465e:	6820      	ldr	r0, [r4, #0]
   d4660:	4642      	mov	r2, r8
   d4662:	4629      	mov	r1, r5
   d4664:	f002 fda1 	bl	d71aa <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d4668:	4580      	cmp	r8, r0
   d466a:	f04f 0000 	mov.w	r0, #0
   d466e:	d17f      	bne.n	d4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d4670:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4674:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d4676:	f002 f8af 	bl	d67d8 <_Z11BlynkMillisv>
    switch (hdr.type)
   d467a:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d467c:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d467e:	2b14      	cmp	r3, #20
   d4680:	f000 80a6 	beq.w	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d4684:	d848      	bhi.n	d4718 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d4686:	2b0f      	cmp	r3, #15
   d4688:	f000 80a2 	beq.w	d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d468c:	d807      	bhi.n	d469e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d468e:	2b02      	cmp	r3, #2
   d4690:	d048      	beq.n	d4724 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d4692:	2b06      	cmp	r3, #6
   d4694:	d051      	beq.n	d473a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d4696:	4620      	mov	r0, r4
   d4698:	f7ff fe4c 	bl	d4334 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d469c:	e058      	b.n	d4750 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d469e:	2b11      	cmp	r3, #17
   d46a0:	d1f9      	bne.n	d4696 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d46a2:	2300      	movs	r3, #0
   d46a4:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d46a6:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d46aa:	442b      	add	r3, r5
        if (it >= param.end())
   d46ac:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d46ae:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d46b2:	d24d      	bcs.n	d4750 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d46b4:	f107 000c 	add.w	r0, r7, #12
   d46b8:	f8d5 8000 	ldr.w	r8, [r5]
   d46bc:	f7ff fd98 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d46c0:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d46c2:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d46c6:	1b5d      	subs	r5, r3, r5
   d46c8:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d46ca:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d46ce:	687b      	ldr	r3, [r7, #4]
   d46d0:	61fd      	str	r5, [r7, #28]
   d46d2:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d46d6:	8363      	strh	r3, [r4, #26]
   d46d8:	4b64      	ldr	r3, [pc, #400]	; (d486c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d46da:	4598      	cmp	r8, r3
   d46dc:	f000 80bf 	beq.w	d485e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d46e0:	f200 808c 	bhi.w	d47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d46e4:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d46e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d46ec:	4413      	add	r3, r2
   d46ee:	4598      	cmp	r8, r3
   d46f0:	f000 809d 	beq.w	d482e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d46f4:	d879      	bhi.n	d47ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d46f6:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d46fa:	3b06      	subs	r3, #6
   d46fc:	4598      	cmp	r8, r3
   d46fe:	f000 809c 	beq.w	d483a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d4702:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d4706:	3303      	adds	r3, #3
   d4708:	4598      	cmp	r8, r3
   d470a:	d16b      	bne.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d470c:	f107 0114 	add.w	r1, r7, #20
   d4710:	4638      	mov	r0, r7
   d4712:	f002 f864 	bl	d67de <BlynkWidgetWrite>
   d4716:	e065      	b.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d4718:	2b29      	cmp	r3, #41	; 0x29
   d471a:	d01b      	beq.n	d4754 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d471c:	2b37      	cmp	r3, #55	; 0x37
   d471e:	d017      	beq.n	d4750 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4720:	2b1d      	cmp	r3, #29
   d4722:	d1b8      	bne.n	d4696 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d4724:	7f63      	ldrb	r3, [r4, #29]
   d4726:	b943      	cbnz	r3, d473a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d4728:	2301      	movs	r3, #1
   d472a:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d472c:	4620      	mov	r0, r4
   d472e:	f000 fa09 	bl	d4b44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d4732:	f7ff fd47 	bl	d41c4 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d4736:	f002 f853 	bl	d67e0 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d473a:	2300      	movs	r3, #0
   d473c:	21c8      	movs	r1, #200	; 0xc8
   d473e:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4742:	9100      	str	r1, [sp, #0]
   d4744:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4748:	4619      	mov	r1, r3
   d474a:	4620      	mov	r0, r4
   d474c:	f000 f94c 	bl	d49e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d4750:	2001      	movs	r0, #1
   d4752:	e00d      	b.n	d4770 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d4754:	68a3      	ldr	r3, [r4, #8]
   d4756:	b91b      	cbnz	r3, d4760 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d4758:	2040      	movs	r0, #64	; 0x40
   d475a:	f002 faeb 	bl	d6d34 <malloc>
   d475e:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d4760:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d4764:	44a8      	add	r8, r5
        if (it >= param.end())
   d4766:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4768:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d476c:	d302      	bcc.n	d4774 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d476e:	2000      	movs	r0, #0
   d4770:	46b5      	mov	sp, r6
   d4772:	e727      	b.n	d45c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d4774:	4629      	mov	r1, r5
   d4776:	2240      	movs	r2, #64	; 0x40
   d4778:	68a0      	ldr	r0, [r4, #8]
   d477a:	f003 fe21 	bl	d83c0 <strncpy>
        redir_serv[63] = '\0';
   d477e:	68a3      	ldr	r3, [r4, #8]
   d4780:	2500      	movs	r5, #0
   d4782:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d4786:	f107 0014 	add.w	r0, r7, #20
   d478a:	f7ff fd31 	bl	d41f0 <_ZN10BlynkParam8iteratorppEv>
   d478e:	6803      	ldr	r3, [r0, #0]
   d4790:	4543      	cmp	r3, r8
   d4792:	d21b      	bcs.n	d47cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4794:	6978      	ldr	r0, [r7, #20]
   d4796:	b120      	cbz	r0, d47a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d4798:	69bb      	ldr	r3, [r7, #24]
   d479a:	4298      	cmp	r0, r3
   d479c:	d214      	bcs.n	d47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d479e:	f003 fdb1 	bl	d8304 <atol>
            redir_port = it.asLong();
   d47a2:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d47a4:	6820      	ldr	r0, [r4, #0]
   d47a6:	f003 f9cb 	bl	d7b40 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d47aa:	6823      	ldr	r3, [r4, #0]
   d47ac:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d47ae:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d47b0:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d47b2:	2300      	movs	r3, #0
   d47b4:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d47b6:	f002 f80f 	bl	d67d8 <_Z11BlynkMillisv>
   d47ba:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d47be:	3808      	subs	r0, #8
   d47c0:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d47c4:	6160      	str	r0, [r4, #20]
   d47c6:	e7c3      	b.n	d4750 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d47c8:	4628      	mov	r0, r5
   d47ca:	e7ea      	b.n	d47a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d47cc:	2550      	movs	r5, #80	; 0x50
   d47ce:	e7e9      	b.n	d47a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d47d0:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d47d2:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d47d6:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d47da:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d47dc:	4629      	mov	r1, r5
   d47de:	4620      	mov	r0, r4
   d47e0:	f7ff fdb2 	bl	d4348 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d47e4:	2300      	movs	r3, #0
   d47e6:	8363      	strh	r3, [r4, #26]
   d47e8:	e7b2      	b.n	d4750 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d47ea:	4b21      	ldr	r3, [pc, #132]	; (d4870 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d47ec:	4598      	cmp	r8, r3
   d47ee:	d1f9      	bne.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d47f0:	f107 0114 	add.w	r1, r7, #20
   d47f4:	4638      	mov	r0, r7
   d47f6:	f001 fff2 	bl	d67de <BlynkWidgetWrite>
   d47fa:	e7f3      	b.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d47fc:	4b1d      	ldr	r3, [pc, #116]	; (d4874 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d47fe:	4598      	cmp	r8, r3
   d4800:	d021      	beq.n	d4846 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d4802:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d4806:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d480a:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d480e:	4598      	cmp	r8, r3
   d4810:	d01f      	beq.n	d4852 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d4812:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d4816:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d481a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d481e:	4598      	cmp	r8, r3
   d4820:	d1e0      	bne.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d4822:	f107 0114 	add.w	r1, r7, #20
   d4826:	4638      	mov	r0, r7
   d4828:	f001 ffd9 	bl	d67de <BlynkWidgetWrite>
   d482c:	e7da      	b.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d482e:	f107 0114 	add.w	r1, r7, #20
   d4832:	4638      	mov	r0, r7
   d4834:	f001 ffd3 	bl	d67de <BlynkWidgetWrite>
   d4838:	e7d4      	b.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d483a:	f107 0114 	add.w	r1, r7, #20
   d483e:	4638      	mov	r0, r7
   d4840:	f001 ffcd 	bl	d67de <BlynkWidgetWrite>
   d4844:	e7ce      	b.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d4846:	f107 0114 	add.w	r1, r7, #20
   d484a:	4638      	mov	r0, r7
   d484c:	f001 ffc7 	bl	d67de <BlynkWidgetWrite>
   d4850:	e7c8      	b.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d4852:	f107 0114 	add.w	r1, r7, #20
   d4856:	4638      	mov	r0, r7
   d4858:	f001 ffc1 	bl	d67de <BlynkWidgetWrite>
   d485c:	e7c2      	b.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d485e:	f107 0114 	add.w	r1, r7, #20
   d4862:	4638      	mov	r0, r7
   d4864:	f001 ffbb 	bl	d67de <BlynkWidgetWrite>
   d4868:	e7bc      	b.n	d47e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d486a:	bf00      	nop
   d486c:	00736676 	.word	0x00736676
   d4870:	00676264 	.word	0x00676264
   d4874:	6e6f6361 	.word	0x6e6f6361

000d4878 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d4878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d487c:	4604      	mov	r4, r0
   d487e:	b08c      	sub	sp, #48	; 0x30
   d4880:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d4882:	f7ff fc9f 	bl	d41c4 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d4886:	7f63      	ldrb	r3, [r4, #29]
   d4888:	2b02      	cmp	r3, #2
   d488a:	f000 80a8 	beq.w	d49de <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d488e:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d4890:	8b62      	ldrh	r2, [r4, #26]
   d4892:	3301      	adds	r3, #1
   d4894:	b2db      	uxtb	r3, r3
   d4896:	7723      	strb	r3, [r4, #28]
   d4898:	b10a      	cbz	r2, d489e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d489a:	2501      	movs	r5, #1
   d489c:	e016      	b.n	d48cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d489e:	2b02      	cmp	r3, #2
   d48a0:	d8fb      	bhi.n	d489a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d48a2:	6820      	ldr	r0, [r4, #0]
   d48a4:	f002 ff6b 	bl	d777e <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d48a8:	b1b8      	cbz	r0, d48da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d48aa:	b925      	cbnz	r5, d48b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d48ac:	6820      	ldr	r0, [r4, #0]
   d48ae:	f003 f8ed 	bl	d7a8c <_ZN9TCPClient9availableEv>
   d48b2:	2800      	cmp	r0, #0
   d48b4:	dd11      	ble.n	d48da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d48b6:	4620      	mov	r0, r4
   d48b8:	f7ff fe76 	bl	d45a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d48bc:	4605      	mov	r5, r0
   d48be:	2800      	cmp	r0, #0
   d48c0:	d1f4      	bne.n	d48ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d48c2:	6820      	ldr	r0, [r4, #0]
   d48c4:	f003 f93c 	bl	d7b40 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d48c8:	f001 ff8a 	bl	d67e0 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d48cc:	7f23      	ldrb	r3, [r4, #28]
   d48ce:	3b01      	subs	r3, #1
   d48d0:	7723      	strb	r3, [r4, #28]
}
   d48d2:	4628      	mov	r0, r5
   d48d4:	b00c      	add	sp, #48	; 0x30
   d48d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d48da:	f001 ff7d 	bl	d67d8 <_Z11BlynkMillisv>
   d48de:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d48e0:	6820      	ldr	r0, [r4, #0]
   d48e2:	f002 ff4c 	bl	d777e <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d48e6:	7f67      	ldrb	r7, [r4, #29]
   d48e8:	2f01      	cmp	r7, #1
   d48ea:	4605      	mov	r5, r0
   d48ec:	d129      	bne.n	d4942 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d48ee:	b920      	cbnz	r0, d48fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d48f0:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d48f2:	4620      	mov	r0, r4
   d48f4:	f7ff fd1e 	bl	d4334 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d48f8:	e7e8      	b.n	d48cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d48fa:	68e3      	ldr	r3, [r4, #12]
   d48fc:	f24f 6218 	movw	r2, #63000	; 0xf618
   d4900:	1af3      	subs	r3, r6, r3
   d4902:	4293      	cmp	r3, r2
   d4904:	d904      	bls.n	d4910 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d4906:	4620      	mov	r0, r4
   d4908:	f7ff fd14 	bl	d4334 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d490c:	2500      	movs	r5, #0
   d490e:	e7dd      	b.n	d48cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4910:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d4914:	4293      	cmp	r3, r2
   d4916:	d803      	bhi.n	d4920 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4918:	6923      	ldr	r3, [r4, #16]
   d491a:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d491c:	4293      	cmp	r3, r2
   d491e:	d9bc      	bls.n	d489a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4920:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4922:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4926:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4928:	4293      	cmp	r3, r2
   d492a:	d9b6      	bls.n	d489a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d492c:	2300      	movs	r3, #0
   d492e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4932:	9300      	str	r3, [sp, #0]
   d4934:	461a      	mov	r2, r3
   d4936:	2106      	movs	r1, #6
   d4938:	4620      	mov	r0, r4
   d493a:	f000 f855 	bl	d49e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d493e:	6166      	str	r6, [r4, #20]
   d4940:	e7ab      	b.n	d489a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d4942:	2f00      	cmp	r7, #0
   d4944:	d1a9      	bne.n	d489a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d4946:	6962      	ldr	r2, [r4, #20]
   d4948:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d494a:	b140      	cbz	r0, d495e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d494c:	f241 7370 	movw	r3, #6000	; 0x1770
   d4950:	429a      	cmp	r2, r3
   d4952:	d9a2      	bls.n	d489a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d4954:	6820      	ldr	r0, [r4, #0]
   d4956:	f003 f8f3 	bl	d7b40 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d495a:	7767      	strb	r7, [r4, #29]
   d495c:	e7d6      	b.n	d490c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d495e:	f241 3388 	movw	r3, #5000	; 0x1388
   d4962:	429a      	cmp	r2, r3
   d4964:	d999      	bls.n	d489a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d4966:	6820      	ldr	r0, [r4, #0]
   d4968:	f003 f8ea 	bl	d7b40 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d496c:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d4970:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d4974:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d4978:	f1be 0f00 	cmp.w	lr, #0
   d497c:	d00b      	beq.n	d4996 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d497e:	462b      	mov	r3, r5
   d4980:	4642      	mov	r2, r8
   d4982:	4671      	mov	r1, lr
   d4984:	4660      	mov	r0, ip
   d4986:	f003 f939 	bl	d7bfc <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d498a:	1e43      	subs	r3, r0, #1
   d498c:	425d      	negs	r5, r3
   d498e:	415d      	adcs	r5, r3
   d4990:	b98d      	cbnz	r5, d49b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d4992:	6166      	str	r6, [r4, #20]
                return false;
   d4994:	e79a      	b.n	d48cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4996:	4b13      	ldr	r3, [pc, #76]	; (d49e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d4998:	9306      	str	r3, [sp, #24]
   d499a:	f10c 0720 	add.w	r7, ip, #32
   d499e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d49a0:	ad07      	add	r5, sp, #28
   d49a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d49a4:	683b      	ldr	r3, [r7, #0]
   d49a6:	702b      	strb	r3, [r5, #0]
   d49a8:	4642      	mov	r2, r8
   d49aa:	4673      	mov	r3, lr
   d49ac:	a906      	add	r1, sp, #24
   d49ae:	4660      	mov	r0, ip
   d49b0:	f002 fff1 	bl	d7996 <_ZN9TCPClient7connectE9IPAddresstm>
   d49b4:	e7e9      	b.n	d498a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d49b6:	6863      	ldr	r3, [r4, #4]
   d49b8:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d49ba:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d49bc:	4618      	mov	r0, r3
            msgIdOut = 1;
   d49be:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d49c0:	f003 fcf6 	bl	d83b0 <strlen>
   d49c4:	2200      	movs	r2, #0
   d49c6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d49ca:	9b05      	ldr	r3, [sp, #20]
   d49cc:	9000      	str	r0, [sp, #0]
   d49ce:	4632      	mov	r2, r6
   d49d0:	211d      	movs	r1, #29
   d49d2:	4620      	mov	r0, r4
   d49d4:	f000 f808 	bl	d49e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d49d8:	6923      	ldr	r3, [r4, #16]
   d49da:	6163      	str	r3, [r4, #20]
            return true;
   d49dc:	e776      	b.n	d48cc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d49de:	2500      	movs	r5, #0
   d49e0:	e777      	b.n	d48d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d49e2:	bf00      	nop
   d49e4:	000d9db4 	.word	0x000d9db4

000d49e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d49e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d49ec:	b083      	sub	sp, #12
   d49ee:	af00      	add	r7, sp, #0
   d49f0:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d49f2:	6800      	ldr	r0, [r0, #0]
   d49f4:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d49f6:	4688      	mov	r8, r1
   d49f8:	4616      	mov	r6, r2
   d49fa:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d49fc:	46eb      	mov	fp, sp
   d49fe:	f002 febe 	bl	d777e <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d4a02:	2800      	cmp	r0, #0
   d4a04:	d07f      	beq.n	d4b06 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4a06:	f1b8 0f1d 	cmp.w	r8, #29
   d4a0a:	d804      	bhi.n	d4a16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d4a0c:	4b4c      	ldr	r3, [pc, #304]	; (d4b40 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d4a0e:	fa23 f308 	lsr.w	r3, r3, r8
   d4a12:	07db      	lsls	r3, r3, #31
   d4a14:	d402      	bmi.n	d4a1c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d4a16:	7f63      	ldrb	r3, [r4, #29]
   d4a18:	2b01      	cmp	r3, #1
   d4a1a:	d174      	bne.n	d4b06 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d4a1c:	b946      	cbnz	r6, d4a30 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d4a1e:	8b66      	ldrh	r6, [r4, #26]
   d4a20:	b936      	cbnz	r6, d4a30 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d4a22:	8b23      	ldrh	r3, [r4, #24]
   d4a24:	3301      	adds	r3, #1
   d4a26:	b29b      	uxth	r3, r3
   d4a28:	2b00      	cmp	r3, #0
   d4a2a:	d071      	beq.n	d4b10 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d4a2c:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d4a2e:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d4a30:	f1a8 030c 	sub.w	r3, r8, #12
   d4a34:	2b08      	cmp	r3, #8
   d4a36:	d816      	bhi.n	d4a66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4a38:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d4a3c:	4293      	cmp	r3, r2
   d4a3e:	bf38      	it	cc
   d4a40:	4613      	movcc	r3, r2
   d4a42:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4a46:	f001 fec7 	bl	d67d8 <_Z11BlynkMillisv>
   d4a4a:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d4a4e:	2800      	cmp	r0, #0
   d4a50:	db60      	blt.n	d4b14 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d4a52:	2100      	movs	r1, #0
   d4a54:	4620      	mov	r0, r4
   d4a56:	f7ff ff0f 	bl	d4878 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4a5a:	f001 febd 	bl	d67d8 <_Z11BlynkMillisv>
   d4a5e:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d4a62:	2800      	cmp	r0, #0
   d4a64:	daf5      	bge.n	d4a52 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a66:	f1b9 0f00 	cmp.w	r9, #0
   d4a6a:	d05a      	beq.n	d4b22 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d4a6c:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d4a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4a70:	2a00      	cmp	r2, #0
   d4a72:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4a74:	bf08      	it	eq
   d4a76:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a78:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4a7c:	f10a 0307 	add.w	r3, sl, #7
   d4a80:	f023 0307 	bic.w	r3, r3, #7
   d4a84:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4a8a:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4a8e:	18ea      	adds	r2, r5, r3
   d4a90:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4a94:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4a96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4a9a:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4a9e:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4aa2:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4aa6:	f1b9 0f00 	cmp.w	r9, #0
   d4aaa:	d03c      	beq.n	d4b26 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4aac:	2d00      	cmp	r5, #0
   d4aae:	d03a      	beq.n	d4b26 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4ab0:	462a      	mov	r2, r5
   d4ab2:	4649      	mov	r1, r9
   d4ab4:	f10d 0005 	add.w	r0, sp, #5
   d4ab8:	f003 fc36 	bl	d8328 <memcpy>
        pos += length;
   d4abc:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4ac0:	b13b      	cbz	r3, d4ad2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4ac4:	b12b      	cbz	r3, d4ad2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4ac6:	461a      	mov	r2, r3
   d4ac8:	687b      	ldr	r3, [r7, #4]
   d4aca:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4acc:	4418      	add	r0, r3
   d4ace:	f003 fc2b 	bl	d8328 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4ad2:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4ad4:	4555      	cmp	r5, sl
   d4ad6:	d22a      	bcs.n	d4b2e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4ad8:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4adc:	687b      	ldr	r3, [r7, #4]
   d4ade:	6820      	ldr	r0, [r4, #0]
   d4ae0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4ae4:	bf28      	it	cs
   d4ae6:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4aea:	1959      	adds	r1, r3, r5
   d4aec:	f002 fe31 	bl	d7752 <_ZN9TCPClient5writeEPKhj>
   d4af0:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4af2:	2000      	movs	r0, #0
   d4af4:	f001 fe6e 	bl	d67d4 <_Z10BlynkDelaym>
        if (w == 0) {
   d4af8:	b9be      	cbnz	r6, d4b2a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4afa:	6820      	ldr	r0, [r4, #0]
   d4afc:	f003 f820 	bl	d7b40 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4b00:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4b02:	f001 fe6d 	bl	d67e0 <BlynkNoOpCbk>
}
   d4b06:	370c      	adds	r7, #12
   d4b08:	46dd      	mov	sp, fp
   d4b0a:	46bd      	mov	sp, r7
   d4b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4b10:	2301      	movs	r3, #1
   d4b12:	e78b      	b.n	d4a2c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4b14:	7f21      	ldrb	r1, [r4, #28]
   d4b16:	2900      	cmp	r1, #0
   d4b18:	d1a5      	bne.n	d4a66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4b1a:	4620      	mov	r0, r4
   d4b1c:	f7ff feac 	bl	d4878 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4b20:	e7a1      	b.n	d4a66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4b22:	2305      	movs	r3, #5
   d4b24:	e7a3      	b.n	d4a6e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4b26:	2005      	movs	r0, #5
   d4b28:	e7c9      	b.n	d4abe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4b2a:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4b2c:	e7d2      	b.n	d4ad4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4b2e:	d003      	beq.n	d4b38 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4b30:	4620      	mov	r0, r4
   d4b32:	f7ff fbff 	bl	d4334 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4b36:	e7e6      	b.n	d4b06 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4b38:	f001 fe4e 	bl	d67d8 <_Z11BlynkMillisv>
   d4b3c:	6120      	str	r0, [r4, #16]
   d4b3e:	e7e2      	b.n	d4b06 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4b40:	20000045 	.word	0x20000045

000d4b44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4b44:	b500      	push	{lr}
   d4b46:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4b48:	ab04      	add	r3, sp, #16
   d4b4a:	2200      	movs	r2, #0
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	2349      	movs	r3, #73	; 0x49
   d4b50:	9300      	str	r3, [sp, #0]
   d4b52:	9202      	str	r2, [sp, #8]
   d4b54:	4b03      	ldr	r3, [pc, #12]	; (d4b64 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4b56:	2111      	movs	r1, #17
   d4b58:	f7ff ff46 	bl	d49e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4b5c:	b015      	add	sp, #84	; 0x54
   d4b5e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b62:	bf00      	nop
   d4b64:	000d8668 	.word	0x000d8668

000d4b68 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b6c:	4615      	mov	r5, r2
   d4b6e:	b08c      	sub	sp, #48	; 0x30
   d4b70:	4604      	mov	r4, r0
   d4b72:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4b74:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d4b78:	460f      	mov	r7, r1
   d4b7a:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d4b7c:	f001 fe2a 	bl	d67d4 <_Z10BlynkDelaym>
   d4b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b82:	ae01      	add	r6, sp, #4
   d4b84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4b86:	682b      	ldr	r3, [r5, #0]
   d4b88:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d4b8a:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4b8c:	f001 fe24 	bl	d67d8 <_Z11BlynkMillisv>
   d4b90:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4b94:	3808      	subs	r0, #8
   d4b96:	af01      	add	r7, sp, #4
   d4b98:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4b9c:	6160      	str	r0, [r4, #20]
   d4b9e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4ba0:	ae07      	add	r6, sp, #28
   d4ba2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4ba4:	683b      	ldr	r3, [r7, #0]
   d4ba6:	7033      	strb	r3, [r6, #0]
   d4ba8:	af07      	add	r7, sp, #28
   d4baa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d4bac:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d4bae:	f04f 0c00 	mov.w	ip, #0
   d4bb2:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d4bb6:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d4bba:	3520      	adds	r5, #32
   d4bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4bbe:	6833      	ldr	r3, [r6, #0]
   d4bc0:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d4bc2:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d4bc4:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d4bc8:	6820      	ldr	r0, [r4, #0]
   d4bca:	f002 ffb9 	bl	d7b40 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d4bce:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d4bd0:	f001 fe02 	bl	d67d8 <_Z11BlynkMillisv>
   d4bd4:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d4bd6:	7f63      	ldrb	r3, [r4, #29]
   d4bd8:	2b01      	cmp	r3, #1
   d4bda:	d00c      	beq.n	d4bf6 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d4bdc:	f001 fdfc 	bl	d67d8 <_Z11BlynkMillisv>
   d4be0:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d4be2:	42b8      	cmp	r0, r7
   d4be4:	d804      	bhi.n	d4bf0 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d4be6:	2100      	movs	r1, #0
   d4be8:	4620      	mov	r0, r4
   d4bea:	f7ff fe45 	bl	d4878 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d4bee:	e7f2      	b.n	d4bd6 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d4bf0:	7f63      	ldrb	r3, [r4, #29]
   d4bf2:	2b01      	cmp	r3, #1
   d4bf4:	d1e8      	bne.n	d4bc8 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d4bf6:	b00c      	add	sp, #48	; 0x30
   d4bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4bfc <setup>:
// setup() runs once, when the device is first turned on.
void setup() {
   d4bfc:	b510      	push	{r4, lr}
   d4bfe:	b08c      	sub	sp, #48	; 0x30
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d4c00:	f002 fc9c 	bl	d753c <_Z16_fetch_usbserialv>
   d4c04:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4c08:	f002 fc8c 	bl	d7524 <_ZN9USBSerial5beginEl>

  pinMode(red, OUTPUT);
   d4c0c:	2101      	movs	r1, #1
   d4c0e:	2006      	movs	r0, #6
  pinMode(green, OUTPUT);
  pinMode(blue, OUTPUT);

  display.setup();
   d4c10:	4c2a      	ldr	r4, [pc, #168]	; (d4cbc <setup+0xc0>)
  pinMode(red, OUTPUT);
   d4c12:	f003 f99d 	bl	d7f50 <pinMode>
  pinMode(green, OUTPUT);
   d4c16:	2101      	movs	r1, #1
   d4c18:	2007      	movs	r0, #7
   d4c1a:	f003 f999 	bl	d7f50 <pinMode>
  pinMode(blue, OUTPUT);
   d4c1e:	2101      	movs	r1, #1
   d4c20:	2012      	movs	r0, #18
   d4c22:	f003 f995 	bl	d7f50 <pinMode>
  display.setup();
   d4c26:	4620      	mov	r0, r4
   d4c28:	f000 ff2c 	bl	d5a84 <_ZN16OledWingAdafruit5setupEv>
	display.clearDisplay();
   d4c2c:	4620      	mov	r0, r4
   d4c2e:	f001 f95b 	bl	d5ee8 <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.display();
   d4c32:	4620      	mov	r0, r4
   d4c34:	f001 fbfe 	bl	d6434 <_ZN16Adafruit_SSD13067displayEv>

  Blynk.begin("KFgwPygKZdZF5I_kkJtpz3rqrdW55Z0J", IPAddress(167, 172, 234, 162), 9090);
   d4c38:	23a2      	movs	r3, #162	; 0xa2
   d4c3a:	9300      	str	r3, [sp, #0]
   d4c3c:	22ac      	movs	r2, #172	; 0xac
   d4c3e:	23ea      	movs	r3, #234	; 0xea
   d4c40:	21a7      	movs	r1, #167	; 0xa7
   d4c42:	a806      	add	r0, sp, #24
   d4c44:	f002 fc02 	bl	d744c <_ZN9IPAddressC1Ehhhh>
   d4c48:	f242 3382 	movw	r3, #9090	; 0x2382
   d4c4c:	aa06      	add	r2, sp, #24
   d4c4e:	491c      	ldr	r1, [pc, #112]	; (d4cc0 <setup+0xc4>)
   d4c50:	481c      	ldr	r0, [pc, #112]	; (d4cc4 <setup+0xc8>)
   d4c52:	f7ff ff89 	bl	d4b68 <_ZN13BlynkParticle5beginEPKc9IPAddresst>

  LIS3DHConfig config;
   d4c56:	a806      	add	r0, sp, #24
   d4c58:	f001 fce6 	bl	d6628 <_ZN12LIS3DHConfigC1Ev>
	config.setPositionInterrupt(16);
   d4c5c:	2110      	movs	r1, #16
   d4c5e:	a806      	add	r0, sp, #24
   d4c60:	f001 fcef 	bl	d6642 <_ZN12LIS3DHConfig20setPositionInterruptEh>
	bool setupSuccess = accel.setup(config);
   d4c64:	a906      	add	r1, sp, #24
   d4c66:	4818      	ldr	r0, [pc, #96]	; (d4cc8 <setup+0xcc>)
   d4c68:	f001 fd58 	bl	d671c <_ZN6LIS3DH5setupER12LIS3DHConfig>
   d4c6c:	9005      	str	r0, [sp, #20]
	Serial.printlnf("setupSuccess=%d", setupSuccess);
   d4c6e:	f002 fc65 	bl	d753c <_Z16_fetch_usbserialv>
   d4c72:	9a05      	ldr	r2, [sp, #20]
   d4c74:	4915      	ldr	r1, [pc, #84]	; (d4ccc <setup+0xd0>)
   d4c76:	f7ff fa97 	bl	d41a8 <_ZN5Print8printlnfEPKcz>

  display.clearDisplay();
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	f001 f934 	bl	d5ee8 <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.setTextSize(1);
   d4c80:	4620      	mov	r0, r4
   d4c82:	2101      	movs	r1, #1
   d4c84:	f000 feaf 	bl	d59e6 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4c88:	2200      	movs	r2, #0
   d4c8a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4c8e:	e9c4 2304 	strd	r2, r3, [r4, #16]
	display.setTextColor(WHITE);
	display.setCursor(0,0);
  display.drawBitmap(12,0, IoTStart,100,30,WHITE);
   d4c92:	2101      	movs	r1, #1
   d4c94:	231e      	movs	r3, #30
   d4c96:	e9cd 3101 	strd	r3, r1, [sp, #4]
   d4c9a:	2364      	movs	r3, #100	; 0x64
   d4c9c:	210c      	movs	r1, #12
   d4c9e:	9300      	str	r3, [sp, #0]
   d4ca0:	4620      	mov	r0, r4
   d4ca2:	4b0b      	ldr	r3, [pc, #44]	; (d4cd0 <setup+0xd4>)
   d4ca4:	f000 fc5c 	bl	d5560 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
	display.display();
   d4ca8:	4620      	mov	r0, r4
   d4caa:	f001 fbc3 	bl	d6434 <_ZN16Adafruit_SSD13067displayEv>
  delay(5000);
   d4cae:	f241 3088 	movw	r0, #5000	; 0x1388
   d4cb2:	f002 faa3 	bl	d71fc <delay>
  
  // Put initialization like pinMode and begin functions here.

}
   d4cb6:	b00c      	add	sp, #48	; 0x30
   d4cb8:	bd10      	pop	{r4, pc}
   d4cba:	bf00      	nop
   d4cbc:	2003e5cc 	.word	0x2003e5cc
   d4cc0:	000d856c 	.word	0x000d856c
   d4cc4:	2003e544 	.word	0x2003e544
   d4cc8:	2003e5a0 	.word	0x2003e5a0
   d4ccc:	000d858d 	.word	0x000d858d
   d4cd0:	000d8c73 	.word	0x000d8c73

000d4cd4 <_GLOBAL__sub_I_Blynk>:
    movingX = 0;
    movingY = 0;
  }
  // The core of your code will likely live here.
}
   d4cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : domain(NULL), port(0)
   d4cd6:	4d2a      	ldr	r5, [pc, #168]	; (d4d80 <_GLOBAL__sub_I_Blynk+0xac>)
   d4cd8:	4628      	mov	r0, r5
   d4cda:	2400      	movs	r4, #0
   d4cdc:	f002 ff7a 	bl	d7bd4 <_ZN9TCPClientC1Ev>
   d4ce0:	f105 001c 	add.w	r0, r5, #28
   d4ce4:	f002 fb6e 	bl	d73c4 <_ZN9IPAddressC1Ev>
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4ce8:	4a26      	ldr	r2, [pc, #152]	; (d4d84 <_GLOBAL__sub_I_Blynk+0xb0>)
   d4cea:	636c      	str	r4, [r5, #52]	; 0x34
   d4cec:	872c      	strh	r4, [r5, #56]	; 0x38
   d4cee:	4926      	ldr	r1, [pc, #152]	; (d4d88 <_GLOBAL__sub_I_Blynk+0xb4>)
   d4cf0:	4628      	mov	r0, r5
   d4cf2:	f003 f9e7 	bl	d80c4 <__aeabi_atexit>
        , state(CONNECTING)
   d4cf6:	4b25      	ldr	r3, [pc, #148]	; (d4d8c <_GLOBAL__sub_I_Blynk+0xb8>)
SYSTEM_THREAD(ENABLED);
   d4cf8:	4621      	mov	r1, r4
   d4cfa:	e9c3 5400 	strd	r5, r4, [r3]
   d4cfe:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4d02:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4d06:	619c      	str	r4, [r3, #24]
   d4d08:	839c      	strh	r4, [r3, #28]
   d4d0a:	2001      	movs	r0, #1
   d4d0c:	f001 ff86 	bl	d6c1c <system_thread_set_state>

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d4d10:	4c1f      	ldr	r4, [pc, #124]	; (d4d90 <_GLOBAL__sub_I_Blynk+0xbc>)
OledWingAdafruit display;
   d4d12:	4820      	ldr	r0, [pc, #128]	; (d4d94 <_GLOBAL__sub_I_Blynk+0xc0>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4d14:	4d20      	ldr	r5, [pc, #128]	; (d4d98 <_GLOBAL__sub_I_Blynk+0xc4>)
   d4d16:	2107      	movs	r1, #7
   d4d18:	f000 fe86 	bl	d5a28 <_ZN16OledWingAdafruitC1Ei>
   d4d1c:	4a19      	ldr	r2, [pc, #100]	; (d4d84 <_GLOBAL__sub_I_Blynk+0xb0>)
   d4d1e:	491f      	ldr	r1, [pc, #124]	; (d4d9c <_GLOBAL__sub_I_Blynk+0xc8>)
   d4d20:	481c      	ldr	r0, [pc, #112]	; (d4d94 <_GLOBAL__sub_I_Blynk+0xc0>)
   d4d22:	f003 f9cf 	bl	d80c4 <__aeabi_atexit>
   d4d26:	2108      	movs	r1, #8
   d4d28:	4620      	mov	r0, r4
   d4d2a:	f001 fc93 	bl	d6654 <_ZN6LIS3DHC1Ei>
   d4d2e:	4b1c      	ldr	r3, [pc, #112]	; (d4da0 <_GLOBAL__sub_I_Blynk+0xcc>)
   d4d30:	6023      	str	r3, [r4, #0]
   d4d32:	7829      	ldrb	r1, [r5, #0]
   d4d34:	f3bf 8f5b 	dmb	ish
   d4d38:	f011 0101 	ands.w	r1, r1, #1
   d4d3c:	d10b      	bne.n	d4d56 <_GLOBAL__sub_I_Blynk+0x82>
   d4d3e:	4628      	mov	r0, r5
   d4d40:	9101      	str	r1, [sp, #4]
   d4d42:	f7ff f9b7 	bl	d40b4 <__cxa_guard_acquire>
   d4d46:	9901      	ldr	r1, [sp, #4]
   d4d48:	b128      	cbz	r0, d4d56 <_GLOBAL__sub_I_Blynk+0x82>
   d4d4a:	4816      	ldr	r0, [pc, #88]	; (d4da4 <_GLOBAL__sub_I_Blynk+0xd0>)
   d4d4c:	f002 f866 	bl	d6e1c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4d50:	4628      	mov	r0, r5
   d4d52:	f7ff f9b4 	bl	d40be <__cxa_guard_release>
   d4d56:	4b13      	ldr	r3, [pc, #76]	; (d4da4 <_GLOBAL__sub_I_Blynk+0xd0>)
   d4d58:	60e3      	str	r3, [r4, #12]
   d4d5a:	2305      	movs	r3, #5
      dataMode_{dataMode}
   d4d5c:	4a12      	ldr	r2, [pc, #72]	; (d4da8 <_GLOBAL__sub_I_Blynk+0xd4>)
   d4d5e:	6123      	str	r3, [r4, #16]
   d4d60:	2300      	movs	r3, #0
   d4d62:	7523      	strb	r3, [r4, #20]
   d4d64:	61a2      	str	r2, [r4, #24]
   d4d66:	7723      	strb	r3, [r4, #28]
LIS3DHSPI accel(SPI, D5, WKP);
   d4d68:	4a06      	ldr	r2, [pc, #24]	; (d4d84 <_GLOBAL__sub_I_Blynk+0xb0>)
   d4d6a:	4b10      	ldr	r3, [pc, #64]	; (d4dac <_GLOBAL__sub_I_Blynk+0xd8>)
   d4d6c:	4910      	ldr	r1, [pc, #64]	; (d4db0 <_GLOBAL__sub_I_Blynk+0xdc>)
   d4d6e:	4808      	ldr	r0, [pc, #32]	; (d4d90 <_GLOBAL__sub_I_Blynk+0xbc>)
   d4d70:	6223      	str	r3, [r4, #32]
   d4d72:	2301      	movs	r3, #1
   d4d74:	84a3      	strh	r3, [r4, #36]	; 0x24
   d4d76:	b003      	add	sp, #12
   d4d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
LIS3DHSPI accel(SPI, D5, WKP);
   d4d7c:	f003 b9a2 	b.w	d80c4 <__aeabi_atexit>
   d4d80:	2003e564 	.word	0x2003e564
   d4d84:	2003e534 	.word	0x2003e534
   d4d88:	000d4105 	.word	0x000d4105
   d4d8c:	2003e544 	.word	0x2003e544
   d4d90:	2003e5a0 	.word	0x2003e5a0
   d4d94:	2003e5cc 	.word	0x2003e5cc
   d4d98:	2003e538 	.word	0x2003e538
   d4d9c:	000d59f5 	.word	0x000d59f5
   d4da0:	000d9924 	.word	0x000d9924
   d4da4:	2003e53c 	.word	0x2003e53c
   d4da8:	000d8654 	.word	0x000d8654
   d4dac:	00989680 	.word	0x00989680
   d4db0:	000d6569 	.word	0x000d6569

000d4db4 <loop>:
void loop() {
   d4db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Blynk.run();
   d4db8:	2100      	movs	r1, #0
void loop() {
   d4dba:	b087      	sub	sp, #28
  Blynk.run();
   d4dbc:	487d      	ldr	r0, [pc, #500]	; (d4fb4 <loop+0x200>)
  while(chooseGame){
   d4dbe:	4d7e      	ldr	r5, [pc, #504]	; (d4fb8 <loop+0x204>)
    display.loop();
   d4dc0:	4c7e      	ldr	r4, [pc, #504]	; (d4fbc <loop+0x208>)
  Blynk.run();
   d4dc2:	f7ff fd59 	bl	d4878 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  display.loop();
   d4dc6:	487d      	ldr	r0, [pc, #500]	; (d4fbc <loop+0x208>)
   d4dc8:	f000 fe85 	bl	d5ad6 <_ZN16OledWingAdafruit4loopEv>
   d4dcc:	46aa      	mov	sl, r5
  while(chooseGame){
   d4dce:	782b      	ldrb	r3, [r5, #0]
   d4dd0:	2b00      	cmp	r3, #0
   d4dd2:	d132      	bne.n	d4e3a <loop+0x86>
  while(newGame){
   d4dd4:	4c7a      	ldr	r4, [pc, #488]	; (d4fc0 <loop+0x20c>)
    display.loop();
   d4dd6:	4d79      	ldr	r5, [pc, #484]	; (d4fbc <loop+0x208>)
   d4dd8:	46a3      	mov	fp, r4
  while(newGame){
   d4dda:	7823      	ldrb	r3, [r4, #0]
   d4ddc:	2b00      	cmp	r3, #0
   d4dde:	d074      	beq.n	d4eca <loop+0x116>
    display.loop();
   d4de0:	4876      	ldr	r0, [pc, #472]	; (d4fbc <loop+0x208>)
   d4de2:	f000 fe78 	bl	d5ad6 <_ZN16OledWingAdafruit4loopEv>
    display.clearDisplay();
   d4de6:	4875      	ldr	r0, [pc, #468]	; (d4fbc <loop+0x208>)
   d4de8:	f001 f87e 	bl	d5ee8 <_ZN16Adafruit_SSD130612clearDisplayEv>
		display.setTextSize(1);
   d4dec:	4873      	ldr	r0, [pc, #460]	; (d4fbc <loop+0x208>)
   d4dee:	2101      	movs	r1, #1
   d4df0:	f000 fdf9 	bl	d59e6 <_ZN12Adafruit_GFX11setTextSizeEh>
   d4df4:	2600      	movs	r6, #0
   d4df6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4dfa:	e9c5 6304 	strd	r6, r3, [r5, #16]
		display.println("Press A to play with the accelerometer");
   d4dfe:	4971      	ldr	r1, [pc, #452]	; (d4fc4 <loop+0x210>)
   d4e00:	486e      	ldr	r0, [pc, #440]	; (d4fbc <loop+0x208>)
   d4e02:	f002 f964 	bl	d70ce <_ZN5Print7printlnEPKc>
    display.println("Press B to play with the Jolystick");
   d4e06:	4970      	ldr	r1, [pc, #448]	; (d4fc8 <loop+0x214>)
   d4e08:	486c      	ldr	r0, [pc, #432]	; (d4fbc <loop+0x208>)
   d4e0a:	f002 f960 	bl	d70ce <_ZN5Print7printlnEPKc>
		display.display();
   d4e0e:	486b      	ldr	r0, [pc, #428]	; (d4fbc <loop+0x208>)
   d4e10:	f001 fb10 	bl	d6434 <_ZN16Adafruit_SSD13067displayEv>
    if (display.pressedA()) {
   d4e14:	4869      	ldr	r0, [pc, #420]	; (d4fbc <loop+0x208>)
   d4e16:	f000 fe77 	bl	d5b08 <_ZN16OledWingAdafruit8pressedAEv>
   d4e1a:	b110      	cbz	r0, d4e22 <loop+0x6e>
      chooseJolystick = false;
   d4e1c:	4b6b      	ldr	r3, [pc, #428]	; (d4fcc <loop+0x218>)
      newGame = false;
   d4e1e:	7026      	strb	r6, [r4, #0]
      chooseJolystick = false;
   d4e20:	701e      	strb	r6, [r3, #0]
    if (display.pressedB()) {
   d4e22:	4628      	mov	r0, r5
   d4e24:	f000 fe7a 	bl	d5b1c <_ZN16OledWingAdafruit8pressedBEv>
   d4e28:	2800      	cmp	r0, #0
   d4e2a:	d0d6      	beq.n	d4dda <loop+0x26>
      chooseJolystick = true;
   d4e2c:	4b67      	ldr	r3, [pc, #412]	; (d4fcc <loop+0x218>)
   d4e2e:	2201      	movs	r2, #1
   d4e30:	701a      	strb	r2, [r3, #0]
      newGame = false;
   d4e32:	2300      	movs	r3, #0
   d4e34:	f88b 3000 	strb.w	r3, [fp]
   d4e38:	e7cf      	b.n	d4dda <loop+0x26>
    display.loop();
   d4e3a:	4860      	ldr	r0, [pc, #384]	; (d4fbc <loop+0x208>)
   d4e3c:	f000 fe4b 	bl	d5ad6 <_ZN16OledWingAdafruit4loopEv>
    display.clearDisplay();
   d4e40:	485e      	ldr	r0, [pc, #376]	; (d4fbc <loop+0x208>)
   d4e42:	f001 f851 	bl	d5ee8 <_ZN16Adafruit_SSD130612clearDisplayEv>
		display.setTextSize(1);
   d4e46:	485d      	ldr	r0, [pc, #372]	; (d4fbc <loop+0x208>)
   d4e48:	2101      	movs	r1, #1
   d4e4a:	f000 fdcc 	bl	d59e6 <_ZN12Adafruit_GFX11setTextSizeEh>
   d4e4e:	2600      	movs	r6, #0
   d4e50:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4e54:	e9c4 6304 	strd	r6, r3, [r4, #16]
		display.println("Choose the difficulty");
   d4e58:	495d      	ldr	r1, [pc, #372]	; (d4fd0 <loop+0x21c>)
   d4e5a:	4858      	ldr	r0, [pc, #352]	; (d4fbc <loop+0x208>)
   d4e5c:	f002 f937 	bl	d70ce <_ZN5Print7printlnEPKc>
    display.println("A: easy difficulty");
   d4e60:	495c      	ldr	r1, [pc, #368]	; (d4fd4 <loop+0x220>)
   d4e62:	4856      	ldr	r0, [pc, #344]	; (d4fbc <loop+0x208>)
   d4e64:	f002 f933 	bl	d70ce <_ZN5Print7printlnEPKc>
    display.println("B: medium difficulty");
   d4e68:	495b      	ldr	r1, [pc, #364]	; (d4fd8 <loop+0x224>)
   d4e6a:	4854      	ldr	r0, [pc, #336]	; (d4fbc <loop+0x208>)
   d4e6c:	f002 f92f 	bl	d70ce <_ZN5Print7printlnEPKc>
    display.println("C: hard difficulty");
   d4e70:	495a      	ldr	r1, [pc, #360]	; (d4fdc <loop+0x228>)
   d4e72:	4852      	ldr	r0, [pc, #328]	; (d4fbc <loop+0x208>)
   d4e74:	f002 f92b 	bl	d70ce <_ZN5Print7printlnEPKc>
		display.display();
   d4e78:	4850      	ldr	r0, [pc, #320]	; (d4fbc <loop+0x208>)
   d4e7a:	f001 fadb 	bl	d6434 <_ZN16Adafruit_SSD13067displayEv>
    if (display.pressedA()) {
   d4e7e:	484f      	ldr	r0, [pc, #316]	; (d4fbc <loop+0x208>)
   d4e80:	f000 fe42 	bl	d5b08 <_ZN16OledWingAdafruit8pressedAEv>
   d4e84:	b128      	cbz	r0, d4e92 <loop+0xde>
      maze = 1;
   d4e86:	4a56      	ldr	r2, [pc, #344]	; (d4fe0 <loop+0x22c>)
      chooseGame = false;
   d4e88:	702e      	strb	r6, [r5, #0]
      maze = 1;
   d4e8a:	2301      	movs	r3, #1
   d4e8c:	6013      	str	r3, [r2, #0]
      newGame = true;
   d4e8e:	4a4c      	ldr	r2, [pc, #304]	; (d4fc0 <loop+0x20c>)
   d4e90:	7013      	strb	r3, [r2, #0]
    if (display.pressedB()) {
   d4e92:	4620      	mov	r0, r4
   d4e94:	f000 fe42 	bl	d5b1c <_ZN16OledWingAdafruit8pressedBEv>
   d4e98:	b140      	cbz	r0, d4eac <loop+0xf8>
      maze = 2;
   d4e9a:	4b51      	ldr	r3, [pc, #324]	; (d4fe0 <loop+0x22c>)
   d4e9c:	2202      	movs	r2, #2
   d4e9e:	601a      	str	r2, [r3, #0]
      newGame = true;
   d4ea0:	4b47      	ldr	r3, [pc, #284]	; (d4fc0 <loop+0x20c>)
   d4ea2:	2201      	movs	r2, #1
   d4ea4:	701a      	strb	r2, [r3, #0]
      chooseGame = false;
   d4ea6:	2300      	movs	r3, #0
   d4ea8:	f88a 3000 	strb.w	r3, [sl]
    if (display.pressedC()) {
   d4eac:	4620      	mov	r0, r4
   d4eae:	f000 fe3f 	bl	d5b30 <_ZN16OledWingAdafruit8pressedCEv>
   d4eb2:	2800      	cmp	r0, #0
   d4eb4:	d08b      	beq.n	d4dce <loop+0x1a>
      maze = 3;
   d4eb6:	4b4a      	ldr	r3, [pc, #296]	; (d4fe0 <loop+0x22c>)
   d4eb8:	2203      	movs	r2, #3
   d4eba:	601a      	str	r2, [r3, #0]
      newGame = true;
   d4ebc:	4b40      	ldr	r3, [pc, #256]	; (d4fc0 <loop+0x20c>)
   d4ebe:	2201      	movs	r2, #1
   d4ec0:	701a      	strb	r2, [r3, #0]
      chooseGame = false;
   d4ec2:	2300      	movs	r3, #0
   d4ec4:	f88a 3000 	strb.w	r3, [sl]
   d4ec8:	e781      	b.n	d4dce <loop+0x1a>
  if(!chooseJolystick){
   d4eca:	4b40      	ldr	r3, [pc, #256]	; (d4fcc <loop+0x218>)
   d4ecc:	f8df 8130 	ldr.w	r8, [pc, #304]	; d5000 <loop+0x24c>
   d4ed0:	781b      	ldrb	r3, [r3, #0]
   d4ed2:	bb8b      	cbnz	r3, d4f38 <loop+0x184>
    if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD){
   d4ed4:	4d43      	ldr	r5, [pc, #268]	; (d4fe4 <loop+0x230>)
   d4ed6:	4c44      	ldr	r4, [pc, #272]	; (d4fe8 <loop+0x234>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4ed8:	f001 fd00 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
   d4edc:	682b      	ldr	r3, [r5, #0]
   d4ede:	1ac0      	subs	r0, r0, r3
   d4ee0:	2863      	cmp	r0, #99	; 0x63
   d4ee2:	d91d      	bls.n	d4f20 <loop+0x16c>
   d4ee4:	f001 fcfa 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
      if (accel.getSample(sample)){
   d4ee8:	a904      	add	r1, sp, #16
      lastPrintSample = millis();
   d4eea:	6028      	str	r0, [r5, #0]
      if (accel.getSample(sample)){
   d4eec:	483f      	ldr	r0, [pc, #252]	; (d4fec <loop+0x238>)
   d4eee:	f001 fbdf 	bl	d66b0 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   d4ef2:	2800      	cmp	r0, #0
   d4ef4:	d03d      	beq.n	d4f72 <loop+0x1be>
        Serial.printlnf("%d,%d,%d", sample.x, sample.y, sample.z);
   d4ef6:	f002 fb21 	bl	d753c <_Z16_fetch_usbserialv>
   d4efa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
   d4efe:	9300      	str	r3, [sp, #0]
   d4f00:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d4f04:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
   d4f08:	4939      	ldr	r1, [pc, #228]	; (d4ff0 <loop+0x23c>)
   d4f0a:	f7ff f94d 	bl	d41a8 <_ZN5Print8printlnfEPKcz>
        movingX = sample.x;
   d4f0e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   d4f12:	6023      	str	r3, [r4, #0]
        movingY = sample.y + 300;
   d4f14:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
   d4f18:	f503 7396 	add.w	r3, r3, #300	; 0x12c
   d4f1c:	f8c8 3000 	str.w	r3, [r8]
    movingY = movingY / 2000;
   d4f20:	f8d8 2000 	ldr.w	r2, [r8]
    movingX = movingX / 2000;
   d4f24:	6823      	ldr	r3, [r4, #0]
    movingY = movingY / 2000;
   d4f26:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d4f2a:	fb92 f2f1 	sdiv	r2, r2, r1
    movingX = movingX / 2000;
   d4f2e:	fb93 f3f1 	sdiv	r3, r3, r1
    movingY = movingY / 2000;
   d4f32:	f8c8 2000 	str.w	r2, [r8]
    movingX = movingX / 2000;
   d4f36:	6023      	str	r3, [r4, #0]
  if(movingY > 0){
   d4f38:	f8d8 3000 	ldr.w	r3, [r8]
   d4f3c:	4e2d      	ldr	r6, [pc, #180]	; (d4ff4 <loop+0x240>)
   d4f3e:	4d2e      	ldr	r5, [pc, #184]	; (d4ff8 <loop+0x244>)
   d4f40:	2b00      	cmp	r3, #0
   d4f42:	dd1c      	ble.n	d4f7e <loop+0x1ca>
      if(display.getPixel(x,y-1) == 0 && y > 0){
   d4f44:	4f1d      	ldr	r7, [pc, #116]	; (d4fbc <loop+0x208>)
    for (size_t i = 0; i < movingY ; i++){
   d4f46:	2400      	movs	r4, #0
   d4f48:	f8d8 3000 	ldr.w	r3, [r8]
   d4f4c:	42a3      	cmp	r3, r4
   d4f4e:	d916      	bls.n	d4f7e <loop+0x1ca>
      if(display.getPixel(x,y-1) == 0 && y > 0){
   d4f50:	6832      	ldr	r2, [r6, #0]
   d4f52:	f9b5 1000 	ldrsh.w	r1, [r5]
   d4f56:	3a01      	subs	r2, #1
   d4f58:	b212      	sxth	r2, r2
   d4f5a:	4638      	mov	r0, r7
   d4f5c:	f001 fa30 	bl	d63c0 <_ZN16Adafruit_SSD13068getPixelEss>
   d4f60:	b928      	cbnz	r0, d4f6e <loop+0x1ba>
   d4f62:	6833      	ldr	r3, [r6, #0]
   d4f64:	2b00      	cmp	r3, #0
        y = y-1;
   d4f66:	bfc4      	itt	gt
   d4f68:	f103 33ff 	addgt.w	r3, r3, #4294967295
   d4f6c:	6033      	strgt	r3, [r6, #0]
    for (size_t i = 0; i < movingY ; i++){
   d4f6e:	3401      	adds	r4, #1
   d4f70:	e7ea      	b.n	d4f48 <loop+0x194>
        Serial.println("no sample");
   d4f72:	f002 fae3 	bl	d753c <_Z16_fetch_usbserialv>
   d4f76:	4921      	ldr	r1, [pc, #132]	; (d4ffc <loop+0x248>)
   d4f78:	f002 f8a9 	bl	d70ce <_ZN5Print7printlnEPKc>
   d4f7c:	e7d0      	b.n	d4f20 <loop+0x16c>
  if(movingX > 0){
   d4f7e:	4b1a      	ldr	r3, [pc, #104]	; (d4fe8 <loop+0x234>)
   d4f80:	681a      	ldr	r2, [r3, #0]
   d4f82:	2a00      	cmp	r2, #0
   d4f84:	4699      	mov	r9, r3
   d4f86:	dd3d      	ble.n	d5004 <loop+0x250>
      if(display.getPixel(x+1,y) == 0 && x != 123){
   d4f88:	4f0c      	ldr	r7, [pc, #48]	; (d4fbc <loop+0x208>)
    for (size_t i = 0; i < movingX ; i++){
   d4f8a:	2400      	movs	r4, #0
   d4f8c:	f8d9 3000 	ldr.w	r3, [r9]
   d4f90:	42a3      	cmp	r3, r4
   d4f92:	d937      	bls.n	d5004 <loop+0x250>
      if(display.getPixel(x+1,y) == 0 && x != 123){
   d4f94:	6829      	ldr	r1, [r5, #0]
   d4f96:	f9b6 2000 	ldrsh.w	r2, [r6]
   d4f9a:	3101      	adds	r1, #1
   d4f9c:	b209      	sxth	r1, r1
   d4f9e:	4638      	mov	r0, r7
   d4fa0:	f001 fa0e 	bl	d63c0 <_ZN16Adafruit_SSD13068getPixelEss>
   d4fa4:	b920      	cbnz	r0, d4fb0 <loop+0x1fc>
   d4fa6:	682b      	ldr	r3, [r5, #0]
   d4fa8:	2b7b      	cmp	r3, #123	; 0x7b
        x = x+1;
   d4faa:	bf1c      	itt	ne
   d4fac:	3301      	addne	r3, #1
   d4fae:	602b      	strne	r3, [r5, #0]
    for (size_t i = 0; i < movingX ; i++){
   d4fb0:	3401      	adds	r4, #1
   d4fb2:	e7eb      	b.n	d4f8c <loop+0x1d8>
   d4fb4:	2003e544 	.word	0x2003e544
   d4fb8:	2003e4c0 	.word	0x2003e4c0
   d4fbc:	2003e5cc 	.word	0x2003e5cc
   d4fc0:	2003e64c 	.word	0x2003e64c
   d4fc4:	000d85ee 	.word	0x000d85ee
   d4fc8:	000d8615 	.word	0x000d8615
   d4fcc:	2003e5c8 	.word	0x2003e5c8
   d4fd0:	000d859d 	.word	0x000d859d
   d4fd4:	000d85b3 	.word	0x000d85b3
   d4fd8:	000d85c6 	.word	0x000d85c6
   d4fdc:	000d85db 	.word	0x000d85db
   d4fe0:	2003e640 	.word	0x2003e640
   d4fe4:	2003e63c 	.word	0x2003e63c
   d4fe8:	2003e644 	.word	0x2003e644
   d4fec:	2003e5a0 	.word	0x2003e5a0
   d4ff0:	000d8638 	.word	0x000d8638
   d4ff4:	2003e4c8 	.word	0x2003e4c8
   d4ff8:	2003e4c4 	.word	0x2003e4c4
   d4ffc:	000d8641 	.word	0x000d8641
   d5000:	2003e648 	.word	0x2003e648
  if(movingY < 0){
   d5004:	f8d8 3000 	ldr.w	r3, [r8]
   d5008:	2b00      	cmp	r3, #0
   d500a:	da14      	bge.n	d5036 <loop+0x282>
      if(display.getPixel(x,y+1) == 0 && y != 31){
   d500c:	4f82      	ldr	r7, [pc, #520]	; (d5218 <loop+0x464>)
    for (int i = 0; i > movingY ; i--){
   d500e:	2400      	movs	r4, #0
      if(display.getPixel(x,y+1) == 0 && y != 31){
   d5010:	6832      	ldr	r2, [r6, #0]
   d5012:	f9b5 1000 	ldrsh.w	r1, [r5]
   d5016:	3201      	adds	r2, #1
   d5018:	b212      	sxth	r2, r2
   d501a:	4638      	mov	r0, r7
   d501c:	f001 f9d0 	bl	d63c0 <_ZN16Adafruit_SSD13068getPixelEss>
   d5020:	b920      	cbnz	r0, d502c <loop+0x278>
   d5022:	6833      	ldr	r3, [r6, #0]
   d5024:	2b1f      	cmp	r3, #31
        y = y+1;
   d5026:	bf1c      	itt	ne
   d5028:	3301      	addne	r3, #1
   d502a:	6033      	strne	r3, [r6, #0]
    for (int i = 0; i > movingY ; i--){
   d502c:	f8d8 3000 	ldr.w	r3, [r8]
   d5030:	3c01      	subs	r4, #1
   d5032:	42a3      	cmp	r3, r4
   d5034:	dbec      	blt.n	d5010 <loop+0x25c>
   if(movingX < 0){
   d5036:	f8d9 3000 	ldr.w	r3, [r9]
   d503a:	2b00      	cmp	r3, #0
   d503c:	da15      	bge.n	d506a <loop+0x2b6>
      if(display.getPixel(x-1,y) == 0 && x > 0){
   d503e:	4f76      	ldr	r7, [pc, #472]	; (d5218 <loop+0x464>)
    for (int i = 0; i > movingX ; i--){
   d5040:	2400      	movs	r4, #0
      if(display.getPixel(x-1,y) == 0 && x > 0){
   d5042:	6829      	ldr	r1, [r5, #0]
   d5044:	f9b6 2000 	ldrsh.w	r2, [r6]
   d5048:	3901      	subs	r1, #1
   d504a:	b209      	sxth	r1, r1
   d504c:	4638      	mov	r0, r7
   d504e:	f001 f9b7 	bl	d63c0 <_ZN16Adafruit_SSD13068getPixelEss>
   d5052:	b928      	cbnz	r0, d5060 <loop+0x2ac>
   d5054:	682b      	ldr	r3, [r5, #0]
   d5056:	2b00      	cmp	r3, #0
        x = x-1;
   d5058:	bfc4      	itt	gt
   d505a:	f103 33ff 	addgt.w	r3, r3, #4294967295
   d505e:	602b      	strgt	r3, [r5, #0]
    for (int i = 0; i > movingX ; i--){
   d5060:	f8d9 3000 	ldr.w	r3, [r9]
   d5064:	3c01      	subs	r4, #1
   d5066:	42a3      	cmp	r3, r4
   d5068:	dbeb      	blt.n	d5042 <loop+0x28e>
  display.clearDisplay();
   d506a:	4f6b      	ldr	r7, [pc, #428]	; (d5218 <loop+0x464>)
  if(maze == 1){
   d506c:	4c6b      	ldr	r4, [pc, #428]	; (d521c <loop+0x468>)
  display.clearDisplay();
   d506e:	4638      	mov	r0, r7
   d5070:	f000 ff3a 	bl	d5ee8 <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.setTextSize(1);
   d5074:	2101      	movs	r1, #1
   d5076:	4638      	mov	r0, r7
   d5078:	f000 fcb5 	bl	d59e6 <_ZN12Adafruit_GFX11setTextSizeEh>
   d507c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d5080:	617b      	str	r3, [r7, #20]
  display.drawPixel(x,y,WHITE);
   d5082:	f9b6 2000 	ldrsh.w	r2, [r6]
   d5086:	f9b5 1000 	ldrsh.w	r1, [r5]
   d508a:	2301      	movs	r3, #1
   d508c:	4638      	mov	r0, r7
   d508e:	f000 fdc9 	bl	d5c24 <_ZN16Adafruit_SSD13069drawPixelEsst>
  if(maze == 1){
   d5092:	6823      	ldr	r3, [r4, #0]
   d5094:	2b01      	cmp	r3, #1
   d5096:	d10a      	bne.n	d50ae <loop+0x2fa>
    display.drawBitmap(25,0, maze1,73,32,WHITE);
   d5098:	2020      	movs	r0, #32
   d509a:	9302      	str	r3, [sp, #8]
   d509c:	2349      	movs	r3, #73	; 0x49
   d509e:	e9cd 3000 	strd	r3, r0, [sp]
   d50a2:	2200      	movs	r2, #0
   d50a4:	4b5e      	ldr	r3, [pc, #376]	; (d5220 <loop+0x46c>)
   d50a6:	2119      	movs	r1, #25
   d50a8:	4638      	mov	r0, r7
   d50aa:	f000 fa59 	bl	d5560 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(maze == 2){
   d50ae:	6823      	ldr	r3, [r4, #0]
   d50b0:	2b02      	cmp	r3, #2
   d50b2:	d10b      	bne.n	d50cc <loop+0x318>
    display.drawBitmap(25,0, maze2,72,32,WHITE);
   d50b4:	2320      	movs	r3, #32
   d50b6:	2101      	movs	r1, #1
   d50b8:	e9cd 3101 	strd	r3, r1, [sp, #4]
   d50bc:	2348      	movs	r3, #72	; 0x48
   d50be:	9300      	str	r3, [sp, #0]
   d50c0:	4855      	ldr	r0, [pc, #340]	; (d5218 <loop+0x464>)
   d50c2:	4b58      	ldr	r3, [pc, #352]	; (d5224 <loop+0x470>)
   d50c4:	2200      	movs	r2, #0
   d50c6:	2119      	movs	r1, #25
   d50c8:	f000 fa4a 	bl	d5560 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(maze == 3){
   d50cc:	6823      	ldr	r3, [r4, #0]
   d50ce:	2b03      	cmp	r3, #3
   d50d0:	d10b      	bne.n	d50ea <loop+0x336>
    display.drawBitmap(10,0, maze3,112,32,WHITE);
   d50d2:	2320      	movs	r3, #32
   d50d4:	2201      	movs	r2, #1
   d50d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d50da:	2370      	movs	r3, #112	; 0x70
   d50dc:	9300      	str	r3, [sp, #0]
   d50de:	484e      	ldr	r0, [pc, #312]	; (d5218 <loop+0x464>)
   d50e0:	4b51      	ldr	r3, [pc, #324]	; (d5228 <loop+0x474>)
   d50e2:	2200      	movs	r2, #0
   d50e4:	210a      	movs	r1, #10
   d50e6:	f000 fa3b 	bl	d5560 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
	display.display();
   d50ea:	484b      	ldr	r0, [pc, #300]	; (d5218 <loop+0x464>)
   d50ec:	f001 f9a2 	bl	d6434 <_ZN16Adafruit_SSD13067displayEv>
  delay(200);
   d50f0:	20c8      	movs	r0, #200	; 0xc8
   d50f2:	f002 f883 	bl	d71fc <delay>
  if(x == 123){
   d50f6:	682b      	ldr	r3, [r5, #0]
   d50f8:	2b7b      	cmp	r3, #123	; 0x7b
   d50fa:	f040 808a 	bne.w	d5212 <loop+0x45e>
    display.clearDisplay();
   d50fe:	4846      	ldr	r0, [pc, #280]	; (d5218 <loop+0x464>)
   d5100:	f000 fef2 	bl	d5ee8 <_ZN16Adafruit_SSD130612clearDisplayEv>
		display.setTextSize(1);
   d5104:	4844      	ldr	r0, [pc, #272]	; (d5218 <loop+0x464>)
   d5106:	2101      	movs	r1, #1
   d5108:	2400      	movs	r4, #0
   d510a:	f000 fc6c 	bl	d59e6 <_ZN12Adafruit_GFX11setTextSizeEh>
   d510e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d5112:	e9c7 4304 	strd	r4, r3, [r7, #16]
		  display.drawBitmap(12,0, youWin,100,32,WHITE);
   d5116:	2320      	movs	r3, #32
   d5118:	2701      	movs	r7, #1
   d511a:	e9cd 3701 	strd	r3, r7, [sp, #4]
   d511e:	2364      	movs	r3, #100	; 0x64
   d5120:	4622      	mov	r2, r4
   d5122:	210c      	movs	r1, #12
   d5124:	483c      	ldr	r0, [pc, #240]	; (d5218 <loop+0x464>)
   d5126:	9300      	str	r3, [sp, #0]
   d5128:	4b40      	ldr	r3, [pc, #256]	; (d522c <loop+0x478>)
   d512a:	f000 fa19 	bl	d5560 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
		display.display();
   d512e:	483a      	ldr	r0, [pc, #232]	; (d5218 <loop+0x464>)
   d5130:	f001 f980 	bl	d6434 <_ZN16Adafruit_SSD13067displayEv>
    analogWrite(red, 255); //red
   d5134:	21ff      	movs	r1, #255	; 0xff
   d5136:	2006      	movs	r0, #6
   d5138:	f002 ff5e 	bl	d7ff8 <_Z11analogWritetm>
    analogWrite(green, 0);
   d513c:	4621      	mov	r1, r4
   d513e:	2007      	movs	r0, #7
   d5140:	f002 ff5a 	bl	d7ff8 <_Z11analogWritetm>
    analogWrite(blue, 0);
   d5144:	4621      	mov	r1, r4
   d5146:	2012      	movs	r0, #18
   d5148:	f002 ff56 	bl	d7ff8 <_Z11analogWritetm>
    delay(700);
   d514c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d5150:	f002 f854 	bl	d71fc <delay>
    analogWrite(red, 0); //green
   d5154:	4621      	mov	r1, r4
   d5156:	2006      	movs	r0, #6
   d5158:	f002 ff4e 	bl	d7ff8 <_Z11analogWritetm>
    analogWrite(green, 255);
   d515c:	21ff      	movs	r1, #255	; 0xff
   d515e:	2007      	movs	r0, #7
   d5160:	f002 ff4a 	bl	d7ff8 <_Z11analogWritetm>
    delay(700);
   d5164:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d5168:	f002 f848 	bl	d71fc <delay>
    analogWrite(green, 0);
   d516c:	4621      	mov	r1, r4
   d516e:	2007      	movs	r0, #7
   d5170:	f002 ff42 	bl	d7ff8 <_Z11analogWritetm>
    analogWrite(blue, 255); //blue
   d5174:	21ff      	movs	r1, #255	; 0xff
   d5176:	2012      	movs	r0, #18
   d5178:	f002 ff3e 	bl	d7ff8 <_Z11analogWritetm>
    delay(700);
   d517c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d5180:	f002 f83c 	bl	d71fc <delay>
    analogWrite(red, 255);
   d5184:	21ff      	movs	r1, #255	; 0xff
   d5186:	2006      	movs	r0, #6
   d5188:	f002 ff36 	bl	d7ff8 <_Z11analogWritetm>
    analogWrite(green, 20);
   d518c:	2114      	movs	r1, #20
   d518e:	2007      	movs	r0, #7
   d5190:	f002 ff32 	bl	d7ff8 <_Z11analogWritetm>
    analogWrite(blue, 0); //yellow
   d5194:	4621      	mov	r1, r4
   d5196:	2012      	movs	r0, #18
   d5198:	f002 ff2e 	bl	d7ff8 <_Z11analogWritetm>
    delay(700);
   d519c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d51a0:	f002 f82c 	bl	d71fc <delay>
    analogWrite(green, 150); //orange
   d51a4:	2196      	movs	r1, #150	; 0x96
   d51a6:	2007      	movs	r0, #7
   d51a8:	f002 ff26 	bl	d7ff8 <_Z11analogWritetm>
    delay(700);
   d51ac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d51b0:	f002 f824 	bl	d71fc <delay>
    analogWrite(green, 0);
   d51b4:	4621      	mov	r1, r4
   d51b6:	2007      	movs	r0, #7
   d51b8:	f002 ff1e 	bl	d7ff8 <_Z11analogWritetm>
    analogWrite(blue, 255); //purple
   d51bc:	21ff      	movs	r1, #255	; 0xff
   d51be:	2012      	movs	r0, #18
   d51c0:	f002 ff1a 	bl	d7ff8 <_Z11analogWritetm>
    delay(700);
   d51c4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d51c8:	f002 f818 	bl	d71fc <delay>
    analogWrite(red, 0);
   d51cc:	4621      	mov	r1, r4
   d51ce:	2006      	movs	r0, #6
   d51d0:	f002 ff12 	bl	d7ff8 <_Z11analogWritetm>
    analogWrite(green, 255); //cyan
   d51d4:	21ff      	movs	r1, #255	; 0xff
   d51d6:	2007      	movs	r0, #7
   d51d8:	f002 ff0e 	bl	d7ff8 <_Z11analogWritetm>
    delay(700);
   d51dc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   d51e0:	f002 f80c 	bl	d71fc <delay>
    analogWrite(red, 0); //red
   d51e4:	4621      	mov	r1, r4
   d51e6:	2006      	movs	r0, #6
   d51e8:	f002 ff06 	bl	d7ff8 <_Z11analogWritetm>
    analogWrite(green, 0);
   d51ec:	4621      	mov	r1, r4
   d51ee:	2007      	movs	r0, #7
   d51f0:	f002 ff02 	bl	d7ff8 <_Z11analogWritetm>
    analogWrite(blue, 0);
   d51f4:	4621      	mov	r1, r4
   d51f6:	2012      	movs	r0, #18
   d51f8:	f002 fefe 	bl	d7ff8 <_Z11analogWritetm>
    x = 10;
   d51fc:	230a      	movs	r3, #10
    newGame = false;
   d51fe:	f88b 4000 	strb.w	r4, [fp]
    chooseGame = true;
   d5202:	f88a 7000 	strb.w	r7, [sl]
    x = 10;
   d5206:	602b      	str	r3, [r5, #0]
    y = 10;
   d5208:	6033      	str	r3, [r6, #0]
    movingX = 0;
   d520a:	f8c9 4000 	str.w	r4, [r9]
    movingY = 0;
   d520e:	f8c8 4000 	str.w	r4, [r8]
   d5212:	b007      	add	sp, #28
   d5214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5218:	2003e5cc 	.word	0x2003e5cc
   d521c:	2003e640 	.word	0x2003e640
   d5220:	000d86b3 	.word	0x000d86b3
   d5224:	000d87f3 	.word	0x000d87f3
   d5228:	000d8913 	.word	0x000d8913
   d522c:	000d8ad3 	.word	0x000d8ad3

000d5230 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d5230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5234:	b085      	sub	sp, #20
   d5236:	461f      	mov	r7, r3
   d5238:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d523c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5240:	eba8 0902 	sub.w	r9, r8, r2
   d5244:	eba7 0a01 	sub.w	sl, r7, r1
   d5248:	f1b9 0f00 	cmp.w	r9, #0
   d524c:	bfb8      	it	lt
   d524e:	f1c9 0900 	rsblt	r9, r9, #0
   d5252:	f1ba 0f00 	cmp.w	sl, #0
   d5256:	bfb8      	it	lt
   d5258:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d525c:	45d1      	cmp	r9, sl
        uint16_t color) {
   d525e:	4683      	mov	fp, r0
   d5260:	460c      	mov	r4, r1
   d5262:	4615      	mov	r5, r2
    if (steep) {
   d5264:	dd04      	ble.n	d5270 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d5266:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d5268:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d526a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d526c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d526e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d5270:	42bc      	cmp	r4, r7
   d5272:	dd05      	ble.n	d5280 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d5274:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d5276:	4645      	mov	r5, r8
   d5278:	4690      	mov	r8, r2
    if (x0 > x1) {
   d527a:	4622      	mov	r2, r4
   d527c:	463c      	mov	r4, r7
   d527e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d5280:	1b3e      	subs	r6, r7, r4
   d5282:	b2b2      	uxth	r2, r6
   d5284:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d5286:	eba8 0205 	sub.w	r2, r8, r5
   d528a:	2a00      	cmp	r2, #0
   d528c:	bfb8      	it	lt
   d528e:	4252      	neglt	r2, r2
   d5290:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d5292:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d5296:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d529a:	4545      	cmp	r5, r8
   d529c:	bfb4      	ite	lt
   d529e:	2201      	movlt	r2, #1
   d52a0:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d52a4:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d52a6:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d52a8:	42bc      	cmp	r4, r7
   d52aa:	dc1c      	bgt.n	d52e6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d52ac:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d52b0:	9303      	str	r3, [sp, #12]
        if (steep) {
   d52b2:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d52b4:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d52b8:	bfc7      	ittee	gt
   d52ba:	4629      	movgt	r1, r5
   d52bc:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d52be:	462a      	movle	r2, r5
   d52c0:	4621      	movle	r1, r4
   d52c2:	4658      	mov	r0, fp
   d52c4:	47c0      	blx	r8
        }
        err -= dy;
   d52c6:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d52c8:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d52ca:	1ab6      	subs	r6, r6, r2
   d52cc:	b2b1      	uxth	r1, r6
   d52ce:	b236      	sxth	r6, r6
        if (err < 0) {
   d52d0:	2e00      	cmp	r6, #0
   d52d2:	da05      	bge.n	d52e0 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d52d4:	9a02      	ldr	r2, [sp, #8]
   d52d6:	4415      	add	r5, r2
            err += dx;
   d52d8:	9a00      	ldr	r2, [sp, #0]
   d52da:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d52dc:	b22d      	sxth	r5, r5
            err += dx;
   d52de:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d52e0:	3401      	adds	r4, #1
   d52e2:	b224      	sxth	r4, r4
   d52e4:	e7e0      	b.n	d52a8 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d52e6:	b005      	add	sp, #20
   d52e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d52ec <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d52ec:	4770      	bx	lr

000d52ee <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d52ee:	b410      	push	{r4}
    drawPixel(x, y, color);
   d52f0:	6804      	ldr	r4, [r0, #0]
   d52f2:	6924      	ldr	r4, [r4, #16]
   d52f4:	46a4      	mov	ip, r4
}
   d52f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d52fa:	4760      	bx	ip

000d52fc <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d52fc:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d52fe:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d5300:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d5304:	9502      	str	r5, [sp, #8]
   d5306:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d5308:	46a4      	mov	ip, r4
}
   d530a:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d530c:	4760      	bx	ip

000d530e <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d530e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d5310:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d5312:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d5316:	9502      	str	r5, [sp, #8]
   d5318:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d531a:	46a4      	mov	ip, r4
}
   d531c:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d531e:	4760      	bx	ip

000d5320 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5320:	b470      	push	{r4, r5, r6}
   d5322:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d5326:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d532a:	6804      	ldr	r4, [r0, #0]
   d532c:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d5330:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d5332:	46a4      	mov	ip, r4
}
   d5334:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d5336:	4760      	bx	ip

000d5338 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d5338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d533c:	461c      	mov	r4, r3
    startWrite();
   d533e:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d5340:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d5344:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d5346:	4605      	mov	r5, r0
   d5348:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d534a:	3c01      	subs	r4, #1
   d534c:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d534e:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d5350:	b224      	sxth	r4, r4
    startWrite();
   d5352:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d5354:	682b      	ldr	r3, [r5, #0]
   d5356:	f8cd 8004 	str.w	r8, [sp, #4]
   d535a:	9400      	str	r4, [sp, #0]
   d535c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d535e:	4628      	mov	r0, r5
   d5360:	463b      	mov	r3, r7
   d5362:	4632      	mov	r2, r6
   d5364:	4639      	mov	r1, r7
   d5366:	47a0      	blx	r4
    endWrite();
   d5368:	682b      	ldr	r3, [r5, #0]
   d536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d536c:	4628      	mov	r0, r5
}
   d536e:	b002      	add	sp, #8
   d5370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d5374:	4718      	bx	r3

000d5376 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d5376:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d537a:	461d      	mov	r5, r3
    startWrite();
   d537c:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d537e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d5382:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d5384:	4604      	mov	r4, r0
   d5386:	4617      	mov	r7, r2
   d5388:	460e      	mov	r6, r1
    startWrite();
   d538a:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d538c:	e9cd 7800 	strd	r7, r8, [sp]
   d5390:	6822      	ldr	r2, [r4, #0]
   d5392:	1e6b      	subs	r3, r5, #1
   d5394:	4433      	add	r3, r6
   d5396:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d5398:	4620      	mov	r0, r4
   d539a:	b21b      	sxth	r3, r3
   d539c:	463a      	mov	r2, r7
   d539e:	4631      	mov	r1, r6
   d53a0:	47a8      	blx	r5
    endWrite();
   d53a2:	6823      	ldr	r3, [r4, #0]
   d53a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53a6:	4620      	mov	r0, r4
}
   d53a8:	b002      	add	sp, #8
   d53aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d53ae:	4718      	bx	r3

000d53b0 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d53b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d53b4:	461e      	mov	r6, r3
    startWrite();
   d53b6:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d53b8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d53bc:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d53be:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d53c2:	460c      	mov	r4, r1
   d53c4:	4605      	mov	r5, r0
   d53c6:	4617      	mov	r7, r2
    startWrite();
   d53c8:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d53ca:	4426      	add	r6, r4
   d53cc:	42b4      	cmp	r4, r6
   d53ce:	682b      	ldr	r3, [r5, #0]
   d53d0:	da0b      	bge.n	d53ea <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d53d2:	f8cd 8000 	str.w	r8, [sp]
   d53d6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d53da:	4621      	mov	r1, r4
   d53dc:	464b      	mov	r3, r9
   d53de:	463a      	mov	r2, r7
   d53e0:	4628      	mov	r0, r5
   d53e2:	3401      	adds	r4, #1
   d53e4:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d53e6:	b224      	sxth	r4, r4
   d53e8:	e7f0      	b.n	d53cc <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d53ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d53ec:	4628      	mov	r0, r5
}
   d53ee:	b002      	add	sp, #8
   d53f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d53f4:	4718      	bx	r3

000d53f6 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d53f6:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d53f8:	6802      	ldr	r2, [r0, #0]
   d53fa:	9101      	str	r1, [sp, #4]
   d53fc:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5400:	9100      	str	r1, [sp, #0]
   d5402:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d5404:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5408:	2200      	movs	r2, #0
   d540a:	4611      	mov	r1, r2
   d540c:	47a0      	blx	r4
}
   d540e:	b002      	add	sp, #8
   d5410:	bd10      	pop	{r4, pc}

000d5412 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d5412:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5416:	461d      	mov	r5, r3
    startWrite();
   d5418:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d541a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d541e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d5420:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d5424:	4604      	mov	r4, r0
   d5426:	460f      	mov	r7, r1
   d5428:	4616      	mov	r6, r2
    startWrite();
   d542a:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d542c:	6823      	ldr	r3, [r4, #0]
   d542e:	f8cd 8000 	str.w	r8, [sp]
   d5432:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d5436:	4632      	mov	r2, r6
   d5438:	462b      	mov	r3, r5
   d543a:	4639      	mov	r1, r7
   d543c:	4620      	mov	r0, r4
   d543e:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d5440:	6823      	ldr	r3, [r4, #0]
   d5442:	f8cd 8000 	str.w	r8, [sp]
   d5446:	f109 32ff 	add.w	r2, r9, #4294967295
   d544a:	4432      	add	r2, r6
   d544c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d5450:	4639      	mov	r1, r7
   d5452:	462b      	mov	r3, r5
   d5454:	4620      	mov	r0, r4
   d5456:	b212      	sxth	r2, r2
   d5458:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d545a:	6823      	ldr	r3, [r4, #0]
   d545c:	f8cd 8000 	str.w	r8, [sp]
   d5460:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d5464:	4632      	mov	r2, r6
   d5466:	464b      	mov	r3, r9
   d5468:	4639      	mov	r1, r7
   d546a:	4620      	mov	r0, r4
   d546c:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d546e:	1e6b      	subs	r3, r5, #1
   d5470:	19d9      	adds	r1, r3, r7
   d5472:	6823      	ldr	r3, [r4, #0]
   d5474:	f8cd 8000 	str.w	r8, [sp]
   d5478:	6a1d      	ldr	r5, [r3, #32]
   d547a:	4620      	mov	r0, r4
   d547c:	464b      	mov	r3, r9
   d547e:	4632      	mov	r2, r6
   d5480:	b209      	sxth	r1, r1
   d5482:	47a8      	blx	r5
    endWrite();
   d5484:	6823      	ldr	r3, [r4, #0]
   d5486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5488:	4620      	mov	r0, r4
}
   d548a:	b002      	add	sp, #8
   d548c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d5490:	4718      	bx	r3

000d5492 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d5492:	4770      	bx	lr

000d5494 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d5494:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d5498:	4299      	cmp	r1, r3
        uint16_t color) {
   d549a:	4616      	mov	r6, r2
   d549c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d54a0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d54a4:	6802      	ldr	r2, [r0, #0]
   d54a6:	4680      	mov	r8, r0
   d54a8:	460d      	mov	r5, r1
   d54aa:	461c      	mov	r4, r3
    if(x0 == x1){
   d54ac:	d113      	bne.n	d54d6 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d54ae:	42be      	cmp	r6, r7
   d54b0:	bfc8      	it	gt
   d54b2:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d54b4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d54b8:	bfc4      	itt	gt
   d54ba:	463e      	movgt	r6, r7
   d54bc:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d54be:	1c7b      	adds	r3, r7, #1
   d54c0:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d54c2:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d54c4:	b21b      	sxth	r3, r3
   d54c6:	4632      	mov	r2, r6
   d54c8:	4629      	mov	r1, r5
   d54ca:	4640      	mov	r0, r8
   d54cc:	46a4      	mov	ip, r4
}
   d54ce:	b003      	add	sp, #12
   d54d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d54d4:	4760      	bx	ip
    } else if(y0 == y1){
   d54d6:	42be      	cmp	r6, r7
   d54d8:	d10a      	bne.n	d54f0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d54da:	4299      	cmp	r1, r3
   d54dc:	bfc2      	ittt	gt
   d54de:	460b      	movgt	r3, r1
   d54e0:	4625      	movgt	r5, r4
   d54e2:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d54e4:	1c63      	adds	r3, r4, #1
   d54e6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d54ea:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d54ec:	1b5b      	subs	r3, r3, r5
   d54ee:	e7e9      	b.n	d54c4 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d54f0:	6953      	ldr	r3, [r2, #20]
   d54f2:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d54f4:	e9cd 7900 	strd	r7, r9, [sp]
   d54f8:	f8d8 3000 	ldr.w	r3, [r8]
   d54fc:	4640      	mov	r0, r8
   d54fe:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5500:	4632      	mov	r2, r6
   d5502:	4623      	mov	r3, r4
   d5504:	4629      	mov	r1, r5
   d5506:	47b8      	blx	r7
        endWrite();
   d5508:	f8d8 3000 	ldr.w	r3, [r8]
   d550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d550e:	4640      	mov	r0, r8
}
   d5510:	b003      	add	sp, #12
   d5512:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d5516:	4718      	bx	r3

000d5518 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d5518:	f001 0303 	and.w	r3, r1, #3
   d551c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d5520:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d5522:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d5524:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5528:	bf59      	ittee	pl
   d552a:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d552c:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d552e:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d5530:	81c3      	strhmi	r3, [r0, #14]
}
   d5532:	4770      	bx	lr

000d5534 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5534:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d5536:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d5538:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d553a:	4a07      	ldr	r2, [pc, #28]	; (d5558 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d553c:	4d07      	ldr	r5, [pc, #28]	; (d555c <_ZN12Adafruit_GFXC1Ess+0x28>)
   d553e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d5540:	2400      	movs	r4, #0
    _width    = WIDTH;
   d5542:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d5544:	f04f 31ff 	mov.w	r1, #4294967295
   d5548:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d554c:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d554e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d5550:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d5552:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d5554:	6204      	str	r4, [r0, #32]
}
   d5556:	bd30      	pop	{r4, r5, pc}
   d5558:	01000101 	.word	0x01000101
   d555c:	000d931c 	.word	0x000d931c

000d5560 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5564:	b089      	sub	sp, #36	; 0x24
   d5566:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d556a:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d556c:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d5570:	9304      	str	r3, [sp, #16]
   d5572:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d5576:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d5578:	9305      	str	r3, [sp, #20]
   d557a:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d557e:	4604      	mov	r4, r0
    startWrite();
   d5580:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d5582:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d5586:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d558a:	bf48      	it	mi
   d558c:	f108 020e 	addmi.w	r2, r8, #14
   d5590:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d5594:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d5596:	4635      	mov	r5, r6
   d5598:	9b03      	ldr	r3, [sp, #12]
   d559a:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d559c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d55a0:	189a      	adds	r2, r3, r2
   d55a2:	9b05      	ldr	r3, [sp, #20]
   d55a4:	428b      	cmp	r3, r1
   d55a6:	b212      	sxth	r2, r2
   d55a8:	dd27      	ble.n	d55fa <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d55aa:	9b04      	ldr	r3, [sp, #16]
   d55ac:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d55ae:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d55b2:	9306      	str	r3, [sp, #24]
   d55b4:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d55b8:	4580      	cmp	r8, r0
   d55ba:	fa1f f189 	uxth.w	r1, r9
   d55be:	dd17      	ble.n	d55f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d55c0:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d55c2:	bf05      	ittet	eq
   d55c4:	9b06      	ldreq	r3, [sp, #24]
   d55c6:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d55c8:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d55ca:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d55cc:	bf18      	it	ne
   d55ce:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d55d0:	062b      	lsls	r3, r5, #24
   d55d2:	d50a      	bpl.n	d55ea <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d55d4:	9b02      	ldr	r3, [sp, #8]
   d55d6:	6820      	ldr	r0, [r4, #0]
   d55d8:	9207      	str	r2, [sp, #28]
   d55da:	4419      	add	r1, r3
   d55dc:	6983      	ldr	r3, [r0, #24]
   d55de:	b209      	sxth	r1, r1
   d55e0:	461f      	mov	r7, r3
   d55e2:	4620      	mov	r0, r4
   d55e4:	4653      	mov	r3, sl
   d55e6:	47b8      	blx	r7
   d55e8:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d55ea:	f109 0901 	add.w	r9, r9, #1
   d55ee:	e7e1      	b.n	d55b4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d55f0:	9b01      	ldr	r3, [sp, #4]
   d55f2:	3301      	adds	r3, #1
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	445e      	add	r6, fp
   d55f8:	e7ce      	b.n	d5598 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d55fa:	6823      	ldr	r3, [r4, #0]
   d55fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55fe:	4620      	mov	r0, r4
}
   d5600:	b009      	add	sp, #36	; 0x24
   d5602:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d5606:	4718      	bx	r3

000d5608 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d5608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d560c:	ed2d 8b02 	vpush	{d8}
   d5610:	b091      	sub	sp, #68	; 0x44
   d5612:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d5614:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d5616:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d561a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d561e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d5622:	9103      	str	r1, [sp, #12]
   d5624:	461f      	mov	r7, r3
   d5626:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d562a:	9304      	str	r3, [sp, #16]
   d562c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d562e:	2a00      	cmp	r2, #0
   d5630:	f040 80c5 	bne.w	d57be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d5634:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5638:	428b      	cmp	r3, r1
   d563a:	f340 814c 	ble.w	d58d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d563e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d5642:	42b3      	cmp	r3, r6
   d5644:	f340 8147 	ble.w	d58d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d5648:	2306      	movs	r3, #6
   d564a:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d564e:	2b00      	cmp	r3, #0
   d5650:	f340 8141 	ble.w	d58d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d5654:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d5658:	2b00      	cmp	r3, #0
   d565a:	f340 813c 	ble.w	d58d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d565e:	7f03      	ldrb	r3, [r0, #28]
   d5660:	b91b      	cbnz	r3, d566a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d5662:	2faf      	cmp	r7, #175	; 0xaf
   d5664:	bf84      	itt	hi
   d5666:	3701      	addhi	r7, #1
   d5668:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d566a:	f8db 3000 	ldr.w	r3, [fp]
   d566e:	4658      	mov	r0, fp
   d5670:	695b      	ldr	r3, [r3, #20]
   d5672:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5674:	2205      	movs	r2, #5
   d5676:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5678:	2200      	movs	r2, #0
   d567a:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d567c:	4a98      	ldr	r2, [pc, #608]	; (d58e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d567e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d5682:	18d3      	adds	r3, r2, r3
   d5684:	930c      	str	r3, [sp, #48]	; 0x30
   d5686:	b2b3      	uxth	r3, r6
   d5688:	9306      	str	r3, [sp, #24]
   d568a:	9a05      	ldr	r2, [sp, #20]
   d568c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d568e:	5c9b      	ldrb	r3, [r3, r2]
   d5690:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d5692:	b2ab      	uxth	r3, r5
   d5694:	930b      	str	r3, [sp, #44]	; 0x2c
   d5696:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d569a:	9308      	str	r3, [sp, #32]
   d569c:	9b03      	ldr	r3, [sp, #12]
   d569e:	fb02 f905 	mul.w	r9, r2, r5
   d56a2:	fa19 f983 	uxtah	r9, r9, r3
   d56a6:	fa0f f389 	sxth.w	r3, r9
   d56aa:	ee08 3a10 	vmov	s16, r3
   d56ae:	2308      	movs	r3, #8
   d56b0:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d56b2:	9b03      	ldr	r3, [sp, #12]
   d56b4:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d56b8:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d56bc:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d56c0:	9a07      	ldr	r2, [sp, #28]
   d56c2:	f8db 3000 	ldr.w	r3, [fp]
   d56c6:	07d2      	lsls	r2, r2, #31
   d56c8:	d552      	bpl.n	d5770 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d56ca:	2d01      	cmp	r5, #1
   d56cc:	fa1f f289 	uxth.w	r2, r9
   d56d0:	d13e      	bne.n	d5750 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d56d2:	2c01      	cmp	r4, #1
   d56d4:	d13c      	bne.n	d5750 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d56d6:	699b      	ldr	r3, [r3, #24]
   d56d8:	9906      	ldr	r1, [sp, #24]
   d56da:	461f      	mov	r7, r3
   d56dc:	9b04      	ldr	r3, [sp, #16]
   d56de:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d56e0:	b212      	sxth	r2, r2
   d56e2:	4651      	mov	r1, sl
   d56e4:	4658      	mov	r0, fp
   d56e6:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d56e8:	f109 0301 	add.w	r3, r9, #1
   d56ec:	fa4f f983 	sxtb.w	r9, r3
   d56f0:	9b07      	ldr	r3, [sp, #28]
   d56f2:	085b      	lsrs	r3, r3, #1
   d56f4:	9307      	str	r3, [sp, #28]
   d56f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d56f8:	3b01      	subs	r3, #1
   d56fa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d56fe:	930a      	str	r3, [sp, #40]	; 0x28
   d5700:	d1de      	bne.n	d56c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d5702:	9f05      	ldr	r7, [sp, #20]
   d5704:	3701      	adds	r7, #1
   d5706:	b27b      	sxtb	r3, r7
   d5708:	9305      	str	r3, [sp, #20]
   d570a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d570c:	3b01      	subs	r3, #1
   d570e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5712:	9309      	str	r3, [sp, #36]	; 0x24
   d5714:	d1b9      	bne.n	d568a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d5716:	9b04      	ldr	r3, [sp, #16]
   d5718:	4543      	cmp	r3, r8
   d571a:	d00f      	beq.n	d573c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d571c:	2d01      	cmp	r5, #1
   d571e:	f8db 3000 	ldr.w	r3, [fp]
   d5722:	d13b      	bne.n	d579c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5724:	2c01      	cmp	r4, #1
   d5726:	d139      	bne.n	d579c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d5728:	9908      	ldr	r1, [sp, #32]
   d572a:	f8cd 8000 	str.w	r8, [sp]
   d572e:	3105      	adds	r1, #5
   d5730:	6a1c      	ldr	r4, [r3, #32]
   d5732:	4632      	mov	r2, r6
   d5734:	2308      	movs	r3, #8
   d5736:	b209      	sxth	r1, r1
   d5738:	4658      	mov	r0, fp
   d573a:	47a0      	blx	r4
        endWrite();
   d573c:	f8db 3000 	ldr.w	r3, [fp]
   d5740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5742:	4658      	mov	r0, fp
}
   d5744:	b011      	add	sp, #68	; 0x44
   d5746:	ecbd 8b02 	vpop	{d8}
   d574a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d574e:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d5750:	9906      	ldr	r1, [sp, #24]
   d5752:	fb14 f202 	smulbb	r2, r4, r2
   d5756:	440a      	add	r2, r1
   d5758:	9904      	ldr	r1, [sp, #16]
   d575a:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d575c:	9400      	str	r4, [sp, #0]
   d575e:	69db      	ldr	r3, [r3, #28]
   d5760:	ee18 1a10 	vmov	r1, s16
   d5764:	461f      	mov	r7, r3
   d5766:	b212      	sxth	r2, r2
   d5768:	462b      	mov	r3, r5
   d576a:	4658      	mov	r0, fp
   d576c:	47b8      	blx	r7
   d576e:	e7bb      	b.n	d56e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d5770:	9a04      	ldr	r2, [sp, #16]
   d5772:	4542      	cmp	r2, r8
   d5774:	d0b8      	beq.n	d56e8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d5776:	2d01      	cmp	r5, #1
   d5778:	fa1f f289 	uxth.w	r2, r9
   d577c:	d107      	bne.n	d578e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d577e:	2c01      	cmp	r4, #1
   d5780:	d105      	bne.n	d578e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d5782:	699b      	ldr	r3, [r3, #24]
   d5784:	9906      	ldr	r1, [sp, #24]
   d5786:	461f      	mov	r7, r3
   d5788:	440a      	add	r2, r1
   d578a:	4643      	mov	r3, r8
   d578c:	e7a8      	b.n	d56e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d578e:	9906      	ldr	r1, [sp, #24]
   d5790:	f8cd 8004 	str.w	r8, [sp, #4]
   d5794:	fb14 f202 	smulbb	r2, r4, r2
   d5798:	440a      	add	r2, r1
   d579a:	e7df      	b.n	d575c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d579c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d579e:	f8cd 8004 	str.w	r8, [sp, #4]
   d57a2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d57a6:	9a08      	ldr	r2, [sp, #32]
   d57a8:	00e4      	lsls	r4, r4, #3
   d57aa:	440a      	add	r2, r1
   d57ac:	4611      	mov	r1, r2
   d57ae:	9400      	str	r4, [sp, #0]
   d57b0:	69dc      	ldr	r4, [r3, #28]
   d57b2:	4632      	mov	r2, r6
   d57b4:	462b      	mov	r3, r5
   d57b6:	b209      	sxth	r1, r1
   d57b8:	4658      	mov	r0, fp
   d57ba:	47a0      	blx	r4
        endWrite();
   d57bc:	e7be      	b.n	d573c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d57be:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d57c0:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d57c2:	6812      	ldr	r2, [r2, #0]
   d57c4:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d57c6:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d57c8:	b2ff      	uxtb	r7, r7
   d57ca:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d57ce:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d57d2:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d57d4:	789a      	ldrb	r2, [r3, #2]
   d57d6:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d57d8:	78da      	ldrb	r2, [r3, #3]
   d57da:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d57dc:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d57de:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d57e2:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d57e6:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d57e8:	d801      	bhi.n	d57ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d57ea:	2c01      	cmp	r4, #1
   d57ec:	d957      	bls.n	d589e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d57ee:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d57f2:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d57f4:	fa0f f38a 	sxth.w	r3, sl
   d57f8:	9307      	str	r3, [sp, #28]
        startWrite();
   d57fa:	f8db 3000 	ldr.w	r3, [fp]
   d57fe:	4658      	mov	r0, fp
   d5800:	695b      	ldr	r3, [r3, #20]
   d5802:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5804:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5806:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d580a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d580c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d5810:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d5812:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5814:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d5816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5818:	429f      	cmp	r7, r3
   d581a:	d28f      	bcs.n	d573c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d581c:	9b07      	ldr	r3, [sp, #28]
   d581e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d5820:	443b      	add	r3, r7
   d5822:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d5826:	2200      	movs	r2, #0
   d5828:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d582a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d582c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d582e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d5832:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5836:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d583a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d583c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d583e:	9905      	ldr	r1, [sp, #20]
   d5840:	4291      	cmp	r1, r2
   d5842:	d241      	bcs.n	d58c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d5844:	1c5a      	adds	r2, r3, #1
   d5846:	b2d2      	uxtb	r2, r2
   d5848:	075b      	lsls	r3, r3, #29
   d584a:	920c      	str	r2, [sp, #48]	; 0x30
   d584c:	d107      	bne.n	d585e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d584e:	9b06      	ldr	r3, [sp, #24]
   d5850:	9906      	ldr	r1, [sp, #24]
   d5852:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d5854:	3301      	adds	r3, #1
   d5856:	b29b      	uxth	r3, r3
   d5858:	f812 9001 	ldrb.w	r9, [r2, r1]
   d585c:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d585e:	f019 0f80 	tst.w	r9, #128	; 0x80
   d5862:	d012      	beq.n	d588a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d5864:	2d01      	cmp	r5, #1
   d5866:	f8db 3000 	ldr.w	r3, [fp]
   d586a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d586e:	d11a      	bne.n	d58a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d5870:	2c01      	cmp	r4, #1
   d5872:	d118      	bne.n	d58a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d5876:	699b      	ldr	r3, [r3, #24]
   d5878:	4411      	add	r1, r2
   d587a:	9a05      	ldr	r2, [sp, #20]
   d587c:	4411      	add	r1, r2
   d587e:	461e      	mov	r6, r3
   d5880:	4652      	mov	r2, sl
   d5882:	9b04      	ldr	r3, [sp, #16]
   d5884:	b209      	sxth	r1, r1
   d5886:	4658      	mov	r0, fp
   d5888:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d588a:	9e05      	ldr	r6, [sp, #20]
   d588c:	3601      	adds	r6, #1
   d588e:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d5890:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d5894:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d5896:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d589a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d589c:	e7ce      	b.n	d583c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d589e:	2300      	movs	r3, #0
   d58a0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d58a4:	e7a9      	b.n	d57fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d58a6:	9805      	ldr	r0, [sp, #20]
   d58a8:	9a08      	ldr	r2, [sp, #32]
   d58aa:	4402      	add	r2, r0
   d58ac:	fb02 1105 	mla	r1, r2, r5, r1
   d58b0:	9a04      	ldr	r2, [sp, #16]
   d58b2:	e9cd 4200 	strd	r4, r2, [sp]
   d58b6:	69db      	ldr	r3, [r3, #28]
   d58b8:	ee18 2a10 	vmov	r2, s16
   d58bc:	461e      	mov	r6, r3
   d58be:	b209      	sxth	r1, r1
   d58c0:	462b      	mov	r3, r5
   d58c2:	4658      	mov	r0, fp
   d58c4:	47b0      	blx	r6
   d58c6:	e7e0      	b.n	d588a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d58c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d58ca:	3701      	adds	r7, #1
   d58cc:	4498      	add	r8, r3
   d58ce:	fa5f f888 	uxtb.w	r8, r8
   d58d2:	b2ff      	uxtb	r7, r7
   d58d4:	e79f      	b.n	d5816 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d58d6:	b011      	add	sp, #68	; 0x44
   d58d8:	ecbd 8b02 	vpop	{d8}
   d58dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d58e0:	000d8e13 	.word	0x000d8e13

000d58e4 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d58e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d58e6:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d58e8:	b085      	sub	sp, #20
   d58ea:	4604      	mov	r4, r0
   d58ec:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d58ee:	2a00      	cmp	r2, #0
   d58f0:	d134      	bne.n	d595c <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d58f2:	290a      	cmp	r1, #10
   d58f4:	d108      	bne.n	d5908 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d58f6:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d58f8:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d58fa:	7e42      	ldrb	r2, [r0, #25]
   d58fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d5900:	8263      	strh	r3, [r4, #18]
}
   d5902:	2001      	movs	r0, #1
   d5904:	b005      	add	sp, #20
   d5906:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d5908:	290d      	cmp	r1, #13
   d590a:	d0fa      	beq.n	d5902 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d590c:	7ee1      	ldrb	r1, [r4, #27]
   d590e:	7e00      	ldrb	r0, [r0, #24]
   d5910:	7e65      	ldrb	r5, [r4, #25]
   d5912:	b171      	cbz	r1, d5932 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d5914:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d5918:	2106      	movs	r1, #6
   d591a:	fb11 6100 	smlabb	r1, r1, r0, r6
   d591e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d5922:	42b1      	cmp	r1, r6
   d5924:	bfc1      	itttt	gt
   d5926:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d592a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d592c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d5930:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d5932:	8ae2      	ldrh	r2, [r4, #22]
   d5934:	9201      	str	r2, [sp, #4]
   d5936:	8aa2      	ldrh	r2, [r4, #20]
   d5938:	9200      	str	r2, [sp, #0]
   d593a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d593e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5942:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5946:	4620      	mov	r0, r4
   d5948:	f7ff fe5e 	bl	d5608 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d594c:	7e23      	ldrb	r3, [r4, #24]
   d594e:	8a22      	ldrh	r2, [r4, #16]
   d5950:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d5954:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d5958:	8223      	strh	r3, [r4, #16]
   d595a:	e7d2      	b.n	d5902 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d595c:	290a      	cmp	r1, #10
   d595e:	d107      	bne.n	d5970 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d5960:	2300      	movs	r3, #0
   d5962:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5964:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d5966:	7e41      	ldrb	r1, [r0, #25]
   d5968:	8a42      	ldrh	r2, [r0, #18]
   d596a:	fb01 2303 	mla	r3, r1, r3, r2
   d596e:	e7c7      	b.n	d5900 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d5970:	290d      	cmp	r1, #13
   d5972:	d0c6      	beq.n	d5902 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d5974:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d5976:	42a9      	cmp	r1, r5
   d5978:	d3c3      	bcc.n	d5902 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d597a:	7a51      	ldrb	r1, [r2, #9]
   d597c:	4299      	cmp	r1, r3
   d597e:	d3c0      	bcc.n	d5902 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d5980:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d5982:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d5984:	b2ed      	uxtb	r5, r5
   d5986:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d598a:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d598c:	b32f      	cbz	r7, d59da <_ZN12Adafruit_GFX5writeEh+0xf6>
   d598e:	78e9      	ldrb	r1, [r5, #3]
   d5990:	b319      	cbz	r1, d59da <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d5992:	7ee1      	ldrb	r1, [r4, #27]
   d5994:	7e00      	ldrb	r0, [r0, #24]
   d5996:	7e66      	ldrb	r6, [r4, #25]
   d5998:	b191      	cbz	r1, d59c0 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d599a:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d599e:	4439      	add	r1, r7
   d59a0:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d59a4:	fb00 7101 	mla	r1, r0, r1, r7
   d59a8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d59ac:	42b9      	cmp	r1, r7
   d59ae:	dd07      	ble.n	d59c0 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d59b0:	2700      	movs	r7, #0
   d59b2:	8227      	strh	r7, [r4, #16]
   d59b4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d59b8:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d59ba:	fb02 1206 	mla	r2, r2, r6, r1
   d59be:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d59c0:	8ae2      	ldrh	r2, [r4, #22]
   d59c2:	9201      	str	r2, [sp, #4]
   d59c4:	8aa2      	ldrh	r2, [r4, #20]
   d59c6:	9200      	str	r2, [sp, #0]
   d59c8:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d59cc:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d59d0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d59d4:	4620      	mov	r0, r4
   d59d6:	f7ff fe17 	bl	d5608 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d59da:	7929      	ldrb	r1, [r5, #4]
   d59dc:	7e23      	ldrb	r3, [r4, #24]
   d59de:	8a22      	ldrh	r2, [r4, #16]
   d59e0:	fb01 2303 	mla	r3, r1, r3, r2
   d59e4:	e7b8      	b.n	d5958 <_ZN12Adafruit_GFX5writeEh+0x74>

000d59e6 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d59e6:	2901      	cmp	r1, #1
   d59e8:	bf38      	it	cc
   d59ea:	2101      	movcc	r1, #1
   d59ec:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d59ee:	7641      	strb	r1, [r0, #25]
}
   d59f0:	4770      	bx	lr
	...

000d59f4 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d59f4:	b510      	push	{r4, lr}
   d59f6:	4b06      	ldr	r3, [pc, #24]	; (d5a10 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d59f8:	6003      	str	r3, [r0, #0]
   d59fa:	4604      	mov	r4, r0
	if (mutex) {
   d59fc:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d59fe:	b108      	cbz	r0, d5a04 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d5a00:	f000 ff7c 	bl	d68fc <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d5a04:	4620      	mov	r0, r4
   d5a06:	f000 f8f7 	bl	d5bf8 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	bd10      	pop	{r4, pc}
   d5a0e:	bf00      	nop
   d5a10:	000d9374 	.word	0x000d9374

000d5a14 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d5a14:	b510      	push	{r4, lr}
   d5a16:	4604      	mov	r4, r0
}
   d5a18:	f7ff ffec 	bl	d59f4 <_ZN16OledWingAdafruitD1Ev>
   d5a1c:	4620      	mov	r0, r4
   d5a1e:	2170      	movs	r1, #112	; 0x70
   d5a20:	f002 fb55 	bl	d80ce <_ZdlPvj>
   d5a24:	4620      	mov	r0, r4
   d5a26:	bd10      	pop	{r4, pc}

000d5a28 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d5a28:	b530      	push	{r4, r5, lr}
   d5a2a:	b085      	sub	sp, #20
   d5a2c:	4604      	mov	r4, r0
   d5a2e:	460d      	mov	r5, r1
   d5a30:	f002 fb20 	bl	d8074 <_Z19__fetch_global_Wirev>
   d5a34:	4a10      	ldr	r2, [pc, #64]	; (d5a78 <_ZN16OledWingAdafruitC1Ei+0x50>)
   d5a36:	4911      	ldr	r1, [pc, #68]	; (d5a7c <_ZN16OledWingAdafruitC1Ei+0x54>)
   d5a38:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d5a3c:	f04f 32ff 	mov.w	r2, #4294967295
   d5a40:	2180      	movs	r1, #128	; 0x80
   d5a42:	4603      	mov	r3, r0
   d5a44:	9200      	str	r2, [sp, #0]
   d5a46:	4620      	mov	r0, r4
   d5a48:	2220      	movs	r2, #32
   d5a4a:	f000 f95b 	bl	d5d04 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d5a4e:	4b0c      	ldr	r3, [pc, #48]	; (d5a80 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d5a50:	6023      	str	r3, [r4, #0]
   d5a52:	2300      	movs	r3, #0
   d5a54:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d5a58:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d5a5c:	f000 f872 	bl	d5b44 <_ZN8DebounceC1Ev>
   d5a60:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5a64:	f000 f86e 	bl	d5b44 <_ZN8DebounceC1Ev>
   d5a68:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d5a6c:	f000 f86a 	bl	d5b44 <_ZN8DebounceC1Ev>
}
   d5a70:	4620      	mov	r0, r4
   d5a72:	b005      	add	sp, #20
   d5a74:	bd30      	pop	{r4, r5, pc}
   d5a76:	bf00      	nop
   d5a78:	00061a80 	.word	0x00061a80
   d5a7c:	000186a0 	.word	0x000186a0
   d5a80:	000d9374 	.word	0x000d9374

000d5a84 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d5a84:	b513      	push	{r0, r1, r4, lr}
   d5a86:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d5a88:	3050      	adds	r0, #80	; 0x50
   d5a8a:	f000 ff2f 	bl	d68ec <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d5a8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5a90:	07d9      	lsls	r1, r3, #31
   d5a92:	d505      	bpl.n	d5aa0 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d5a94:	2202      	movs	r2, #2
   d5a96:	2104      	movs	r1, #4
   d5a98:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d5a9c:	f000 f866 	bl	d5b6c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d5aa0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5aa2:	079a      	lsls	r2, r3, #30
   d5aa4:	d505      	bpl.n	d5ab2 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d5aa6:	2200      	movs	r2, #0
   d5aa8:	2103      	movs	r1, #3
   d5aaa:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5aae:	f000 f85d 	bl	d5b6c <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d5ab2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5ab4:	075b      	lsls	r3, r3, #29
   d5ab6:	d505      	bpl.n	d5ac4 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d5ab8:	2202      	movs	r2, #2
   d5aba:	4611      	mov	r1, r2
   d5abc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d5ac0:	f000 f854 	bl	d5b6c <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d5ac4:	2301      	movs	r3, #1
   d5ac6:	9300      	str	r3, [sp, #0]
   d5ac8:	223c      	movs	r2, #60	; 0x3c
   d5aca:	2102      	movs	r1, #2
   d5acc:	4620      	mov	r0, r4
   d5ace:	f000 fa19 	bl	d5f04 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d5ad2:	b002      	add	sp, #8
   d5ad4:	bd10      	pop	{r4, pc}

000d5ad6 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d5ad6:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d5ad8:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d5ada:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d5adc:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d5ade:	d502      	bpl.n	d5ae6 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d5ae0:	3058      	adds	r0, #88	; 0x58
   d5ae2:	f000 f850 	bl	d5b86 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d5ae6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5ae8:	079a      	lsls	r2, r3, #30
   d5aea:	d503      	bpl.n	d5af4 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d5aec:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d5af0:	f000 f849 	bl	d5b86 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d5af4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d5af6:	075b      	lsls	r3, r3, #29
   d5af8:	d505      	bpl.n	d5b06 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d5afa:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d5afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d5b02:	f000 b840 	b.w	d5b86 <_ZN8Debounce6updateEv>
}
   d5b06:	bd10      	pop	{r4, pc}

000d5b08 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d5b08:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   d5b0a:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d5b0c:	f013 0001 	ands.w	r0, r3, #1
   d5b10:	d003      	beq.n	d5b1a <_ZN16OledWingAdafruit8pressedAEv+0x12>
   d5b12:	f102 0058 	add.w	r0, r2, #88	; 0x58
   d5b16:	f000 b866 	b.w	d5be6 <_ZN8Debounce4fellEv>
}
   d5b1a:	4770      	bx	lr

000d5b1c <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   d5b1c:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   d5b1e:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   d5b20:	f013 0002 	ands.w	r0, r3, #2
   d5b24:	d003      	beq.n	d5b2e <_ZN16OledWingAdafruit8pressedBEv+0x12>
   d5b26:	f102 0060 	add.w	r0, r2, #96	; 0x60
   d5b2a:	f000 b85c 	b.w	d5be6 <_ZN8Debounce4fellEv>
}
   d5b2e:	4770      	bx	lr

000d5b30 <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   d5b30:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   d5b32:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   d5b34:	f013 0004 	ands.w	r0, r3, #4
   d5b38:	d003      	beq.n	d5b42 <_ZN16OledWingAdafruit8pressedCEv+0x12>
   d5b3a:	f102 0068 	add.w	r0, r2, #104	; 0x68
   d5b3e:	f000 b852 	b.w	d5be6 <_ZN8Debounce4fellEv>
}
   d5b42:	4770      	bx	lr

000d5b44 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d5b44:	2100      	movs	r1, #0
   d5b46:	220a      	movs	r2, #10
   d5b48:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d5b4c:	4770      	bx	lr

000d5b4e <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d5b4e:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d5b50:	b510      	push	{r4, lr}
   d5b52:	4604      	mov	r4, r0
    this->pin = pin;
   d5b54:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d5b56:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d5b58:	b288      	uxth	r0, r1
   d5b5a:	f002 fa23 	bl	d7fa4 <digitalRead>
   d5b5e:	b108      	cbz	r0, d5b64 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d5b60:	2303      	movs	r3, #3
   d5b62:	71a3      	strb	r3, [r4, #6]
   d5b64:	f000 feba 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d5b68:	6020      	str	r0, [r4, #0]
#endif
}
   d5b6a:	bd10      	pop	{r4, pc}

000d5b6c <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d5b6c:	b538      	push	{r3, r4, r5, lr}
   d5b6e:	460c      	mov	r4, r1
   d5b70:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d5b72:	4611      	mov	r1, r2
   d5b74:	b2a0      	uxth	r0, r4
   d5b76:	f002 f9eb 	bl	d7f50 <pinMode>
  
  this->attach(pin);
   d5b7a:	4621      	mov	r1, r4
   d5b7c:	4628      	mov	r0, r5
}
   d5b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d5b82:	f7ff bfe4 	b.w	d5b4e <_ZN8Debounce6attachEi>

000d5b86 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d5b86:	b538      	push	{r3, r4, r5, lr}
   d5b88:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d5b8a:	79c0      	ldrb	r0, [r0, #7]
   d5b8c:	f002 fa0a 	bl	d7fa4 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d5b90:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d5b92:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d5b94:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d5b98:	bf18      	it	ne
   d5b9a:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d5b9c:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d5ba0:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d5ba2:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d5ba4:	d00a      	beq.n	d5bbc <_ZN8Debounce6updateEv+0x36>
   d5ba6:	f000 fe99 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d5baa:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d5bac:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d5bae:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d5bb2:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d5bb4:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d5bb6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d5bba:	bd38      	pop	{r3, r4, r5, pc}
   d5bbc:	f000 fe8e 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d5bc0:	6823      	ldr	r3, [r4, #0]
   d5bc2:	1ac0      	subs	r0, r0, r3
   d5bc4:	88a3      	ldrh	r3, [r4, #4]
   d5bc6:	4298      	cmp	r0, r3
   d5bc8:	d3f4      	bcc.n	d5bb4 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d5bca:	79a3      	ldrb	r3, [r4, #6]
   d5bcc:	f003 0301 	and.w	r3, r3, #1
   d5bd0:	42ab      	cmp	r3, r5
   d5bd2:	d0ef      	beq.n	d5bb4 <_ZN8Debounce6updateEv+0x2e>
   d5bd4:	f000 fe82 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d5bd8:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d5bda:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d5bdc:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d5be0:	f043 0308 	orr.w	r3, r3, #8
   d5be4:	e7e5      	b.n	d5bb2 <_ZN8Debounce6updateEv+0x2c>

000d5be6 <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   d5be6:	7980      	ldrb	r0, [r0, #6]
   d5be8:	f000 0009 	and.w	r0, r0, #9
   d5bec:	f1a0 0308 	sub.w	r3, r0, #8
   d5bf0:	4258      	negs	r0, r3
   d5bf2:	4158      	adcs	r0, r3
   d5bf4:	4770      	bx	lr
	...

000d5bf8 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d5bf8:	b510      	push	{r4, lr}
   d5bfa:	4b04      	ldr	r3, [pc, #16]	; (d5c0c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d5bfc:	6003      	str	r3, [r0, #0]
   d5bfe:	4604      	mov	r4, r0
  if(buffer) {
   d5c00:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5c02:	b108      	cbz	r0, d5c08 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d5c04:	f001 f89e 	bl	d6d44 <free>
    buffer = NULL;
  }
}
   d5c08:	4620      	mov	r0, r4
   d5c0a:	bd10      	pop	{r4, pc}
   d5c0c:	000d986c 	.word	0x000d986c

000d5c10 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d5c10:	b510      	push	{r4, lr}
   d5c12:	4604      	mov	r4, r0
}
   d5c14:	f7ff fff0 	bl	d5bf8 <_ZN16Adafruit_SSD1306D1Ev>
   d5c18:	4620      	mov	r0, r4
   d5c1a:	2150      	movs	r1, #80	; 0x50
   d5c1c:	f002 fa57 	bl	d80ce <_ZdlPvj>
   d5c20:	4620      	mov	r0, r4
   d5c22:	bd10      	pop	{r4, pc}

000d5c24 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d5c24:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5c26:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d5c28:	db4b      	blt.n	d5cc2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5c2a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d5c2e:	428c      	cmp	r4, r1
   d5c30:	dd47      	ble.n	d5cc2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5c32:	2a00      	cmp	r2, #0
   d5c34:	db45      	blt.n	d5cc2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5c36:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d5c3a:	4294      	cmp	r4, r2
   d5c3c:	dd41      	ble.n	d5cc2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d5c3e:	7e84      	ldrb	r4, [r0, #26]
   d5c40:	2c02      	cmp	r4, #2
   d5c42:	d01f      	beq.n	d5c84 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d5c44:	2c03      	cmp	r4, #3
   d5c46:	d026      	beq.n	d5c96 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d5c48:	2c01      	cmp	r4, #1
   d5c4a:	d104      	bne.n	d5c56 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d5c4c:	8904      	ldrh	r4, [r0, #8]
   d5c4e:	43d2      	mvns	r2, r2
   d5c50:	4414      	add	r4, r2
      break;
   d5c52:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d5c54:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d5c56:	2b01      	cmp	r3, #1
   d5c58:	d023      	beq.n	d5ca2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d5c5a:	2b02      	cmp	r3, #2
   d5c5c:	d032      	beq.n	d5cc4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d5c5e:	bb83      	cbnz	r3, d5cc2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d5c60:	2a00      	cmp	r2, #0
   d5c62:	4613      	mov	r3, r2
   d5c64:	8904      	ldrh	r4, [r0, #8]
   d5c66:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5c68:	bfb8      	it	lt
   d5c6a:	1dd3      	addlt	r3, r2, #7
   d5c6c:	10db      	asrs	r3, r3, #3
   d5c6e:	fb13 1104 	smlabb	r1, r3, r4, r1
   d5c72:	f002 0207 	and.w	r2, r2, #7
   d5c76:	2301      	movs	r3, #1
   d5c78:	4093      	lsls	r3, r2
   d5c7a:	5c42      	ldrb	r2, [r0, r1]
   d5c7c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d5c80:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d5c82:	e01e      	b.n	d5cc2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d5c84:	8904      	ldrh	r4, [r0, #8]
   d5c86:	43c9      	mvns	r1, r1
   d5c88:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d5c8a:	8944      	ldrh	r4, [r0, #10]
   d5c8c:	43d2      	mvns	r2, r2
   d5c8e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d5c90:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d5c92:	b212      	sxth	r2, r2
      break;
   d5c94:	e7df      	b.n	d5c56 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d5c96:	8944      	ldrh	r4, [r0, #10]
   d5c98:	43c9      	mvns	r1, r1
   d5c9a:	440c      	add	r4, r1
      break;
   d5c9c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d5c9e:	b222      	sxth	r2, r4
      break;
   d5ca0:	e7d9      	b.n	d5c56 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d5ca2:	2a00      	cmp	r2, #0
   d5ca4:	8904      	ldrh	r4, [r0, #8]
   d5ca6:	4613      	mov	r3, r2
   d5ca8:	bfb8      	it	lt
   d5caa:	1dd3      	addlt	r3, r2, #7
   d5cac:	10db      	asrs	r3, r3, #3
   d5cae:	fb13 1104 	smlabb	r1, r3, r4, r1
   d5cb2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5cb4:	f002 0007 	and.w	r0, r2, #7
   d5cb8:	2201      	movs	r2, #1
   d5cba:	4082      	lsls	r2, r0
   d5cbc:	5c58      	ldrb	r0, [r3, r1]
   d5cbe:	4302      	orrs	r2, r0
   d5cc0:	545a      	strb	r2, [r3, r1]
}
   d5cc2:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d5cc4:	2a00      	cmp	r2, #0
   d5cc6:	4613      	mov	r3, r2
   d5cc8:	8904      	ldrh	r4, [r0, #8]
   d5cca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5ccc:	bfb8      	it	lt
   d5cce:	1dd3      	addlt	r3, r2, #7
   d5cd0:	10db      	asrs	r3, r3, #3
   d5cd2:	fb13 1104 	smlabb	r1, r3, r4, r1
   d5cd6:	f002 0207 	and.w	r2, r2, #7
   d5cda:	2301      	movs	r3, #1
   d5cdc:	fa03 f202 	lsl.w	r2, r3, r2
   d5ce0:	5c43      	ldrb	r3, [r0, r1]
   d5ce2:	405a      	eors	r2, r3
   d5ce4:	e7cc      	b.n	d5c80 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d5ce6 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5ce6:	b510      	push	{r4, lr}
   d5ce8:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d5cea:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d5cee:	2101      	movs	r1, #1
   d5cf0:	b280      	uxth	r0, r0
   d5cf2:	f002 f93e 	bl	d7f72 <digitalWrite>
   d5cf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5cf8:	b118      	cbz	r0, d5d02 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d5cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d5cfe:	f001 b8bb 	b.w	d6e78 <_ZN8SPIClass14endTransactionEv>
}
   d5d02:	bd10      	pop	{r4, pc}

000d5d04 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d5d04:	b570      	push	{r4, r5, r6, lr}
   d5d06:	4604      	mov	r4, r0
   d5d08:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d5d0a:	2600      	movs	r6, #0
   d5d0c:	f7ff fc12 	bl	d5534 <_ZN12Adafruit_GFXC1Ess>
   d5d10:	4b11      	ldr	r3, [pc, #68]	; (d5d58 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d5d12:	6023      	str	r3, [r4, #0]
   d5d14:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d5d16:	b915      	cbnz	r5, d5d1e <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d5d18:	f002 f9ac 	bl	d8074 <_Z19__fetch_global_Wirev>
   d5d1c:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d5d1e:	23ff      	movs	r3, #255	; 0xff
   d5d20:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d5d24:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d5d28:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d5d2c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d5d30:	4b0a      	ldr	r3, [pc, #40]	; (d5d5c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d5d32:	63a3      	str	r3, [r4, #56]	; 0x38
   d5d34:	2301      	movs	r3, #1
   d5d36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d5d3a:	9b05      	ldr	r3, [sp, #20]
   d5d3c:	64a3      	str	r3, [r4, #72]	; 0x48
   d5d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5d42:	9b06      	ldr	r3, [sp, #24]
   d5d44:	86a2      	strh	r2, [r4, #52]	; 0x34
   d5d46:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d5d4a:	6426      	str	r6, [r4, #64]	; 0x40
   d5d4c:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d5d50:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d5d52:	4620      	mov	r0, r4
   d5d54:	bd70      	pop	{r4, r5, r6, pc}
   d5d56:	bf00      	nop
   d5d58:	000d986c 	.word	0x000d986c
   d5d5c:	000d8654 	.word	0x000d8654

000d5d60 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d5d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d62:	4604      	mov	r4, r0
  if(wire) { // I2C
   d5d64:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d5d66:	460d      	mov	r5, r1
  if(wire) { // I2C
   d5d68:	b190      	cbz	r0, d5d90 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d5d6a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5d6e:	f001 fcd9 	bl	d7724 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5d72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5d74:	6803      	ldr	r3, [r0, #0]
   d5d76:	2100      	movs	r1, #0
   d5d78:	689b      	ldr	r3, [r3, #8]
   d5d7a:	4798      	blx	r3
    WIRE_WRITE(c);
   d5d7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5d7e:	6803      	ldr	r3, [r0, #0]
   d5d80:	4629      	mov	r1, r5
   d5d82:	689b      	ldr	r3, [r3, #8]
   d5d84:	4798      	blx	r3
    wire->endTransmission();
   d5d86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d5d88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d5d8c:	f001 bcd1 	b.w	d7732 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5d90:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d5d94:	4601      	mov	r1, r0
   d5d96:	b298      	uxth	r0, r3
   d5d98:	f002 f8eb 	bl	d7f72 <digitalWrite>
  if(spi) {
   d5d9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5d9e:	b120      	cbz	r0, d5daa <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d5da0:	4629      	mov	r1, r5
}
   d5da2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d5da6:	f001 b8ef 	b.w	d6f88 <_ZN8SPIClass8transferEh>
   d5daa:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5dac:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5dae:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5db2:	ea05 0107 	and.w	r1, r5, r7
   d5db6:	b280      	uxth	r0, r0
   d5db8:	f002 f8db 	bl	d7f72 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5dbc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5dc0:	2101      	movs	r1, #1
   d5dc2:	b280      	uxth	r0, r0
   d5dc4:	f002 f8d5 	bl	d7f72 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5dc8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5dcc:	2100      	movs	r1, #0
   d5dce:	b280      	uxth	r0, r0
   d5dd0:	f002 f8cf 	bl	d7f72 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5dd4:	3e01      	subs	r6, #1
   d5dd6:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d5dda:	d1e8      	bne.n	d5dae <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d5ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5dde <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5dde:	b538      	push	{r3, r4, r5, lr}
   d5de0:	4604      	mov	r4, r0
  TRANSACTION_START
   d5de2:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5de4:	460d      	mov	r5, r1
  TRANSACTION_START
   d5de6:	b180      	cbz	r0, d5e0a <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d5de8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5dea:	f001 fc8d 	bl	d7708 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d5dee:	2d00      	cmp	r5, #0
   d5df0:	4620      	mov	r0, r4
   d5df2:	bf14      	ite	ne
   d5df4:	21a7      	movne	r1, #167	; 0xa7
   d5df6:	21a6      	moveq	r1, #166	; 0xa6
   d5df8:	f7ff ffb2 	bl	d5d60 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d5dfc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5dfe:	b188      	cbz	r0, d5e24 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d5e00:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5e06:	f001 bc7f 	b.w	d7708 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d5e0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5e0c:	b118      	cbz	r0, d5e16 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d5e0e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5e12:	f001 f84b 	bl	d6eac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5e16:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5e1a:	2100      	movs	r1, #0
   d5e1c:	b280      	uxth	r0, r0
   d5e1e:	f002 f8a8 	bl	d7f72 <digitalWrite>
   d5e22:	e7e4      	b.n	d5dee <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d5e24:	4620      	mov	r0, r4
}
   d5e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5e2a:	f7ff bf5c 	b.w	d5ce6 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d5e2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d5e2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5e32:	4604      	mov	r4, r0
  if(wire) { // I2C
   d5e34:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d5e36:	460d      	mov	r5, r1
  if(wire) { // I2C
   d5e38:	188f      	adds	r7, r1, r2
   d5e3a:	b340      	cbz	r0, d5e8e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d5e3c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5e40:	f001 fc70 	bl	d7724 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5e44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e46:	6803      	ldr	r3, [r0, #0]
   d5e48:	2100      	movs	r1, #0
   d5e4a:	689b      	ldr	r3, [r3, #8]
   d5e4c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5e4e:	2601      	movs	r6, #1
    while(n--) {
   d5e50:	42bd      	cmp	r5, r7
   d5e52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e54:	d017      	beq.n	d5e86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d5e56:	2e1f      	cmp	r6, #31
   d5e58:	d90c      	bls.n	d5e74 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d5e5a:	f001 fc6a 	bl	d7732 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5e5e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5e62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e64:	f001 fc5e 	bl	d7724 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5e68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e6a:	6803      	ldr	r3, [r0, #0]
   d5e6c:	2100      	movs	r1, #0
   d5e6e:	689b      	ldr	r3, [r3, #8]
   d5e70:	4798      	blx	r3
        bytesOut = 1;
   d5e72:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5e74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5e76:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5e7a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5e7c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d5e7e:	689b      	ldr	r3, [r3, #8]
   d5e80:	4798      	blx	r3
      bytesOut++;
   d5e82:	b2f6      	uxtb	r6, r6
    while(n--) {
   d5e84:	e7e4      	b.n	d5e50 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d5e86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d5e8a:	f001 bc52 	b.w	d7732 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d5e8e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d5e92:	4601      	mov	r1, r0
   d5e94:	b298      	uxth	r0, r3
   d5e96:	f002 f86c 	bl	d7f72 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5e9a:	42af      	cmp	r7, r5
   d5e9c:	d022      	beq.n	d5ee4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d5e9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d5ea0:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d5ea4:	b118      	cbz	r0, d5eae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d5ea6:	4649      	mov	r1, r9
   d5ea8:	f001 f86e 	bl	d6f88 <_ZN8SPIClass8transferEh>
   d5eac:	e7f5      	b.n	d5e9a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d5eae:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5eb0:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d5eb4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5eb8:	ea09 0108 	and.w	r1, r9, r8
   d5ebc:	b280      	uxth	r0, r0
   d5ebe:	f002 f858 	bl	d7f72 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d5ec2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5ec6:	2101      	movs	r1, #1
   d5ec8:	b280      	uxth	r0, r0
   d5eca:	f002 f852 	bl	d7f72 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5ece:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5ed2:	2100      	movs	r1, #0
   d5ed4:	b280      	uxth	r0, r0
   d5ed6:	f002 f84c 	bl	d7f72 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5eda:	3e01      	subs	r6, #1
   d5edc:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5ee0:	d1e8      	bne.n	d5eb4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d5ee2:	e7da      	b.n	d5e9a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d5ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5ee8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d5ee8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5eec:	1dda      	adds	r2, r3, #7
   d5eee:	bf48      	it	mi
   d5ef0:	f103 020e 	addmi.w	r2, r3, #14
   d5ef4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d5ef8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5efa:	10d2      	asrs	r2, r2, #3
   d5efc:	435a      	muls	r2, r3
   d5efe:	2100      	movs	r1, #0
   d5f00:	f002 ba20 	b.w	d8344 <memset>

000d5f04 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d5f04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5f08:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5f0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d5f0c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5f10:	4604      	mov	r4, r0
   d5f12:	460f      	mov	r7, r1
   d5f14:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5f16:	b1b3      	cbz	r3, d5f46 <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d5f18:	4620      	mov	r0, r4
   d5f1a:	f7ff ffe5 	bl	d5ee8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d5f1e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d5f22:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d5f26:	2820      	cmp	r0, #32
   d5f28:	dc1f      	bgt.n	d5f6a <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d5f2a:	2320      	movs	r3, #32
   d5f2c:	2201      	movs	r2, #1
   d5f2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d5f32:	3820      	subs	r0, #32
   d5f34:	2373      	movs	r3, #115	; 0x73
   d5f36:	3973      	subs	r1, #115	; 0x73
   d5f38:	9300      	str	r3, [sp, #0]
   d5f3a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5f3e:	4b89      	ldr	r3, [pc, #548]	; (d6164 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d5f40:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d5f44:	e01f      	b.n	d5f86 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d5f46:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5f4a:	1dd8      	adds	r0, r3, #7
   d5f4c:	bf48      	it	mi
   d5f4e:	f103 000e 	addmi.w	r0, r3, #14
   d5f52:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d5f56:	10c0      	asrs	r0, r0, #3
   d5f58:	4358      	muls	r0, r3
   d5f5a:	f000 feeb 	bl	d6d34 <malloc>
   d5f5e:	62e0      	str	r0, [r4, #44]	; 0x2c
   d5f60:	2800      	cmp	r0, #0
   d5f62:	d1d9      	bne.n	d5f18 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d5f64:	b004      	add	sp, #16
   d5f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d5f6a:	2340      	movs	r3, #64	; 0x40
   d5f6c:	f04f 0c01 	mov.w	ip, #1
   d5f70:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d5f74:	2352      	movs	r3, #82	; 0x52
   d5f76:	3840      	subs	r0, #64	; 0x40
   d5f78:	3952      	subs	r1, #82	; 0x52
   d5f7a:	9300      	str	r3, [sp, #0]
   d5f7c:	4b7a      	ldr	r3, [pc, #488]	; (d6168 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d5f7e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5f82:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d5f86:	f340 024f 	sbfx	r2, r0, #1, #16
   d5f8a:	f341 014f 	sbfx	r1, r1, #1, #16
   d5f8e:	4620      	mov	r0, r4
   d5f90:	f7ff fae6 	bl	d5560 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d5f94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d5f96:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d5f9a:	2800      	cmp	r0, #0
   d5f9c:	d078      	beq.n	d6090 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d5f9e:	2d00      	cmp	r5, #0
   d5fa0:	d174      	bne.n	d608c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d5fa2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5fa6:	2b20      	cmp	r3, #32
   d5fa8:	bf0c      	ite	eq
   d5faa:	253c      	moveq	r5, #60	; 0x3c
   d5fac:	253d      	movne	r5, #61	; 0x3d
   d5fae:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d5fb2:	f1b8 0f00 	cmp.w	r8, #0
   d5fb6:	d001      	beq.n	d5fbc <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5fb8:	f001 fbaa 	bl	d7710 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5fbc:	b1fe      	cbz	r6, d5ffe <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d5fbe:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5fc2:	2800      	cmp	r0, #0
   d5fc4:	db1b      	blt.n	d5ffe <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d5fc6:	2101      	movs	r1, #1
   d5fc8:	b280      	uxth	r0, r0
   d5fca:	f001 ffc1 	bl	d7f50 <pinMode>
    digitalWrite(rstPin, HIGH);
   d5fce:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5fd2:	2101      	movs	r1, #1
   d5fd4:	b280      	uxth	r0, r0
   d5fd6:	f001 ffcc 	bl	d7f72 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d5fda:	2001      	movs	r0, #1
   d5fdc:	f001 f90e 	bl	d71fc <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5fe0:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5fe4:	2100      	movs	r1, #0
   d5fe6:	b280      	uxth	r0, r0
   d5fe8:	f001 ffc3 	bl	d7f72 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5fec:	200a      	movs	r0, #10
   d5fee:	f001 f905 	bl	d71fc <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d5ff2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5ff6:	2101      	movs	r1, #1
   d5ff8:	b280      	uxth	r0, r0
   d5ffa:	f001 ffba 	bl	d7f72 <digitalWrite>
  TRANSACTION_START
   d5ffe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6000:	2800      	cmp	r0, #0
   d6002:	d074      	beq.n	d60ee <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d6004:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d6006:	f001 fb7f 	bl	d7708 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d600a:	2204      	movs	r2, #4
   d600c:	4957      	ldr	r1, [pc, #348]	; (d616c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d600e:	4620      	mov	r0, r4
   d6010:	f7ff ff0d 	bl	d5e2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d6014:	7aa1      	ldrb	r1, [r4, #10]
   d6016:	3901      	subs	r1, #1
   d6018:	b2c9      	uxtb	r1, r1
   d601a:	4620      	mov	r0, r4
   d601c:	f7ff fea0 	bl	d5d60 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d6020:	4953      	ldr	r1, [pc, #332]	; (d6170 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d6022:	2204      	movs	r2, #4
   d6024:	4620      	mov	r0, r4
   d6026:	f7ff ff02 	bl	d5e2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d602a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d602e:	2b01      	cmp	r3, #1
   d6030:	bf0c      	ite	eq
   d6032:	2110      	moveq	r1, #16
   d6034:	2114      	movne	r1, #20
   d6036:	4620      	mov	r0, r4
   d6038:	f7ff fe92 	bl	d5d60 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d603c:	2204      	movs	r2, #4
   d603e:	494d      	ldr	r1, [pc, #308]	; (d6174 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d6040:	4620      	mov	r0, r4
   d6042:	f7ff fef4 	bl	d5e2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d6046:	68a3      	ldr	r3, [r4, #8]
   d6048:	4a4b      	ldr	r2, [pc, #300]	; (d6178 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d604a:	4293      	cmp	r3, r2
   d604c:	d15c      	bne.n	d6108 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d604e:	494b      	ldr	r1, [pc, #300]	; (d617c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d6050:	2204      	movs	r2, #4
   d6052:	4620      	mov	r0, r4
   d6054:	f7ff feeb 	bl	d5e2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d6058:	21d9      	movs	r1, #217	; 0xd9
   d605a:	4620      	mov	r0, r4
   d605c:	f7ff fe80 	bl	d5d60 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d6060:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d6064:	2b01      	cmp	r3, #1
   d6066:	bf0c      	ite	eq
   d6068:	2122      	moveq	r1, #34	; 0x22
   d606a:	21f1      	movne	r1, #241	; 0xf1
   d606c:	4620      	mov	r0, r4
   d606e:	f7ff fe77 	bl	d5d60 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d6072:	4620      	mov	r0, r4
   d6074:	4942      	ldr	r1, [pc, #264]	; (d6180 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d6076:	2206      	movs	r2, #6
   d6078:	f7ff fed9 	bl	d5e2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d607c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d607e:	2800      	cmp	r0, #0
   d6080:	d063      	beq.n	d614a <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d6082:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d6084:	f001 fb40 	bl	d7708 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d6088:	2001      	movs	r0, #1
   d608a:	e76b      	b.n	d5f64 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d608c:	b26d      	sxtb	r5, r5
   d608e:	e78e      	b.n	d5fae <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d6090:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d6094:	2101      	movs	r1, #1
   d6096:	b280      	uxth	r0, r0
   d6098:	f001 ff5a 	bl	d7f50 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d609c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d60a0:	2101      	movs	r1, #1
   d60a2:	b280      	uxth	r0, r0
   d60a4:	f001 ff54 	bl	d7f50 <pinMode>
    SSD1306_DESELECT
   d60a8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d60ac:	2101      	movs	r1, #1
   d60ae:	b280      	uxth	r0, r0
   d60b0:	f001 ff5f 	bl	d7f72 <digitalWrite>
    if(spi) { // Hardware SPI
   d60b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d60b6:	b13d      	cbz	r5, d60c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d60b8:	f1b8 0f00 	cmp.w	r8, #0
   d60bc:	f43f af7e 	beq.w	d5fbc <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d60c0:	4628      	mov	r0, r5
   d60c2:	f000 feb5 	bl	d6e30 <_ZN8SPIClass5beginEv>
   d60c6:	e779      	b.n	d5fbc <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d60c8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d60cc:	2101      	movs	r1, #1
   d60ce:	b280      	uxth	r0, r0
   d60d0:	f001 ff3e 	bl	d7f50 <pinMode>
      pinMode(clkPin , OUTPUT);
   d60d4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d60d8:	2101      	movs	r1, #1
   d60da:	b280      	uxth	r0, r0
   d60dc:	f001 ff38 	bl	d7f50 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d60e0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d60e4:	4629      	mov	r1, r5
   d60e6:	b280      	uxth	r0, r0
   d60e8:	f001 ff43 	bl	d7f72 <digitalWrite>
   d60ec:	e766      	b.n	d5fbc <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d60ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d60f0:	b118      	cbz	r0, d60fa <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d60f2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d60f6:	f000 fed9 	bl	d6eac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d60fa:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d60fe:	2100      	movs	r1, #0
   d6100:	b280      	uxth	r0, r0
   d6102:	f001 ff36 	bl	d7f72 <digitalWrite>
   d6106:	e780      	b.n	d600a <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d6108:	4a1e      	ldr	r2, [pc, #120]	; (d6184 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d610a:	4293      	cmp	r3, r2
   d610c:	d10e      	bne.n	d612c <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d610e:	491e      	ldr	r1, [pc, #120]	; (d6188 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d6110:	2203      	movs	r2, #3
   d6112:	4620      	mov	r0, r4
   d6114:	f7ff fe8b 	bl	d5e2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d6118:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d611c:	2b01      	cmp	r3, #1
   d611e:	bf0c      	ite	eq
   d6120:	219f      	moveq	r1, #159	; 0x9f
   d6122:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d6124:	4620      	mov	r0, r4
   d6126:	f7ff fe1b 	bl	d5d60 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d612a:	e795      	b.n	d6058 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d612c:	4a17      	ldr	r2, [pc, #92]	; (d618c <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d612e:	4293      	cmp	r3, r2
   d6130:	d192      	bne.n	d6058 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d6132:	4917      	ldr	r1, [pc, #92]	; (d6190 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d6134:	2203      	movs	r2, #3
   d6136:	4620      	mov	r0, r4
   d6138:	f7ff fe79 	bl	d5e2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d613c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d6140:	2b01      	cmp	r3, #1
   d6142:	bf0c      	ite	eq
   d6144:	2110      	moveq	r1, #16
   d6146:	21af      	movne	r1, #175	; 0xaf
   d6148:	e7ec      	b.n	d6124 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d614a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d614e:	2101      	movs	r1, #1
   d6150:	b280      	uxth	r0, r0
   d6152:	f001 ff0e 	bl	d7f72 <digitalWrite>
   d6156:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6158:	2800      	cmp	r0, #0
   d615a:	d095      	beq.n	d6088 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d615c:	f000 fe8c 	bl	d6e78 <_ZN8SPIClass14endTransactionEv>
   d6160:	e792      	b.n	d6088 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d6162:	bf00      	nop
   d6164:	000d9684 	.word	0x000d9684
   d6168:	000d93c4 	.word	0x000d93c4
   d616c:	000d98cc 	.word	0x000d98cc
   d6170:	000d98d0 	.word	0x000d98d0
   d6174:	000d98d4 	.word	0x000d98d4
   d6178:	00200080 	.word	0x00200080
   d617c:	000d98de 	.word	0x000d98de
   d6180:	000d98d8 	.word	0x000d98d8
   d6184:	00400080 	.word	0x00400080
   d6188:	000d98e2 	.word	0x000d98e2
   d618c:	00100060 	.word	0x00100060
   d6190:	000d98e5 	.word	0x000d98e5

000d6194 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d6194:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d6196:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d6198:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d619c:	db3d      	blt.n	d621a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d619e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d61a2:	4294      	cmp	r4, r2
   d61a4:	dd39      	ble.n	d621a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d61a6:	2900      	cmp	r1, #0
      w += x;
   d61a8:	bfbe      	ittt	lt
   d61aa:	185b      	addlt	r3, r3, r1
   d61ac:	b21b      	sxthlt	r3, r3
      x  = 0;
   d61ae:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d61b0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d61b4:	18ce      	adds	r6, r1, r3
   d61b6:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d61b8:	bfc4      	itt	gt
   d61ba:	1a63      	subgt	r3, r4, r1
   d61bc:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d61be:	2b00      	cmp	r3, #0
   d61c0:	dd2b      	ble.n	d621a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d61c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d61c4:	10d6      	asrs	r6, r2, #3
   d61c6:	fb14 1106 	smlabb	r1, r4, r6, r1
   d61ca:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d61cc:	f002 0007 	and.w	r0, r2, #7
   d61d0:	2201      	movs	r2, #1
   d61d2:	4082      	lsls	r2, r0
      switch(color) {
   d61d4:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d61d6:	b2d2      	uxtb	r2, r2
      switch(color) {
   d61d8:	d016      	beq.n	d6208 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d61da:	2d02      	cmp	r5, #2
   d61dc:	d00b      	beq.n	d61f6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d61de:	b9e5      	cbnz	r5, d621a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d61e0:	43d2      	mvns	r2, r2
   d61e2:	b2d2      	uxtb	r2, r2
   d61e4:	440b      	add	r3, r1
   d61e6:	4299      	cmp	r1, r3
   d61e8:	d017      	beq.n	d621a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d61ea:	f811 0b01 	ldrb.w	r0, [r1], #1
   d61ee:	4010      	ands	r0, r2
   d61f0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d61f4:	e7f7      	b.n	d61e6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d61f6:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d61f8:	4299      	cmp	r1, r3
   d61fa:	d00e      	beq.n	d621a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d61fc:	f811 0b01 	ldrb.w	r0, [r1], #1
   d6200:	4050      	eors	r0, r2
   d6202:	f801 0c01 	strb.w	r0, [r1, #-1]
   d6206:	e7f7      	b.n	d61f8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d6208:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d620a:	4299      	cmp	r1, r3
   d620c:	d005      	beq.n	d621a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d620e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d6212:	4310      	orrs	r0, r2
   d6214:	f801 0c01 	strb.w	r0, [r1, #-1]
   d6218:	e7f7      	b.n	d620a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d621a:	bd70      	pop	{r4, r5, r6, pc}

000d621c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d621c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d621e:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d6220:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d6224:	db76      	blt.n	d6314 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d6226:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d622a:	42a9      	cmp	r1, r5
   d622c:	da72      	bge.n	d6314 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d622e:	2a00      	cmp	r2, #0
      __h += __y;
   d6230:	bfbc      	itt	lt
   d6232:	18d2      	addlt	r2, r2, r3
   d6234:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d6236:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d623a:	bfb8      	it	lt
   d623c:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d623e:	18d7      	adds	r7, r2, r3
   d6240:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d6242:	bfc4      	itt	gt
   d6244:	1aa3      	subgt	r3, r4, r2
   d6246:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d6248:	2b00      	cmp	r3, #0
   d624a:	dd63      	ble.n	d6314 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d624c:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d6250:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d6252:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d6256:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d625a:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d625c:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d6260:	d023      	beq.n	d62aa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d6262:	f1c2 0208 	rsb	r2, r2, #8
   d6266:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d6268:	4d2c      	ldr	r5, [pc, #176]	; (d631c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d626a:	4293      	cmp	r3, r2
   d626c:	bf3c      	itt	cc
   d626e:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d6272:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d6276:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d6278:	bf3c      	itt	cc
   d627a:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d627e:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d6282:	2e01      	cmp	r6, #1
   d6284:	d007      	beq.n	d6296 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d6286:	2e02      	cmp	r6, #2
   d6288:	d02e      	beq.n	d62e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d628a:	b94e      	cbnz	r6, d62a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d628c:	f817 c001 	ldrb.w	ip, [r7, r1]
   d6290:	ea2c 0505 	bic.w	r5, ip, r5
   d6294:	e003      	b.n	d629e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d6296:	f817 c001 	ldrb.w	ip, [r7, r1]
   d629a:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d629e:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d62a0:	4293      	cmp	r3, r2
   d62a2:	d337      	bcc.n	d6314 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d62a4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d62a8:	440c      	add	r4, r1
        h -= mod;
   d62aa:	1a9a      	subs	r2, r3, r2
   d62ac:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d62ae:	2a07      	cmp	r2, #7
   d62b0:	d90e      	bls.n	d62d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d62b2:	2e02      	cmp	r6, #2
   d62b4:	d11d      	bne.n	d62f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d62b6:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d62b8:	7821      	ldrb	r1, [r4, #0]
   d62ba:	43c9      	mvns	r1, r1
   d62bc:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d62be:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d62c0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d62c4:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d62c6:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d62c8:	440c      	add	r4, r1
            } while(h >= 8);
   d62ca:	d8f5      	bhi.n	d62b8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d62cc:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d62d0:	b302      	cbz	r2, d6314 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d62d2:	4b13      	ldr	r3, [pc, #76]	; (d6320 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d62d4:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d62d6:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d62d8:	d019      	beq.n	d630e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d62da:	2e02      	cmp	r6, #2
   d62dc:	d01b      	beq.n	d6316 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d62de:	b9ce      	cbnz	r6, d6314 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d62e0:	7822      	ldrb	r2, [r4, #0]
   d62e2:	ea22 0303 	bic.w	r3, r2, r3
   d62e6:	e014      	b.n	d6312 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d62e8:	f817 c001 	ldrb.w	ip, [r7, r1]
   d62ec:	ea85 050c 	eor.w	r5, r5, ip
   d62f0:	e7d5      	b.n	d629e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d62f2:	2e00      	cmp	r6, #0
   d62f4:	bf14      	ite	ne
   d62f6:	25ff      	movne	r5, #255	; 0xff
   d62f8:	2500      	moveq	r5, #0
   d62fa:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d62fc:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d62fe:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d6300:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d6304:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d6306:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d6308:	440c      	add	r4, r1
            } while(h >= 8);
   d630a:	d8f7      	bhi.n	d62fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d630c:	e7de      	b.n	d62cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d630e:	7822      	ldrb	r2, [r4, #0]
   d6310:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d6312:	7023      	strb	r3, [r4, #0]
}
   d6314:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d6316:	7822      	ldrb	r2, [r4, #0]
   d6318:	4053      	eors	r3, r2
   d631a:	e7fa      	b.n	d6312 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d631c:	000d98bc 	.word	0x000d98bc
   d6320:	000d98c4 	.word	0x000d98c4

000d6324 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d6324:	b470      	push	{r4, r5, r6}
   d6326:	4614      	mov	r4, r2
  switch(rotation) {
   d6328:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d632a:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d632e:	2a02      	cmp	r2, #2
   d6330:	d00d      	beq.n	d634e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d6332:	2a03      	cmp	r2, #3
   d6334:	d018      	beq.n	d6368 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d6336:	2a01      	cmp	r2, #1
   d6338:	d111      	bne.n	d635e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d633a:	8902      	ldrh	r2, [r0, #8]
   d633c:	43e4      	mvns	r4, r4
   d633e:	4414      	add	r4, r2
   d6340:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d6342:	9603      	str	r6, [sp, #12]
   d6344:	460a      	mov	r2, r1
   d6346:	4621      	mov	r1, r4
}
   d6348:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d634a:	f7ff bf67 	b.w	d621c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d634e:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d6350:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d6352:	43e4      	mvns	r4, r4
    x -= (w-1);
   d6354:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d6356:	4414      	add	r4, r2
    x -= (w-1);
   d6358:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d635a:	b224      	sxth	r4, r4
    x -= (w-1);
   d635c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d635e:	9603      	str	r6, [sp, #12]
   d6360:	4622      	mov	r2, r4
}
   d6362:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d6364:	f7ff bf16 	b.w	d6194 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d6368:	8945      	ldrh	r5, [r0, #10]
   d636a:	4419      	add	r1, r3
   d636c:	1a69      	subs	r1, r5, r1
   d636e:	b209      	sxth	r1, r1
    break;
   d6370:	e7e7      	b.n	d6342 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d6372 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d6372:	b430      	push	{r4, r5}
   d6374:	4614      	mov	r4, r2
  switch(rotation) {
   d6376:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d6378:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d637c:	2a02      	cmp	r2, #2
   d637e:	d00d      	beq.n	d639c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d6380:	2a03      	cmp	r2, #3
   d6382:	d018      	beq.n	d63b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d6384:	2a01      	cmp	r2, #1
   d6386:	d111      	bne.n	d63ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d6388:	18e2      	adds	r2, r4, r3
   d638a:	8904      	ldrh	r4, [r0, #8]
   d638c:	1aa4      	subs	r4, r4, r2
   d638e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d6390:	9502      	str	r5, [sp, #8]
   d6392:	460a      	mov	r2, r1
   d6394:	4621      	mov	r1, r4
}
   d6396:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d6398:	f7ff befc 	b.w	d6194 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d639c:	8902      	ldrh	r2, [r0, #8]
   d639e:	43c9      	mvns	r1, r1
   d63a0:	4411      	add	r1, r2
    y -= (h-1);
   d63a2:	18e2      	adds	r2, r4, r3
   d63a4:	8944      	ldrh	r4, [r0, #10]
   d63a6:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d63a8:	b209      	sxth	r1, r1
    y -= (h-1);
   d63aa:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d63ac:	9502      	str	r5, [sp, #8]
   d63ae:	4622      	mov	r2, r4
}
   d63b0:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d63b2:	f7ff bf33 	b.w	d621c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d63b6:	8942      	ldrh	r2, [r0, #10]
   d63b8:	43c9      	mvns	r1, r1
   d63ba:	4411      	add	r1, r2
   d63bc:	b209      	sxth	r1, r1
    break;
   d63be:	e7e7      	b.n	d6390 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d63c0 <_ZN16Adafruit_SSD13068getPixelEss>:
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d63c0:	2900      	cmp	r1, #0
boolean Adafruit_SSD1306::getPixel(int16_t x, int16_t y) {
   d63c2:	b530      	push	{r4, r5, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d63c4:	db34      	blt.n	d6430 <_ZN16Adafruit_SSD13068getPixelEss+0x70>
   d63c6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d63ca:	428b      	cmp	r3, r1
   d63cc:	dd30      	ble.n	d6430 <_ZN16Adafruit_SSD13068getPixelEss+0x70>
   d63ce:	2a00      	cmp	r2, #0
   d63d0:	db2e      	blt.n	d6430 <_ZN16Adafruit_SSD13068getPixelEss+0x70>
   d63d2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d63d6:	4293      	cmp	r3, r2
   d63d8:	dd2a      	ble.n	d6430 <_ZN16Adafruit_SSD13068getPixelEss+0x70>
    switch(getRotation()) {
   d63da:	7e83      	ldrb	r3, [r0, #26]
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   d63dc:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d63e0:	2b02      	cmp	r3, #2
   d63e2:	d017      	beq.n	d6414 <_ZN16Adafruit_SSD13068getPixelEss+0x54>
   d63e4:	2b03      	cmp	r3, #3
   d63e6:	d01d      	beq.n	d6424 <_ZN16Adafruit_SSD13068getPixelEss+0x64>
   d63e8:	2b01      	cmp	r3, #1
   d63ea:	d103      	bne.n	d63f4 <_ZN16Adafruit_SSD13068getPixelEss+0x34>
      x = WIDTH - x - 1;
   d63ec:	43d2      	mvns	r2, r2
   d63ee:	1953      	adds	r3, r2, r5
      break;
   d63f0:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d63f2:	b219      	sxth	r1, r3
    return (buffer[x + (y / 8) * WIDTH] & (1 << (y & 7)));
   d63f4:	2a00      	cmp	r2, #0
   d63f6:	4613      	mov	r3, r2
   d63f8:	bfb8      	it	lt
   d63fa:	1dd3      	addlt	r3, r2, #7
   d63fc:	10db      	asrs	r3, r3, #3
   d63fe:	fb13 1105 	smlabb	r1, r3, r5, r1
   d6402:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d6404:	5c58      	ldrb	r0, [r3, r1]
   d6406:	f002 0207 	and.w	r2, r2, #7
   d640a:	fa40 f202 	asr.w	r2, r0, r2
   d640e:	f002 0001 	and.w	r0, r2, #1
}
   d6412:	bd30      	pop	{r4, r5, pc}
      y = HEIGHT - y - 1;
   d6414:	8943      	ldrh	r3, [r0, #10]
      x = WIDTH  - x - 1;
   d6416:	43c9      	mvns	r1, r1
      y = HEIGHT - y - 1;
   d6418:	43d2      	mvns	r2, r2
      x = WIDTH  - x - 1;
   d641a:	4429      	add	r1, r5
      y = HEIGHT - y - 1;
   d641c:	441a      	add	r2, r3
      x = WIDTH  - x - 1;
   d641e:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d6420:	b212      	sxth	r2, r2
      break;
   d6422:	e7e7      	b.n	d63f4 <_ZN16Adafruit_SSD13068getPixelEss+0x34>
      y = HEIGHT - y - 1;
   d6424:	8944      	ldrh	r4, [r0, #10]
   d6426:	43c9      	mvns	r1, r1
   d6428:	440c      	add	r4, r1
      break;
   d642a:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d642c:	b222      	sxth	r2, r4
      break;
   d642e:	e7e1      	b.n	d63f4 <_ZN16Adafruit_SSD13068getPixelEss+0x34>
  return false; // Pixel out of bounds
   d6430:	2000      	movs	r0, #0
   d6432:	e7ee      	b.n	d6412 <_ZN16Adafruit_SSD13068getPixelEss+0x52>

000d6434 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d6434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6438:	4604      	mov	r4, r0
  TRANSACTION_START
   d643a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d643c:	2800      	cmp	r0, #0
   d643e:	d042      	beq.n	d64c6 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d6440:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d6442:	f001 f961 	bl	d7708 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d6446:	4947      	ldr	r1, [pc, #284]	; (d6564 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d6448:	2205      	movs	r2, #5
   d644a:	4620      	mov	r0, r4
   d644c:	f7ff fcef 	bl	d5e2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d6450:	7a21      	ldrb	r1, [r4, #8]
   d6452:	3901      	subs	r1, #1
   d6454:	4620      	mov	r0, r4
   d6456:	b2c9      	uxtb	r1, r1
   d6458:	f7ff fc82 	bl	d5d60 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d645c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d6460:	1dde      	adds	r6, r3, #7
   d6462:	bf48      	it	mi
   d6464:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d6468:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d646c:	8923      	ldrh	r3, [r4, #8]
   d646e:	10f6      	asrs	r6, r6, #3
   d6470:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d6474:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d6478:	2800      	cmp	r0, #0
   d647a:	d03a      	beq.n	d64f2 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d647c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d6480:	f001 f950 	bl	d7724 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d6484:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6486:	6803      	ldr	r3, [r0, #0]
   d6488:	2140      	movs	r1, #64	; 0x40
   d648a:	689b      	ldr	r3, [r3, #8]
   d648c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d648e:	2701      	movs	r7, #1
    while(count--) {
   d6490:	42b5      	cmp	r5, r6
   d6492:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d6494:	d024      	beq.n	d64e0 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d6496:	2f1f      	cmp	r7, #31
   d6498:	d90c      	bls.n	d64b4 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d649a:	f001 f94a 	bl	d7732 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d649e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d64a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d64a4:	f001 f93e 	bl	d7724 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d64a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d64aa:	6803      	ldr	r3, [r0, #0]
   d64ac:	2140      	movs	r1, #64	; 0x40
   d64ae:	689b      	ldr	r3, [r3, #8]
   d64b0:	4798      	blx	r3
        bytesOut = 1;
   d64b2:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d64b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d64b6:	f815 1b01 	ldrb.w	r1, [r5], #1
   d64ba:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d64bc:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d64be:	689b      	ldr	r3, [r3, #8]
   d64c0:	4798      	blx	r3
      bytesOut++;
   d64c2:	b2ff      	uxtb	r7, r7
    while(count--) {
   d64c4:	e7e4      	b.n	d6490 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d64c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d64c8:	b118      	cbz	r0, d64d2 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d64ca:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d64ce:	f000 fced 	bl	d6eac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d64d2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d64d6:	2100      	movs	r1, #0
   d64d8:	b280      	uxth	r0, r0
   d64da:	f001 fd4a 	bl	d7f72 <digitalWrite>
   d64de:	e7b2      	b.n	d6446 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d64e0:	f001 f927 	bl	d7732 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d64e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d64e6:	b378      	cbz	r0, d6548 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d64e8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d64ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d64ee:	f001 b90b 	b.w	d7708 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d64f2:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d64f6:	2101      	movs	r1, #1
   d64f8:	b280      	uxth	r0, r0
   d64fa:	f001 fd3a 	bl	d7f72 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d64fe:	42b5      	cmp	r5, r6
   d6500:	d0f0      	beq.n	d64e4 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d6502:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d6504:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d6508:	b118      	cbz	r0, d6512 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d650a:	4649      	mov	r1, r9
   d650c:	f000 fd3c 	bl	d6f88 <_ZN8SPIClass8transferEh>
   d6510:	e7f5      	b.n	d64fe <_ZN16Adafruit_SSD13067displayEv+0xca>
   d6512:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d6514:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d6518:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d651c:	ea09 0108 	and.w	r1, r9, r8
   d6520:	b280      	uxth	r0, r0
   d6522:	f001 fd26 	bl	d7f72 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d6526:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d652a:	2101      	movs	r1, #1
   d652c:	b280      	uxth	r0, r0
   d652e:	f001 fd20 	bl	d7f72 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d6532:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d6536:	2100      	movs	r1, #0
   d6538:	b280      	uxth	r0, r0
   d653a:	f001 fd1a 	bl	d7f72 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d653e:	3f01      	subs	r7, #1
   d6540:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d6544:	d1e8      	bne.n	d6518 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d6546:	e7da      	b.n	d64fe <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d6548:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d654c:	2101      	movs	r1, #1
   d654e:	b280      	uxth	r0, r0
   d6550:	f001 fd0f 	bl	d7f72 <digitalWrite>
   d6554:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6556:	b118      	cbz	r0, d6560 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d6558:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d655c:	f000 bc8c 	b.w	d6e78 <_ZN8SPIClass14endTransactionEv>
}
   d6560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6564:	000d98e8 	.word	0x000d98e8

000d6568 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d6568:	4770      	bx	lr

000d656a <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   d656a:	b510      	push	{r4, lr}
}
   d656c:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   d656e:	4604      	mov	r4, r0
}
   d6570:	f001 fdad 	bl	d80ce <_ZdlPvj>
   d6574:	4620      	mov	r0, r4
   d6576:	bd10      	pop	{r4, pc}

000d6578 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d6578:	b510      	push	{r4, lr}
   d657a:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d657c:	f100 0118 	add.w	r1, r0, #24
   d6580:	68c0      	ldr	r0, [r0, #12]
   d6582:	f000 fc93 	bl	d6eac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   d6586:	8a20      	ldrh	r0, [r4, #16]
   d6588:	2100      	movs	r1, #0
}
   d658a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   d658e:	f001 bcf0 	b.w	d7f72 <digitalWrite>

000d6592 <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   d6592:	b510      	push	{r4, lr}
   d6594:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d6596:	2101      	movs	r1, #1
   d6598:	8a00      	ldrh	r0, [r0, #16]
   d659a:	f001 fcea 	bl	d7f72 <digitalWrite>

	spi.endTransaction();
   d659e:	68e0      	ldr	r0, [r4, #12]
}
   d65a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   d65a4:	f000 bc68 	b.w	d6e78 <_ZN8SPIClass14endTransactionEv>

000d65a8 <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d65a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65aa:	461e      	mov	r6, r3
	beginTransaction();
   d65ac:	6803      	ldr	r3, [r0, #0]
   d65ae:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d65b0:	460f      	mov	r7, r1
   d65b2:	4614      	mov	r4, r2
   d65b4:	4605      	mov	r5, r0
	beginTransaction();
   d65b6:	4798      	blx	r3

	if (numBytes > 1) {
   d65b8:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d65ba:	bf88      	it	hi
   d65bc:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d65c0:	68e8      	ldr	r0, [r5, #12]
   d65c2:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d65c6:	f000 fcdf 	bl	d6f88 <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   d65ca:	4426      	add	r6, r4
   d65cc:	42b4      	cmp	r4, r6
   d65ce:	d006      	beq.n	d65de <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d65d0:	68e8      	ldr	r0, [r5, #12]
   d65d2:	2100      	movs	r1, #0
   d65d4:	f000 fcd8 	bl	d6f88 <_ZN8SPIClass8transferEh>
   d65d8:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   d65dc:	e7f6      	b.n	d65cc <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   d65de:	682b      	ldr	r3, [r5, #0]
   d65e0:	4628      	mov	r0, r5
   d65e2:	699b      	ldr	r3, [r3, #24]
   d65e4:	4798      	blx	r3

	return true;
}
   d65e6:	2001      	movs	r0, #1
   d65e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d65ea <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d65ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65ec:	461e      	mov	r6, r3
	beginTransaction();
   d65ee:	6803      	ldr	r3, [r0, #0]
   d65f0:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d65f2:	460f      	mov	r7, r1
   d65f4:	4614      	mov	r4, r2
   d65f6:	4605      	mov	r5, r0
	beginTransaction();
   d65f8:	4798      	blx	r3

	if (numBytes > 1) {
   d65fa:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d65fc:	bf88      	it	hi
   d65fe:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d6602:	68e8      	ldr	r0, [r5, #12]
   d6604:	4639      	mov	r1, r7
   d6606:	f000 fcbf 	bl	d6f88 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d660a:	4426      	add	r6, r4
   d660c:	42b4      	cmp	r4, r6
   d660e:	d005      	beq.n	d661c <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d6610:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6614:	68e8      	ldr	r0, [r5, #12]
   d6616:	f000 fcb7 	bl	d6f88 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d661a:	e7f7      	b.n	d660c <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   d661c:	682b      	ldr	r3, [r5, #0]
   d661e:	4628      	mov	r0, r5
   d6620:	699b      	ldr	r3, [r3, #24]
   d6622:	4798      	blx	r3

	return true;
}
   d6624:	2001      	movs	r0, #1
   d6626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6628 <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   d6628:	2200      	movs	r2, #0
   d662a:	7002      	strb	r2, [r0, #0]
   d662c:	7042      	strb	r2, [r0, #1]
   d662e:	7082      	strb	r2, [r0, #2]
   d6630:	70c2      	strb	r2, [r0, #3]
   d6632:	7102      	strb	r2, [r0, #4]
   d6634:	7142      	strb	r2, [r0, #5]
   d6636:	7182      	strb	r2, [r0, #6]
   d6638:	71c2      	strb	r2, [r0, #7]
   d663a:	7202      	strb	r2, [r0, #8]
   d663c:	7242      	strb	r2, [r0, #9]
   d663e:	7282      	strb	r2, [r0, #10]
}
   d6640:	4770      	bx	lr

000d6642 <_ZN12LIS3DHConfig20setPositionInterruptEh>:
	reg1 = LIS3DH::RATE_100_HZ | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   d6642:	2257      	movs	r2, #87	; 0x57
   d6644:	7002      	strb	r2, [r0, #0]
	reg3 = LIS3DH::CTRL_REG3_I1_INT1;
   d6646:	2240      	movs	r2, #64	; 0x40
   d6648:	7082      	strb	r2, [r0, #2]
	int1_cfg = LIS3DH::INT1_CFG_AOI | LIS3DH::INT1_CFG_6D |
   d664a:	22ff      	movs	r2, #255	; 0xff
	int1_ths = movementThreshold;
   d664c:	71c1      	strb	r1, [r0, #7]
	int1_cfg = LIS3DH::INT1_CFG_AOI | LIS3DH::INT1_CFG_6D |
   d664e:	7242      	strb	r2, [r0, #9]
}
   d6650:	4770      	bx	lr
	...

000d6654 <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d6654:	4a02      	ldr	r2, [pc, #8]	; (d6660 <_ZN6LIS3DHC1Ei+0xc>)
   d6656:	e9c0 2100 	strd	r2, r1, [r0]
   d665a:	2200      	movs	r2, #0
   d665c:	7202      	strb	r2, [r0, #8]
}
   d665e:	4770      	bx	lr
   d6660:	000d9908 	.word	0x000d9908

000d6664 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d6664:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   d6666:	6803      	ldr	r3, [r0, #0]
   d6668:	aa01      	add	r2, sp, #4
   d666a:	68dc      	ldr	r4, [r3, #12]
   d666c:	2301      	movs	r3, #1
   d666e:	47a0      	blx	r4
}
   d6670:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d6674:	b002      	add	sp, #8
   d6676:	bd10      	pop	{r4, pc}

000d6678 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   d6678:	b538      	push	{r3, r4, r5, lr}
   d667a:	4605      	mov	r5, r0
   d667c:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d667e:	210f      	movs	r1, #15
   d6680:	4628      	mov	r0, r5
   d6682:	f7ff ffef 	bl	d6664 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d6686:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d6688:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   d668c:	d004      	beq.n	d6698 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   d668e:	f000 fdb5 	bl	d71fc <delay>
	for(int tries = 0; tries < 10; tries++) {
   d6692:	3c01      	subs	r4, #1
   d6694:	d1f3      	bne.n	d667e <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   d6696:	4620      	mov	r0, r4
}
   d6698:	bd38      	pop	{r3, r4, r5, pc}

000d669a <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   d669a:	b510      	push	{r4, lr}
   d669c:	4604      	mov	r4, r0
	spi.begin(ss);
   d669e:	8a01      	ldrh	r1, [r0, #16]
   d66a0:	68c0      	ldr	r0, [r0, #12]
   d66a2:	f000 fbd6 	bl	d6e52 <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   d66a6:	4620      	mov	r0, r4
}
   d66a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   d66ac:	f7ff bfe4 	b.w	d6678 <_ZN6LIS3DH9hasDeviceEv>

000d66b0 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   d66b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d66b2:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   d66b4:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   d66b6:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   d66b8:	f7ff ffd4 	bl	d6664 <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   d66bc:	f000 0008 	and.w	r0, r0, #8
   d66c0:	2800      	cmp	r0, #0
   d66c2:	bf14      	ite	ne
   d66c4:	2601      	movne	r6, #1
   d66c6:	2600      	moveq	r6, #0
	if (hasData) {
   d66c8:	d01b      	beq.n	d6702 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   d66ca:	682b      	ldr	r3, [r5, #0]
   d66cc:	466a      	mov	r2, sp
   d66ce:	68df      	ldr	r7, [r3, #12]
   d66d0:	2128      	movs	r1, #40	; 0x28
   d66d2:	2306      	movs	r3, #6
   d66d4:	4628      	mov	r0, r5
   d66d6:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   d66d8:	f89d 2001 	ldrb.w	r2, [sp, #1]
   d66dc:	f89d 3000 	ldrb.w	r3, [sp]
   d66e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d66e4:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   d66e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
   d66ea:	f89d 3002 	ldrb.w	r3, [sp, #2]
   d66ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d66f2:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   d66f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d66f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d66fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d6700:	80a3      	strh	r3, [r4, #4]
}
   d6702:	4630      	mov	r0, r6
   d6704:	b003      	add	sp, #12
   d6706:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6708 <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   d6708:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   d670a:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   d670c:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   d6710:	691c      	ldr	r4, [r3, #16]
   d6712:	aa01      	add	r2, sp, #4
   d6714:	2301      	movs	r3, #1
   d6716:	47a0      	blx	r4
}
   d6718:	b002      	add	sp, #8
   d671a:	bd10      	pop	{r4, pc}

000d671c <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   d671c:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   d671e:	6803      	ldr	r3, [r0, #0]
   d6720:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   d6722:	4604      	mov	r4, r0
   d6724:	460d      	mov	r5, r1
	if (!hasDevice()) {
   d6726:	4798      	blx	r3
   d6728:	4606      	mov	r6, r0
   d672a:	b930      	cbnz	r0, d673a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   d672c:	f000 ff06 	bl	d753c <_Z16_fetch_usbserialv>
   d6730:	4927      	ldr	r1, [pc, #156]	; (d67d0 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   d6732:	f000 fccc 	bl	d70ce <_ZN5Print7printlnEPKc>
}
   d6736:	4630      	mov	r0, r6
   d6738:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   d673a:	782a      	ldrb	r2, [r5, #0]
   d673c:	2120      	movs	r1, #32
   d673e:	4620      	mov	r0, r4
   d6740:	f7ff ffe2 	bl	d6708 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   d6744:	786a      	ldrb	r2, [r5, #1]
   d6746:	2121      	movs	r1, #33	; 0x21
   d6748:	4620      	mov	r0, r4
   d674a:	f7ff ffdd 	bl	d6708 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   d674e:	78aa      	ldrb	r2, [r5, #2]
   d6750:	2122      	movs	r1, #34	; 0x22
   d6752:	4620      	mov	r0, r4
   d6754:	f7ff ffd8 	bl	d6708 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   d6758:	78ea      	ldrb	r2, [r5, #3]
   d675a:	2123      	movs	r1, #35	; 0x23
   d675c:	4620      	mov	r0, r4
   d675e:	f7ff ffd3 	bl	d6708 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   d6762:	792a      	ldrb	r2, [r5, #4]
   d6764:	2124      	movs	r1, #36	; 0x24
   d6766:	4620      	mov	r0, r4
   d6768:	f7ff ffce 	bl	d6708 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   d676c:	796a      	ldrb	r2, [r5, #5]
   d676e:	2125      	movs	r1, #37	; 0x25
   d6770:	4620      	mov	r0, r4
   d6772:	f7ff ffc9 	bl	d6708 <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   d6776:	79ab      	ldrb	r3, [r5, #6]
   d6778:	b11b      	cbz	r3, d6782 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   d677a:	2126      	movs	r1, #38	; 0x26
   d677c:	4620      	mov	r0, r4
   d677e:	f7ff ff71 	bl	d6664 <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   d6782:	7aaa      	ldrb	r2, [r5, #10]
   d6784:	212e      	movs	r1, #46	; 0x2e
   d6786:	4620      	mov	r0, r4
   d6788:	f7ff ffbe 	bl	d6708 <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   d678c:	78ab      	ldrb	r3, [r5, #2]
   d678e:	065b      	lsls	r3, r3, #25
   d6790:	d5d1      	bpl.n	d6736 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   d6792:	79ea      	ldrb	r2, [r5, #7]
   d6794:	2132      	movs	r1, #50	; 0x32
   d6796:	4620      	mov	r0, r4
   d6798:	f7ff ffb6 	bl	d6708 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   d679c:	7a2a      	ldrb	r2, [r5, #8]
   d679e:	2133      	movs	r1, #51	; 0x33
   d67a0:	4620      	mov	r0, r4
   d67a2:	f7ff ffb1 	bl	d6708 <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   d67a6:	6863      	ldr	r3, [r4, #4]
   d67a8:	2b00      	cmp	r3, #0
   d67aa:	db0a      	blt.n	d67c2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   d67ac:	7a6a      	ldrb	r2, [r5, #9]
   d67ae:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   d67b0:	4620      	mov	r0, r4
   d67b2:	2130      	movs	r1, #48	; 0x30
   d67b4:	f7ff ffa8 	bl	d6708 <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   d67b8:	2131      	movs	r1, #49	; 0x31
   d67ba:	4620      	mov	r0, r4
   d67bc:	f7ff ff52 	bl	d6664 <_ZN6LIS3DH13readRegister8Eh>
   d67c0:	e7b9      	b.n	d6736 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   d67c2:	2200      	movs	r2, #0
   d67c4:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   d67c6:	2130      	movs	r1, #48	; 0x30
   d67c8:	4620      	mov	r0, r4
   d67ca:	f7ff ff9d 	bl	d6708 <_ZN6LIS3DH14writeRegister8Ehh>
   d67ce:	e7b2      	b.n	d6736 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   d67d0:	000d98ed 	.word	0x000d98ed

000d67d4 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d67d4:	f000 bd12 	b.w	d71fc <delay>

000d67d8 <_Z11BlynkMillisv>:
   d67d8:	f000 b880 	b.w	d68dc <HAL_Timer_Get_Milli_Seconds>

000d67dc <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d67dc:	4770      	bx	lr

000d67de <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d67de:	4770      	bx	lr

000d67e0 <BlynkNoOpCbk>:
{}
   d67e0:	4770      	bx	lr
	...

000d67e4 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d67e4:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d67e6:	bf5a      	itte	pl
   d67e8:	4b02      	ldrpl	r3, [pc, #8]	; (d67f4 <GetReadHandler+0x10>)
   d67ea:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d67ee:	2000      	movmi	r0, #0
#endif
}
   d67f0:	4770      	bx	lr
   d67f2:	bf00      	nop
   d67f4:	000d9940 	.word	0x000d9940

000d67f8 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d67f8:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d67fa:	bf5a      	itte	pl
   d67fc:	4b02      	ldrpl	r3, [pc, #8]	; (d6808 <GetWriteHandler+0x10>)
   d67fe:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d6802:	2000      	movmi	r0, #0
#endif
}
   d6804:	4770      	bx	lr
   d6806:	bf00      	nop
   d6808:	000d9b40 	.word	0x000d9b40

000d680c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d680c:	b508      	push	{r3, lr}
   d680e:	4b02      	ldr	r3, [pc, #8]	; (d6818 <netdb_freeaddrinfo+0xc>)
   d6810:	681b      	ldr	r3, [r3, #0]
   d6812:	689b      	ldr	r3, [r3, #8]
   d6814:	9301      	str	r3, [sp, #4]
   d6816:	bd08      	pop	{r3, pc}
   d6818:	00030268 	.word	0x00030268

000d681c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d681c:	b508      	push	{r3, lr}
   d681e:	4b02      	ldr	r3, [pc, #8]	; (d6828 <netdb_getaddrinfo+0xc>)
   d6820:	681b      	ldr	r3, [r3, #0]
   d6822:	68db      	ldr	r3, [r3, #12]
   d6824:	9301      	str	r3, [sp, #4]
   d6826:	bd08      	pop	{r3, pc}
   d6828:	00030268 	.word	0x00030268

000d682c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d682c:	b508      	push	{r3, lr}
   d682e:	4b02      	ldr	r3, [pc, #8]	; (d6838 <HAL_Validate_Pin_Function+0xc>)
   d6830:	681b      	ldr	r3, [r3, #0]
   d6832:	685b      	ldr	r3, [r3, #4]
   d6834:	9301      	str	r3, [sp, #4]
   d6836:	bd08      	pop	{r3, pc}
   d6838:	0003022c 	.word	0x0003022c

000d683c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d683c:	b508      	push	{r3, lr}
   d683e:	4b02      	ldr	r3, [pc, #8]	; (d6848 <HAL_Pin_Mode+0xc>)
   d6840:	681b      	ldr	r3, [r3, #0]
   d6842:	689b      	ldr	r3, [r3, #8]
   d6844:	9301      	str	r3, [sp, #4]
   d6846:	bd08      	pop	{r3, pc}
   d6848:	0003022c 	.word	0x0003022c

000d684c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d684c:	b508      	push	{r3, lr}
   d684e:	4b02      	ldr	r3, [pc, #8]	; (d6858 <HAL_Get_Pin_Mode+0xc>)
   d6850:	681b      	ldr	r3, [r3, #0]
   d6852:	68db      	ldr	r3, [r3, #12]
   d6854:	9301      	str	r3, [sp, #4]
   d6856:	bd08      	pop	{r3, pc}
   d6858:	0003022c 	.word	0x0003022c

000d685c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d685c:	b508      	push	{r3, lr}
   d685e:	4b02      	ldr	r3, [pc, #8]	; (d6868 <HAL_GPIO_Write+0xc>)
   d6860:	681b      	ldr	r3, [r3, #0]
   d6862:	691b      	ldr	r3, [r3, #16]
   d6864:	9301      	str	r3, [sp, #4]
   d6866:	bd08      	pop	{r3, pc}
   d6868:	0003022c 	.word	0x0003022c

000d686c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d686c:	b508      	push	{r3, lr}
   d686e:	4b02      	ldr	r3, [pc, #8]	; (d6878 <HAL_GPIO_Read+0xc>)
   d6870:	681b      	ldr	r3, [r3, #0]
   d6872:	695b      	ldr	r3, [r3, #20]
   d6874:	9301      	str	r3, [sp, #4]
   d6876:	bd08      	pop	{r3, pc}
   d6878:	0003022c 	.word	0x0003022c

000d687c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d687c:	b508      	push	{r3, lr}
   d687e:	4b02      	ldr	r3, [pc, #8]	; (d6888 <HAL_DAC_Write+0xc>)
   d6880:	681b      	ldr	r3, [r3, #0]
   d6882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6884:	9301      	str	r3, [sp, #4]
   d6886:	bd08      	pop	{r3, pc}
   d6888:	0003022c 	.word	0x0003022c

000d688c <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d688c:	b508      	push	{r3, lr}
   d688e:	4b02      	ldr	r3, [pc, #8]	; (d6898 <hal_adc_read+0xc>)
   d6890:	681b      	ldr	r3, [r3, #0]
   d6892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6894:	9301      	str	r3, [sp, #4]
   d6896:	bd08      	pop	{r3, pc}
   d6898:	0003022c 	.word	0x0003022c

000d689c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d689c:	b508      	push	{r3, lr}
   d689e:	4b02      	ldr	r3, [pc, #8]	; (d68a8 <hal_pwm_write_ext+0xc>)
   d68a0:	681b      	ldr	r3, [r3, #0]
   d68a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d68a4:	9301      	str	r3, [sp, #4]
   d68a6:	bd08      	pop	{r3, pc}
   d68a8:	0003022c 	.word	0x0003022c

000d68ac <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d68ac:	b508      	push	{r3, lr}
   d68ae:	4b02      	ldr	r3, [pc, #8]	; (d68b8 <if_index_to_name+0xc>)
   d68b0:	681b      	ldr	r3, [r3, #0]
   d68b2:	695b      	ldr	r3, [r3, #20]
   d68b4:	9301      	str	r3, [sp, #4]
   d68b6:	bd08      	pop	{r3, pc}
   d68b8:	0003026c 	.word	0x0003026c

000d68bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d68bc:	b508      	push	{r3, lr}
   d68be:	4b02      	ldr	r3, [pc, #8]	; (d68c8 <HAL_RNG_GetRandomNumber+0xc>)
   d68c0:	681b      	ldr	r3, [r3, #0]
   d68c2:	685b      	ldr	r3, [r3, #4]
   d68c4:	9301      	str	r3, [sp, #4]
   d68c6:	bd08      	pop	{r3, pc}
   d68c8:	00030218 	.word	0x00030218

000d68cc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d68cc:	b508      	push	{r3, lr}
   d68ce:	4b02      	ldr	r3, [pc, #8]	; (d68d8 <HAL_Delay_Microseconds+0xc>)
   d68d0:	681b      	ldr	r3, [r3, #0]
   d68d2:	68db      	ldr	r3, [r3, #12]
   d68d4:	9301      	str	r3, [sp, #4]
   d68d6:	bd08      	pop	{r3, pc}
   d68d8:	00030218 	.word	0x00030218

000d68dc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d68dc:	b508      	push	{r3, lr}
   d68de:	4b02      	ldr	r3, [pc, #8]	; (d68e8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d68e0:	681b      	ldr	r3, [r3, #0]
   d68e2:	695b      	ldr	r3, [r3, #20]
   d68e4:	9301      	str	r3, [sp, #4]
   d68e6:	bd08      	pop	{r3, pc}
   d68e8:	00030218 	.word	0x00030218

000d68ec <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d68ec:	b508      	push	{r3, lr}
   d68ee:	4b02      	ldr	r3, [pc, #8]	; (d68f8 <os_mutex_create+0xc>)
   d68f0:	681b      	ldr	r3, [r3, #0]
   d68f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d68f4:	9301      	str	r3, [sp, #4]
   d68f6:	bd08      	pop	{r3, pc}
   d68f8:	00030248 	.word	0x00030248

000d68fc <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d68fc:	b508      	push	{r3, lr}
   d68fe:	4b02      	ldr	r3, [pc, #8]	; (d6908 <os_mutex_destroy+0xc>)
   d6900:	681b      	ldr	r3, [r3, #0]
   d6902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6904:	9301      	str	r3, [sp, #4]
   d6906:	bd08      	pop	{r3, pc}
   d6908:	00030248 	.word	0x00030248

000d690c <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d690c:	b508      	push	{r3, lr}
   d690e:	4b02      	ldr	r3, [pc, #8]	; (d6918 <os_mutex_recursive_create+0xc>)
   d6910:	681b      	ldr	r3, [r3, #0]
   d6912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6914:	9301      	str	r3, [sp, #4]
   d6916:	bd08      	pop	{r3, pc}
   d6918:	00030248 	.word	0x00030248

000d691c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d691c:	b508      	push	{r3, lr}
   d691e:	4b02      	ldr	r3, [pc, #8]	; (d6928 <os_mutex_recursive_destroy+0xc>)
   d6920:	681b      	ldr	r3, [r3, #0]
   d6922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6924:	9301      	str	r3, [sp, #4]
   d6926:	bd08      	pop	{r3, pc}
   d6928:	00030248 	.word	0x00030248

000d692c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d692c:	b508      	push	{r3, lr}
   d692e:	4b02      	ldr	r3, [pc, #8]	; (d6938 <inet_inet_ntop+0xc>)
   d6930:	681b      	ldr	r3, [r3, #0]
   d6932:	695b      	ldr	r3, [r3, #20]
   d6934:	9301      	str	r3, [sp, #4]
   d6936:	bd08      	pop	{r3, pc}
   d6938:	00030264 	.word	0x00030264

000d693c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d693c:	b508      	push	{r3, lr}
   d693e:	4b02      	ldr	r3, [pc, #8]	; (d6948 <inet_htonl+0xc>)
   d6940:	681b      	ldr	r3, [r3, #0]
   d6942:	6a1b      	ldr	r3, [r3, #32]
   d6944:	9301      	str	r3, [sp, #4]
   d6946:	bd08      	pop	{r3, pc}
   d6948:	00030264 	.word	0x00030264

000d694c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d694c:	b508      	push	{r3, lr}
   d694e:	4b02      	ldr	r3, [pc, #8]	; (d6958 <inet_htons+0xc>)
   d6950:	681b      	ldr	r3, [r3, #0]
   d6952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6954:	9301      	str	r3, [sp, #4]
   d6956:	bd08      	pop	{r3, pc}
   d6958:	00030264 	.word	0x00030264

000d695c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d695c:	b508      	push	{r3, lr}
   d695e:	4b02      	ldr	r3, [pc, #8]	; (d6968 <hal_usart_init+0xc>)
   d6960:	681b      	ldr	r3, [r3, #0]
   d6962:	681b      	ldr	r3, [r3, #0]
   d6964:	9301      	str	r3, [sp, #4]
   d6966:	bd08      	pop	{r3, pc}
   d6968:	0003023c 	.word	0x0003023c

000d696c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d696c:	b508      	push	{r3, lr}
   d696e:	4b02      	ldr	r3, [pc, #8]	; (d6978 <hal_usart_write+0xc>)
   d6970:	681b      	ldr	r3, [r3, #0]
   d6972:	68db      	ldr	r3, [r3, #12]
   d6974:	9301      	str	r3, [sp, #4]
   d6976:	bd08      	pop	{r3, pc}
   d6978:	0003023c 	.word	0x0003023c

000d697c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d697c:	b508      	push	{r3, lr}
   d697e:	4b02      	ldr	r3, [pc, #8]	; (d6988 <hal_usart_available+0xc>)
   d6980:	681b      	ldr	r3, [r3, #0]
   d6982:	691b      	ldr	r3, [r3, #16]
   d6984:	9301      	str	r3, [sp, #4]
   d6986:	bd08      	pop	{r3, pc}
   d6988:	0003023c 	.word	0x0003023c

000d698c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d698c:	b508      	push	{r3, lr}
   d698e:	4b02      	ldr	r3, [pc, #8]	; (d6998 <hal_usart_read+0xc>)
   d6990:	681b      	ldr	r3, [r3, #0]
   d6992:	695b      	ldr	r3, [r3, #20]
   d6994:	9301      	str	r3, [sp, #4]
   d6996:	bd08      	pop	{r3, pc}
   d6998:	0003023c 	.word	0x0003023c

000d699c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d699c:	b508      	push	{r3, lr}
   d699e:	4b02      	ldr	r3, [pc, #8]	; (d69a8 <hal_usart_peek+0xc>)
   d69a0:	681b      	ldr	r3, [r3, #0]
   d69a2:	699b      	ldr	r3, [r3, #24]
   d69a4:	9301      	str	r3, [sp, #4]
   d69a6:	bd08      	pop	{r3, pc}
   d69a8:	0003023c 	.word	0x0003023c

000d69ac <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d69ac:	b508      	push	{r3, lr}
   d69ae:	4b02      	ldr	r3, [pc, #8]	; (d69b8 <hal_usart_flush+0xc>)
   d69b0:	681b      	ldr	r3, [r3, #0]
   d69b2:	69db      	ldr	r3, [r3, #28]
   d69b4:	9301      	str	r3, [sp, #4]
   d69b6:	bd08      	pop	{r3, pc}
   d69b8:	0003023c 	.word	0x0003023c

000d69bc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d69bc:	b508      	push	{r3, lr}
   d69be:	4b02      	ldr	r3, [pc, #8]	; (d69c8 <hal_usart_is_enabled+0xc>)
   d69c0:	681b      	ldr	r3, [r3, #0]
   d69c2:	6a1b      	ldr	r3, [r3, #32]
   d69c4:	9301      	str	r3, [sp, #4]
   d69c6:	bd08      	pop	{r3, pc}
   d69c8:	0003023c 	.word	0x0003023c

000d69cc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d69cc:	b508      	push	{r3, lr}
   d69ce:	4b02      	ldr	r3, [pc, #8]	; (d69d8 <hal_usart_available_data_for_write+0xc>)
   d69d0:	681b      	ldr	r3, [r3, #0]
   d69d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d69d4:	9301      	str	r3, [sp, #4]
   d69d6:	bd08      	pop	{r3, pc}
   d69d8:	0003023c 	.word	0x0003023c

000d69dc <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d69dc:	b508      	push	{r3, lr}
   d69de:	4b02      	ldr	r3, [pc, #8]	; (d69e8 <hal_i2c_set_speed+0xc>)
   d69e0:	681b      	ldr	r3, [r3, #0]
   d69e2:	681b      	ldr	r3, [r3, #0]
   d69e4:	9301      	str	r3, [sp, #4]
   d69e6:	bd08      	pop	{r3, pc}
   d69e8:	00030228 	.word	0x00030228

000d69ec <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d69ec:	b508      	push	{r3, lr}
   d69ee:	4b02      	ldr	r3, [pc, #8]	; (d69f8 <hal_i2c_begin+0xc>)
   d69f0:	681b      	ldr	r3, [r3, #0]
   d69f2:	68db      	ldr	r3, [r3, #12]
   d69f4:	9301      	str	r3, [sp, #4]
   d69f6:	bd08      	pop	{r3, pc}
   d69f8:	00030228 	.word	0x00030228

000d69fc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d69fc:	b508      	push	{r3, lr}
   d69fe:	4b02      	ldr	r3, [pc, #8]	; (d6a08 <hal_i2c_begin_transmission+0xc>)
   d6a00:	681b      	ldr	r3, [r3, #0]
   d6a02:	699b      	ldr	r3, [r3, #24]
   d6a04:	9301      	str	r3, [sp, #4]
   d6a06:	bd08      	pop	{r3, pc}
   d6a08:	00030228 	.word	0x00030228

000d6a0c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6a0c:	b508      	push	{r3, lr}
   d6a0e:	4b02      	ldr	r3, [pc, #8]	; (d6a18 <hal_i2c_end_transmission+0xc>)
   d6a10:	681b      	ldr	r3, [r3, #0]
   d6a12:	69db      	ldr	r3, [r3, #28]
   d6a14:	9301      	str	r3, [sp, #4]
   d6a16:	bd08      	pop	{r3, pc}
   d6a18:	00030228 	.word	0x00030228

000d6a1c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6a1c:	b508      	push	{r3, lr}
   d6a1e:	4b02      	ldr	r3, [pc, #8]	; (d6a28 <hal_i2c_write+0xc>)
   d6a20:	681b      	ldr	r3, [r3, #0]
   d6a22:	6a1b      	ldr	r3, [r3, #32]
   d6a24:	9301      	str	r3, [sp, #4]
   d6a26:	bd08      	pop	{r3, pc}
   d6a28:	00030228 	.word	0x00030228

000d6a2c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6a2c:	b508      	push	{r3, lr}
   d6a2e:	4b02      	ldr	r3, [pc, #8]	; (d6a38 <hal_i2c_available+0xc>)
   d6a30:	681b      	ldr	r3, [r3, #0]
   d6a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a34:	9301      	str	r3, [sp, #4]
   d6a36:	bd08      	pop	{r3, pc}
   d6a38:	00030228 	.word	0x00030228

000d6a3c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6a3c:	b508      	push	{r3, lr}
   d6a3e:	4b02      	ldr	r3, [pc, #8]	; (d6a48 <hal_i2c_read+0xc>)
   d6a40:	681b      	ldr	r3, [r3, #0]
   d6a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6a44:	9301      	str	r3, [sp, #4]
   d6a46:	bd08      	pop	{r3, pc}
   d6a48:	00030228 	.word	0x00030228

000d6a4c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6a4c:	b508      	push	{r3, lr}
   d6a4e:	4b02      	ldr	r3, [pc, #8]	; (d6a58 <hal_i2c_peek+0xc>)
   d6a50:	681b      	ldr	r3, [r3, #0]
   d6a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6a54:	9301      	str	r3, [sp, #4]
   d6a56:	bd08      	pop	{r3, pc}
   d6a58:	00030228 	.word	0x00030228

000d6a5c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6a5c:	b508      	push	{r3, lr}
   d6a5e:	4b02      	ldr	r3, [pc, #8]	; (d6a68 <hal_i2c_flush+0xc>)
   d6a60:	681b      	ldr	r3, [r3, #0]
   d6a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a64:	9301      	str	r3, [sp, #4]
   d6a66:	bd08      	pop	{r3, pc}
   d6a68:	00030228 	.word	0x00030228

000d6a6c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6a6c:	b508      	push	{r3, lr}
   d6a6e:	4b02      	ldr	r3, [pc, #8]	; (d6a78 <hal_i2c_is_enabled+0xc>)
   d6a70:	681b      	ldr	r3, [r3, #0]
   d6a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6a74:	9301      	str	r3, [sp, #4]
   d6a76:	bd08      	pop	{r3, pc}
   d6a78:	00030228 	.word	0x00030228

000d6a7c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6a7c:	b508      	push	{r3, lr}
   d6a7e:	4b02      	ldr	r3, [pc, #8]	; (d6a88 <hal_i2c_init+0xc>)
   d6a80:	681b      	ldr	r3, [r3, #0]
   d6a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6a84:	9301      	str	r3, [sp, #4]
   d6a86:	bd08      	pop	{r3, pc}
   d6a88:	00030228 	.word	0x00030228

000d6a8c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6a8c:	b508      	push	{r3, lr}
   d6a8e:	4b02      	ldr	r3, [pc, #8]	; (d6a98 <sock_setsockopt+0xc>)
   d6a90:	681b      	ldr	r3, [r3, #0]
   d6a92:	699b      	ldr	r3, [r3, #24]
   d6a94:	9301      	str	r3, [sp, #4]
   d6a96:	bd08      	pop	{r3, pc}
   d6a98:	00030238 	.word	0x00030238

000d6a9c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6a9c:	b508      	push	{r3, lr}
   d6a9e:	4b02      	ldr	r3, [pc, #8]	; (d6aa8 <sock_close+0xc>)
   d6aa0:	681b      	ldr	r3, [r3, #0]
   d6aa2:	69db      	ldr	r3, [r3, #28]
   d6aa4:	9301      	str	r3, [sp, #4]
   d6aa6:	bd08      	pop	{r3, pc}
   d6aa8:	00030238 	.word	0x00030238

000d6aac <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6aac:	b508      	push	{r3, lr}
   d6aae:	4b02      	ldr	r3, [pc, #8]	; (d6ab8 <sock_connect+0xc>)
   d6ab0:	681b      	ldr	r3, [r3, #0]
   d6ab2:	6a1b      	ldr	r3, [r3, #32]
   d6ab4:	9301      	str	r3, [sp, #4]
   d6ab6:	bd08      	pop	{r3, pc}
   d6ab8:	00030238 	.word	0x00030238

000d6abc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6abc:	b508      	push	{r3, lr}
   d6abe:	4b02      	ldr	r3, [pc, #8]	; (d6ac8 <sock_recv+0xc>)
   d6ac0:	681b      	ldr	r3, [r3, #0]
   d6ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ac4:	9301      	str	r3, [sp, #4]
   d6ac6:	bd08      	pop	{r3, pc}
   d6ac8:	00030238 	.word	0x00030238

000d6acc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6acc:	b508      	push	{r3, lr}
   d6ace:	4b02      	ldr	r3, [pc, #8]	; (d6ad8 <sock_send+0xc>)
   d6ad0:	681b      	ldr	r3, [r3, #0]
   d6ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ad4:	9301      	str	r3, [sp, #4]
   d6ad6:	bd08      	pop	{r3, pc}
   d6ad8:	00030238 	.word	0x00030238

000d6adc <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6adc:	b508      	push	{r3, lr}
   d6ade:	4b02      	ldr	r3, [pc, #8]	; (d6ae8 <sock_socket+0xc>)
   d6ae0:	681b      	ldr	r3, [r3, #0]
   d6ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6ae4:	9301      	str	r3, [sp, #4]
   d6ae6:	bd08      	pop	{r3, pc}
   d6ae8:	00030238 	.word	0x00030238

000d6aec <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d6aec:	b508      	push	{r3, lr}
   d6aee:	4b02      	ldr	r3, [pc, #8]	; (d6af8 <hal_spi_begin+0xc>)
   d6af0:	681b      	ldr	r3, [r3, #0]
   d6af2:	681b      	ldr	r3, [r3, #0]
   d6af4:	9301      	str	r3, [sp, #4]
   d6af6:	bd08      	pop	{r3, pc}
   d6af8:	00030230 	.word	0x00030230

000d6afc <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d6afc:	b508      	push	{r3, lr}
   d6afe:	4b02      	ldr	r3, [pc, #8]	; (d6b08 <hal_spi_transfer+0xc>)
   d6b00:	681b      	ldr	r3, [r3, #0]
   d6b02:	695b      	ldr	r3, [r3, #20]
   d6b04:	9301      	str	r3, [sp, #4]
   d6b06:	bd08      	pop	{r3, pc}
   d6b08:	00030230 	.word	0x00030230

000d6b0c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6b0c:	b508      	push	{r3, lr}
   d6b0e:	4b02      	ldr	r3, [pc, #8]	; (d6b18 <hal_spi_init+0xc>)
   d6b10:	681b      	ldr	r3, [r3, #0]
   d6b12:	69db      	ldr	r3, [r3, #28]
   d6b14:	9301      	str	r3, [sp, #4]
   d6b16:	bd08      	pop	{r3, pc}
   d6b18:	00030230 	.word	0x00030230

000d6b1c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6b1c:	b508      	push	{r3, lr}
   d6b1e:	4b02      	ldr	r3, [pc, #8]	; (d6b28 <hal_spi_is_enabled+0xc>)
   d6b20:	681b      	ldr	r3, [r3, #0]
   d6b22:	6a1b      	ldr	r3, [r3, #32]
   d6b24:	9301      	str	r3, [sp, #4]
   d6b26:	bd08      	pop	{r3, pc}
   d6b28:	00030230 	.word	0x00030230

000d6b2c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d6b2c:	b508      	push	{r3, lr}
   d6b2e:	4b02      	ldr	r3, [pc, #8]	; (d6b38 <hal_spi_info+0xc>)
   d6b30:	681b      	ldr	r3, [r3, #0]
   d6b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6b34:	9301      	str	r3, [sp, #4]
   d6b36:	bd08      	pop	{r3, pc}
   d6b38:	00030230 	.word	0x00030230

000d6b3c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6b3c:	b508      	push	{r3, lr}
   d6b3e:	4b02      	ldr	r3, [pc, #8]	; (d6b48 <hal_spi_set_settings+0xc>)
   d6b40:	681b      	ldr	r3, [r3, #0]
   d6b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6b44:	9301      	str	r3, [sp, #4]
   d6b46:	bd08      	pop	{r3, pc}
   d6b48:	00030230 	.word	0x00030230

000d6b4c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d6b4c:	b508      	push	{r3, lr}
   d6b4e:	4b02      	ldr	r3, [pc, #8]	; (d6b58 <hal_spi_acquire+0xc>)
   d6b50:	681b      	ldr	r3, [r3, #0]
   d6b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6b54:	9301      	str	r3, [sp, #4]
   d6b56:	bd08      	pop	{r3, pc}
   d6b58:	00030230 	.word	0x00030230

000d6b5c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d6b5c:	b508      	push	{r3, lr}
   d6b5e:	4b02      	ldr	r3, [pc, #8]	; (d6b68 <hal_spi_release+0xc>)
   d6b60:	681b      	ldr	r3, [r3, #0]
   d6b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6b64:	9301      	str	r3, [sp, #4]
   d6b66:	bd08      	pop	{r3, pc}
   d6b68:	00030230 	.word	0x00030230

000d6b6c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6b6c:	b508      	push	{r3, lr}
   d6b6e:	4b02      	ldr	r3, [pc, #8]	; (d6b78 <HAL_USB_USART_Init+0xc>)
   d6b70:	681b      	ldr	r3, [r3, #0]
   d6b72:	681b      	ldr	r3, [r3, #0]
   d6b74:	9301      	str	r3, [sp, #4]
   d6b76:	bd08      	pop	{r3, pc}
   d6b78:	0003024c 	.word	0x0003024c

000d6b7c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6b7c:	b508      	push	{r3, lr}
   d6b7e:	4b02      	ldr	r3, [pc, #8]	; (d6b88 <HAL_USB_USART_Begin+0xc>)
   d6b80:	681b      	ldr	r3, [r3, #0]
   d6b82:	685b      	ldr	r3, [r3, #4]
   d6b84:	9301      	str	r3, [sp, #4]
   d6b86:	bd08      	pop	{r3, pc}
   d6b88:	0003024c 	.word	0x0003024c

000d6b8c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6b8c:	b508      	push	{r3, lr}
   d6b8e:	4b02      	ldr	r3, [pc, #8]	; (d6b98 <HAL_USB_USART_Available_Data+0xc>)
   d6b90:	681b      	ldr	r3, [r3, #0]
   d6b92:	691b      	ldr	r3, [r3, #16]
   d6b94:	9301      	str	r3, [sp, #4]
   d6b96:	bd08      	pop	{r3, pc}
   d6b98:	0003024c 	.word	0x0003024c

000d6b9c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6b9c:	b508      	push	{r3, lr}
   d6b9e:	4b02      	ldr	r3, [pc, #8]	; (d6ba8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6ba0:	681b      	ldr	r3, [r3, #0]
   d6ba2:	695b      	ldr	r3, [r3, #20]
   d6ba4:	9301      	str	r3, [sp, #4]
   d6ba6:	bd08      	pop	{r3, pc}
   d6ba8:	0003024c 	.word	0x0003024c

000d6bac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6bac:	b508      	push	{r3, lr}
   d6bae:	4b02      	ldr	r3, [pc, #8]	; (d6bb8 <HAL_USB_USART_Receive_Data+0xc>)
   d6bb0:	681b      	ldr	r3, [r3, #0]
   d6bb2:	699b      	ldr	r3, [r3, #24]
   d6bb4:	9301      	str	r3, [sp, #4]
   d6bb6:	bd08      	pop	{r3, pc}
   d6bb8:	0003024c 	.word	0x0003024c

000d6bbc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6bbc:	b508      	push	{r3, lr}
   d6bbe:	4b02      	ldr	r3, [pc, #8]	; (d6bc8 <HAL_USB_USART_Send_Data+0xc>)
   d6bc0:	681b      	ldr	r3, [r3, #0]
   d6bc2:	69db      	ldr	r3, [r3, #28]
   d6bc4:	9301      	str	r3, [sp, #4]
   d6bc6:	bd08      	pop	{r3, pc}
   d6bc8:	0003024c 	.word	0x0003024c

000d6bcc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6bcc:	b508      	push	{r3, lr}
   d6bce:	4b02      	ldr	r3, [pc, #8]	; (d6bd8 <HAL_USB_USART_Flush_Data+0xc>)
   d6bd0:	681b      	ldr	r3, [r3, #0]
   d6bd2:	6a1b      	ldr	r3, [r3, #32]
   d6bd4:	9301      	str	r3, [sp, #4]
   d6bd6:	bd08      	pop	{r3, pc}
   d6bd8:	0003024c 	.word	0x0003024c

000d6bdc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6bdc:	b508      	push	{r3, lr}
   d6bde:	4b02      	ldr	r3, [pc, #8]	; (d6be8 <panic_+0xc>)
   d6be0:	681b      	ldr	r3, [r3, #0]
   d6be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6be4:	9301      	str	r3, [sp, #4]
   d6be6:	bd08      	pop	{r3, pc}
   d6be8:	00030260 	.word	0x00030260

000d6bec <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6bec:	b508      	push	{r3, lr}
   d6bee:	4b02      	ldr	r3, [pc, #8]	; (d6bf8 <log_message+0xc>)
   d6bf0:	681b      	ldr	r3, [r3, #0]
   d6bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6bf4:	9301      	str	r3, [sp, #4]
   d6bf6:	bd08      	pop	{r3, pc}
   d6bf8:	00030260 	.word	0x00030260

000d6bfc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6bfc:	b508      	push	{r3, lr}
   d6bfe:	4b02      	ldr	r3, [pc, #8]	; (d6c08 <set_system_mode+0xc>)
   d6c00:	681b      	ldr	r3, [r3, #0]
   d6c02:	685b      	ldr	r3, [r3, #4]
   d6c04:	9301      	str	r3, [sp, #4]
   d6c06:	bd08      	pop	{r3, pc}
   d6c08:	00030220 	.word	0x00030220

000d6c0c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6c0c:	b508      	push	{r3, lr}
   d6c0e:	4b02      	ldr	r3, [pc, #8]	; (d6c18 <system_delay_ms+0xc>)
   d6c10:	681b      	ldr	r3, [r3, #0]
   d6c12:	695b      	ldr	r3, [r3, #20]
   d6c14:	9301      	str	r3, [sp, #4]
   d6c16:	bd08      	pop	{r3, pc}
   d6c18:	00030220 	.word	0x00030220

000d6c1c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6c1c:	b508      	push	{r3, lr}
   d6c1e:	4b02      	ldr	r3, [pc, #8]	; (d6c28 <system_thread_set_state+0xc>)
   d6c20:	681b      	ldr	r3, [r3, #0]
   d6c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c24:	9301      	str	r3, [sp, #4]
   d6c26:	bd08      	pop	{r3, pc}
   d6c28:	00030220 	.word	0x00030220

000d6c2c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6c2c:	b508      	push	{r3, lr}
   d6c2e:	4b03      	ldr	r3, [pc, #12]	; (d6c3c <system_ctrl_set_app_request_handler+0x10>)
   d6c30:	681b      	ldr	r3, [r3, #0]
   d6c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6c36:	9301      	str	r3, [sp, #4]
   d6c38:	bd08      	pop	{r3, pc}
   d6c3a:	0000      	.short	0x0000
   d6c3c:	00030220 	.word	0x00030220

000d6c40 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6c40:	b508      	push	{r3, lr}
   d6c42:	4b03      	ldr	r3, [pc, #12]	; (d6c50 <system_ctrl_set_result+0x10>)
   d6c44:	681b      	ldr	r3, [r3, #0]
   d6c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6c4a:	9301      	str	r3, [sp, #4]
   d6c4c:	bd08      	pop	{r3, pc}
   d6c4e:	0000      	.short	0x0000
   d6c50:	00030220 	.word	0x00030220

000d6c54 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6c54:	b508      	push	{r3, lr}
   d6c56:	4b02      	ldr	r3, [pc, #8]	; (d6c60 <network_connect+0xc>)
   d6c58:	681b      	ldr	r3, [r3, #0]
   d6c5a:	685b      	ldr	r3, [r3, #4]
   d6c5c:	9301      	str	r3, [sp, #4]
   d6c5e:	bd08      	pop	{r3, pc}
   d6c60:	00030240 	.word	0x00030240

000d6c64 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6c64:	b508      	push	{r3, lr}
   d6c66:	4b02      	ldr	r3, [pc, #8]	; (d6c70 <network_connecting+0xc>)
   d6c68:	681b      	ldr	r3, [r3, #0]
   d6c6a:	689b      	ldr	r3, [r3, #8]
   d6c6c:	9301      	str	r3, [sp, #4]
   d6c6e:	bd08      	pop	{r3, pc}
   d6c70:	00030240 	.word	0x00030240

000d6c74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6c74:	b508      	push	{r3, lr}
   d6c76:	4b02      	ldr	r3, [pc, #8]	; (d6c80 <network_disconnect+0xc>)
   d6c78:	681b      	ldr	r3, [r3, #0]
   d6c7a:	68db      	ldr	r3, [r3, #12]
   d6c7c:	9301      	str	r3, [sp, #4]
   d6c7e:	bd08      	pop	{r3, pc}
   d6c80:	00030240 	.word	0x00030240

000d6c84 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6c84:	b508      	push	{r3, lr}
   d6c86:	4b02      	ldr	r3, [pc, #8]	; (d6c90 <network_ready+0xc>)
   d6c88:	681b      	ldr	r3, [r3, #0]
   d6c8a:	691b      	ldr	r3, [r3, #16]
   d6c8c:	9301      	str	r3, [sp, #4]
   d6c8e:	bd08      	pop	{r3, pc}
   d6c90:	00030240 	.word	0x00030240

000d6c94 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6c94:	b508      	push	{r3, lr}
   d6c96:	4b02      	ldr	r3, [pc, #8]	; (d6ca0 <network_on+0xc>)
   d6c98:	681b      	ldr	r3, [r3, #0]
   d6c9a:	695b      	ldr	r3, [r3, #20]
   d6c9c:	9301      	str	r3, [sp, #4]
   d6c9e:	bd08      	pop	{r3, pc}
   d6ca0:	00030240 	.word	0x00030240

000d6ca4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6ca4:	b508      	push	{r3, lr}
   d6ca6:	4b02      	ldr	r3, [pc, #8]	; (d6cb0 <network_off+0xc>)
   d6ca8:	681b      	ldr	r3, [r3, #0]
   d6caa:	699b      	ldr	r3, [r3, #24]
   d6cac:	9301      	str	r3, [sp, #4]
   d6cae:	bd08      	pop	{r3, pc}
   d6cb0:	00030240 	.word	0x00030240

000d6cb4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6cb4:	b508      	push	{r3, lr}
   d6cb6:	4b02      	ldr	r3, [pc, #8]	; (d6cc0 <network_listen+0xc>)
   d6cb8:	681b      	ldr	r3, [r3, #0]
   d6cba:	69db      	ldr	r3, [r3, #28]
   d6cbc:	9301      	str	r3, [sp, #4]
   d6cbe:	bd08      	pop	{r3, pc}
   d6cc0:	00030240 	.word	0x00030240

000d6cc4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6cc4:	b508      	push	{r3, lr}
   d6cc6:	4b02      	ldr	r3, [pc, #8]	; (d6cd0 <network_listening+0xc>)
   d6cc8:	681b      	ldr	r3, [r3, #0]
   d6cca:	6a1b      	ldr	r3, [r3, #32]
   d6ccc:	9301      	str	r3, [sp, #4]
   d6cce:	bd08      	pop	{r3, pc}
   d6cd0:	00030240 	.word	0x00030240

000d6cd4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6cd4:	b508      	push	{r3, lr}
   d6cd6:	4b02      	ldr	r3, [pc, #8]	; (d6ce0 <network_set_listen_timeout+0xc>)
   d6cd8:	681b      	ldr	r3, [r3, #0]
   d6cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6cdc:	9301      	str	r3, [sp, #4]
   d6cde:	bd08      	pop	{r3, pc}
   d6ce0:	00030240 	.word	0x00030240

000d6ce4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6ce4:	b508      	push	{r3, lr}
   d6ce6:	4b02      	ldr	r3, [pc, #8]	; (d6cf0 <network_get_listen_timeout+0xc>)
   d6ce8:	681b      	ldr	r3, [r3, #0]
   d6cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6cec:	9301      	str	r3, [sp, #4]
   d6cee:	bd08      	pop	{r3, pc}
   d6cf0:	00030240 	.word	0x00030240

000d6cf4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d6cf4:	b508      	push	{r3, lr}
   d6cf6:	4b02      	ldr	r3, [pc, #8]	; (d6d00 <network_is_on+0xc>)
   d6cf8:	681b      	ldr	r3, [r3, #0]
   d6cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6cfc:	9301      	str	r3, [sp, #4]
   d6cfe:	bd08      	pop	{r3, pc}
   d6d00:	00030240 	.word	0x00030240

000d6d04 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d6d04:	b508      	push	{r3, lr}
   d6d06:	4b02      	ldr	r3, [pc, #8]	; (d6d10 <network_is_off+0xc>)
   d6d08:	681b      	ldr	r3, [r3, #0]
   d6d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6d0c:	9301      	str	r3, [sp, #4]
   d6d0e:	bd08      	pop	{r3, pc}
   d6d10:	00030240 	.word	0x00030240

000d6d14 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6d14:	b508      	push	{r3, lr}
   d6d16:	4b02      	ldr	r3, [pc, #8]	; (d6d20 <spark_process+0xc>)
   d6d18:	681b      	ldr	r3, [r3, #0]
   d6d1a:	689b      	ldr	r3, [r3, #8]
   d6d1c:	9301      	str	r3, [sp, #4]
   d6d1e:	bd08      	pop	{r3, pc}
   d6d20:	00030244 	.word	0x00030244

000d6d24 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6d24:	b508      	push	{r3, lr}
   d6d26:	4b02      	ldr	r3, [pc, #8]	; (d6d30 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6d28:	681b      	ldr	r3, [r3, #0]
   d6d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6d2c:	9301      	str	r3, [sp, #4]
   d6d2e:	bd08      	pop	{r3, pc}
   d6d30:	00030244 	.word	0x00030244

000d6d34 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6d34:	b508      	push	{r3, lr}
   d6d36:	4b02      	ldr	r3, [pc, #8]	; (d6d40 <malloc+0xc>)
   d6d38:	681b      	ldr	r3, [r3, #0]
   d6d3a:	681b      	ldr	r3, [r3, #0]
   d6d3c:	9301      	str	r3, [sp, #4]
   d6d3e:	bd08      	pop	{r3, pc}
   d6d40:	0003021c 	.word	0x0003021c

000d6d44 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6d44:	b508      	push	{r3, lr}
   d6d46:	4b02      	ldr	r3, [pc, #8]	; (d6d50 <free+0xc>)
   d6d48:	681b      	ldr	r3, [r3, #0]
   d6d4a:	685b      	ldr	r3, [r3, #4]
   d6d4c:	9301      	str	r3, [sp, #4]
   d6d4e:	bd08      	pop	{r3, pc}
   d6d50:	0003021c 	.word	0x0003021c

000d6d54 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6d54:	b508      	push	{r3, lr}
   d6d56:	4b02      	ldr	r3, [pc, #8]	; (d6d60 <snprintf+0xc>)
   d6d58:	681b      	ldr	r3, [r3, #0]
   d6d5a:	69db      	ldr	r3, [r3, #28]
   d6d5c:	9301      	str	r3, [sp, #4]
   d6d5e:	bd08      	pop	{r3, pc}
   d6d60:	0003021c 	.word	0x0003021c

000d6d64 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6d64:	b508      	push	{r3, lr}
   d6d66:	4b02      	ldr	r3, [pc, #8]	; (d6d70 <vsnprintf+0xc>)
   d6d68:	681b      	ldr	r3, [r3, #0]
   d6d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6d6c:	9301      	str	r3, [sp, #4]
   d6d6e:	bd08      	pop	{r3, pc}
   d6d70:	0003021c 	.word	0x0003021c

000d6d74 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6d74:	b508      	push	{r3, lr}
   d6d76:	4b02      	ldr	r3, [pc, #8]	; (d6d80 <__errno+0xc>)
   d6d78:	681b      	ldr	r3, [r3, #0]
   d6d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6d7c:	9301      	str	r3, [sp, #4]
   d6d7e:	bd08      	pop	{r3, pc}
   d6d80:	0003021c 	.word	0x0003021c

000d6d84 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6d84:	b508      	push	{r3, lr}
   d6d86:	4b02      	ldr	r3, [pc, #8]	; (d6d90 <newlib_impure_ptr_callback+0xc>)
   d6d88:	681b      	ldr	r3, [r3, #0]
   d6d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6d8c:	9301      	str	r3, [sp, #4]
   d6d8e:	bd08      	pop	{r3, pc}
   d6d90:	0003021c 	.word	0x0003021c

000d6d94 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6d94:	2200      	movs	r2, #0
   d6d96:	6840      	ldr	r0, [r0, #4]
   d6d98:	4611      	mov	r1, r2
   d6d9a:	f7ff bf93 	b.w	d6cc4 <network_listening>

000d6d9e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6d9e:	2200      	movs	r2, #0
   d6da0:	6840      	ldr	r0, [r0, #4]
   d6da2:	4611      	mov	r1, r2
   d6da4:	f7ff bf9e 	b.w	d6ce4 <network_get_listen_timeout>

000d6da8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6da8:	6840      	ldr	r0, [r0, #4]
   d6daa:	2200      	movs	r2, #0
   d6dac:	f7ff bf92 	b.w	d6cd4 <network_set_listen_timeout>

000d6db0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6db0:	6840      	ldr	r0, [r0, #4]
   d6db2:	2200      	movs	r2, #0
   d6db4:	f081 0101 	eor.w	r1, r1, #1
   d6db8:	f7ff bf7c 	b.w	d6cb4 <network_listen>

000d6dbc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6dbc:	2300      	movs	r3, #0
   d6dbe:	6840      	ldr	r0, [r0, #4]
   d6dc0:	461a      	mov	r2, r3
   d6dc2:	4619      	mov	r1, r3
   d6dc4:	f7ff bf6e 	b.w	d6ca4 <network_off>

000d6dc8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6dc8:	2300      	movs	r3, #0
   d6dca:	6840      	ldr	r0, [r0, #4]
   d6dcc:	461a      	mov	r2, r3
   d6dce:	4619      	mov	r1, r3
   d6dd0:	f7ff bf60 	b.w	d6c94 <network_on>

000d6dd4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6dd4:	2200      	movs	r2, #0
   d6dd6:	6840      	ldr	r0, [r0, #4]
   d6dd8:	4611      	mov	r1, r2
   d6dda:	f7ff bf53 	b.w	d6c84 <network_ready>

000d6dde <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6dde:	2200      	movs	r2, #0
   d6de0:	6840      	ldr	r0, [r0, #4]
   d6de2:	4611      	mov	r1, r2
   d6de4:	f7ff bf3e 	b.w	d6c64 <network_connecting>

000d6de8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6de8:	6840      	ldr	r0, [r0, #4]
   d6dea:	2200      	movs	r2, #0
   d6dec:	2102      	movs	r1, #2
   d6dee:	f7ff bf41 	b.w	d6c74 <network_disconnect>

000d6df2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6df2:	2300      	movs	r3, #0
   d6df4:	6840      	ldr	r0, [r0, #4]
   d6df6:	461a      	mov	r2, r3
   d6df8:	f7ff bf2c 	b.w	d6c54 <network_connect>

000d6dfc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6dfc:	4b02      	ldr	r3, [pc, #8]	; (d6e08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6dfe:	2203      	movs	r2, #3
   d6e00:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6e02:	4a02      	ldr	r2, [pc, #8]	; (d6e0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6e04:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6e06:	4770      	bx	lr
   d6e08:	2003e650 	.word	0x2003e650
   d6e0c:	000d9d48 	.word	0x000d9d48

000d6e10 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d6e10:	2100      	movs	r1, #0
   d6e12:	f7ff be9b 	b.w	d6b4c <hal_spi_acquire>

000d6e16 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d6e16:	2100      	movs	r1, #0
   d6e18:	f7ff bea0 	b.w	d6b5c <hal_spi_release>

000d6e1c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6e1c:	b510      	push	{r4, lr}
   d6e1e:	4604      	mov	r4, r0
   d6e20:	4608      	mov	r0, r1
{
    _spi = spi;
   d6e22:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6e24:	f7ff fe72 	bl	d6b0c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6e28:	2300      	movs	r3, #0
   d6e2a:	6063      	str	r3, [r4, #4]
}
   d6e2c:	4620      	mov	r0, r4
   d6e2e:	bd10      	pop	{r4, pc}

000d6e30 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6e30:	b510      	push	{r4, lr}
   d6e32:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6e34:	7800      	ldrb	r0, [r0, #0]
   d6e36:	f7ff ffeb 	bl	d6e10 <_ZN8SPIClass4lockEv.isra.0>
   d6e3a:	b948      	cbnz	r0, d6e50 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d6e3c:	7820      	ldrb	r0, [r4, #0]
   d6e3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6e42:	f7ff fe53 	bl	d6aec <hal_spi_begin>
        unlock();
   d6e46:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6e4c:	f7ff bfe3 	b.w	d6e16 <_ZN8SPIClass6unlockEv.isra.0>
}
   d6e50:	bd10      	pop	{r4, pc}

000d6e52 <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
   d6e52:	b513      	push	{r0, r1, r4, lr}
   d6e54:	4604      	mov	r4, r0
    if (!lock())
   d6e56:	7800      	ldrb	r0, [r0, #0]
{
   d6e58:	9101      	str	r1, [sp, #4]
    if (!lock())
   d6e5a:	f7ff ffd9 	bl	d6e10 <_ZN8SPIClass4lockEv.isra.0>
   d6e5e:	9901      	ldr	r1, [sp, #4]
   d6e60:	b940      	cbnz	r0, d6e74 <_ZN8SPIClass5beginEt+0x22>
    {
        hal_spi_begin(_spi, ss_pin);
   d6e62:	7820      	ldrb	r0, [r4, #0]
   d6e64:	f7ff fe42 	bl	d6aec <hal_spi_begin>
        unlock();
   d6e68:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6e6a:	b002      	add	sp, #8
   d6e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6e70:	f7ff bfd1 	b.w	d6e16 <_ZN8SPIClass6unlockEv.isra.0>
}
   d6e74:	b002      	add	sp, #8
   d6e76:	bd10      	pop	{r4, pc}

000d6e78 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6e78:	7800      	ldrb	r0, [r0, #0]
   d6e7a:	f7ff bfcc 	b.w	d6e16 <_ZN8SPIClass6unlockEv.isra.0>
	...

000d6e80 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6e80:	0840      	lsrs	r0, r0, #1
{
   d6e82:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d6e84:	6018      	str	r0, [r3, #0]
   d6e86:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6e88:	6818      	ldr	r0, [r3, #0]
   d6e8a:	4288      	cmp	r0, r1
   d6e8c:	b2e5      	uxtb	r5, r4
   d6e8e:	d906      	bls.n	d6e9e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6e90:	3401      	adds	r4, #1
   d6e92:	2c08      	cmp	r4, #8
   d6e94:	d002      	beq.n	d6e9c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6e96:	0840      	lsrs	r0, r0, #1
   d6e98:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d6e9a:	e7f5      	b.n	d6e88 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6e9c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6e9e:	4b02      	ldr	r3, [pc, #8]	; (d6ea8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6ea0:	5d5b      	ldrb	r3, [r3, r5]
   d6ea2:	7013      	strb	r3, [r2, #0]
}
   d6ea4:	bd30      	pop	{r4, r5, pc}
   d6ea6:	bf00      	nop
   d6ea8:	000d9d7c 	.word	0x000d9d7c

000d6eac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d6eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6eb0:	4606      	mov	r6, r0
   d6eb2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d6eb4:	7800      	ldrb	r0, [r0, #0]
{
   d6eb6:	460c      	mov	r4, r1
    CHECK(lock());
   d6eb8:	f7ff ffaa 	bl	d6e10 <_ZN8SPIClass4lockEv.isra.0>
   d6ebc:	2800      	cmp	r0, #0
   d6ebe:	db1b      	blt.n	d6ef8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6ec0:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d6ec2:	2214      	movs	r2, #20
   d6ec4:	2100      	movs	r1, #0
   d6ec6:	a809      	add	r0, sp, #36	; 0x24
   d6ec8:	f001 fa3c 	bl	d8344 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6ecc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6ece:	2200      	movs	r2, #0
   d6ed0:	a909      	add	r1, sp, #36	; 0x24
   d6ed2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d6ed4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d6ed8:	f7ff fe28 	bl	d6b2c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d6edc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d6ee0:	b113      	cbz	r3, d6ee8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d6ee2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6ee6:	b155      	cbz	r5, d6efe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d6ee8:	2700      	movs	r7, #0
   d6eea:	46b9      	mov	r9, r7
   d6eec:	46b8      	mov	r8, r7
   d6eee:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d6ef0:	7923      	ldrb	r3, [r4, #4]
   d6ef2:	b15d      	cbz	r5, d6f0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d6ef4:	b1c3      	cbz	r3, d6f28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d6ef6:	2000      	movs	r0, #0
}
   d6ef8:	b00f      	add	sp, #60	; 0x3c
   d6efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d6efe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6f02:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6f06:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d6f0a:	e7f1      	b.n	d6ef0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d6f0c:	2b00      	cmp	r3, #0
   d6f0e:	d135      	bne.n	d6f7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d6f10:	68a3      	ldr	r3, [r4, #8]
   d6f12:	4543      	cmp	r3, r8
   d6f14:	d108      	bne.n	d6f28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d6f16:	f88d 9020 	strb.w	r9, [sp, #32]
   d6f1a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6f1e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6f22:	89a3      	ldrh	r3, [r4, #12]
   d6f24:	429a      	cmp	r2, r3
   d6f26:	d0e6      	beq.n	d6ef6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d6f28:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6f2a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d6f2c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6f30:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6f32:	ab04      	add	r3, sp, #16
   d6f34:	f10d 020f 	add.w	r2, sp, #15
   d6f38:	f7ff ffa2 	bl	d6e80 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d6f3c:	7921      	ldrb	r1, [r4, #4]
   d6f3e:	b985      	cbnz	r5, d6f62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d6f40:	b989      	cbnz	r1, d6f66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6f42:	68a3      	ldr	r3, [r4, #8]
   d6f44:	4543      	cmp	r3, r8
   d6f46:	d30e      	bcc.n	d6f66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d6f48:	f88d 9020 	strb.w	r9, [sp, #32]
   d6f4c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6f50:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6f54:	89a3      	ldrh	r3, [r4, #12]
   d6f56:	429a      	cmp	r2, r3
   d6f58:	d105      	bne.n	d6f66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6f5a:	9b04      	ldr	r3, [sp, #16]
   d6f5c:	4543      	cmp	r3, r8
   d6f5e:	d102      	bne.n	d6f66 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6f60:	e7c9      	b.n	d6ef6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d6f62:	2900      	cmp	r1, #0
   d6f64:	d1f9      	bne.n	d6f5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d6f66:	2300      	movs	r3, #0
   d6f68:	9301      	str	r3, [sp, #4]
   d6f6a:	7b63      	ldrb	r3, [r4, #13]
   d6f6c:	9300      	str	r3, [sp, #0]
   d6f6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6f72:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6f74:	7830      	ldrb	r0, [r6, #0]
   d6f76:	f7ff fde1 	bl	d6b3c <hal_spi_set_settings>
   d6f7a:	e7bc      	b.n	d6ef6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d6f7c:	e9cd 5500 	strd	r5, r5, [sp]
   d6f80:	462b      	mov	r3, r5
   d6f82:	462a      	mov	r2, r5
   d6f84:	2101      	movs	r1, #1
   d6f86:	e7f5      	b.n	d6f74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d6f88 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6f88:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d6f8a:	7800      	ldrb	r0, [r0, #0]
   d6f8c:	f7ff fdb6 	bl	d6afc <hal_spi_transfer>
}
   d6f90:	b2c0      	uxtb	r0, r0
   d6f92:	bd08      	pop	{r3, pc}

000d6f94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6f94:	b510      	push	{r4, lr}
   d6f96:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6f98:	6800      	ldr	r0, [r0, #0]
   d6f9a:	b118      	cbz	r0, d6fa4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6f9c:	f7ff fed2 	bl	d6d44 <free>
            wakeupSource_ = nullptr;
   d6fa0:	2300      	movs	r3, #0
   d6fa2:	6023      	str	r3, [r4, #0]
        }
    }
   d6fa4:	bd10      	pop	{r4, pc}

000d6fa6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6fa6:	b510      	push	{r4, lr}
   d6fa8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6faa:	f7ff fff3 	bl	d6f94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6fae:	4620      	mov	r0, r4
   d6fb0:	bd10      	pop	{r4, pc}
	...

000d6fb4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6fb4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6fb6:	4b09      	ldr	r3, [pc, #36]	; (d6fdc <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6fb8:	4c09      	ldr	r4, [pc, #36]	; (d6fe0 <_GLOBAL__sub_I_System+0x2c>)
   d6fba:	2202      	movs	r2, #2
   d6fbc:	2000      	movs	r0, #0
   d6fbe:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6fc0:	4b08      	ldr	r3, [pc, #32]	; (d6fe4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6fc2:	6020      	str	r0, [r4, #0]
   d6fc4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6fc6:	71a0      	strb	r0, [r4, #6]
   d6fc8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6fca:	f7ff fe17 	bl	d6bfc <set_system_mode>
SystemClass System;
   d6fce:	4620      	mov	r0, r4
   d6fd0:	4a05      	ldr	r2, [pc, #20]	; (d6fe8 <_GLOBAL__sub_I_System+0x34>)
   d6fd2:	4906      	ldr	r1, [pc, #24]	; (d6fec <_GLOBAL__sub_I_System+0x38>)
   d6fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6fd8:	f001 b874 	b.w	d80c4 <__aeabi_atexit>
   d6fdc:	2003e664 	.word	0x2003e664
   d6fe0:	2003e658 	.word	0x2003e658
   d6fe4:	ffff0000 	.word	0xffff0000
   d6fe8:	2003e534 	.word	0x2003e534
   d6fec:	000d6fa7 	.word	0x000d6fa7

000d6ff0 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d6ff0:	b570      	push	{r4, r5, r6, lr}
   d6ff2:	b086      	sub	sp, #24
   d6ff4:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d6ff6:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d6ff8:	4668      	mov	r0, sp
   d6ffa:	f000 fa33 	bl	d7464 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7000:	1d34      	adds	r4, r6, #4
   d7002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7004:	682b      	ldr	r3, [r5, #0]
   d7006:	7023      	strb	r3, [r4, #0]
    }
   d7008:	4630      	mov	r0, r6
   d700a:	b006      	add	sp, #24
   d700c:	bd70      	pop	{r4, r5, r6, pc}

000d700e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d700e:	b510      	push	{r4, lr}
   d7010:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7012:	6800      	ldr	r0, [r0, #0]
   d7014:	b108      	cbz	r0, d701a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d7016:	f7ff fc81 	bl	d691c <os_mutex_recursive_destroy>
    }
   d701a:	4620      	mov	r0, r4
   d701c:	bd10      	pop	{r4, pc}

000d701e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d701e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7020:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d7022:	4604      	mov	r4, r0
      if (_M_manager)
   d7024:	b113      	cbz	r3, d702c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7026:	2203      	movs	r2, #3
   d7028:	4601      	mov	r1, r0
   d702a:	4798      	blx	r3
    }
   d702c:	4620      	mov	r0, r4
   d702e:	bd10      	pop	{r4, pc}

000d7030 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7030:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7032:	4c06      	ldr	r4, [pc, #24]	; (d704c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7034:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7036:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7038:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d703a:	f7ff fc67 	bl	d690c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d703e:	4620      	mov	r0, r4
   d7040:	4a03      	ldr	r2, [pc, #12]	; (d7050 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7042:	4904      	ldr	r1, [pc, #16]	; (d7054 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7048:	f001 b83c 	b.w	d80c4 <__aeabi_atexit>
   d704c:	2003e668 	.word	0x2003e668
   d7050:	2003e534 	.word	0x2003e534
   d7054:	000d700f 	.word	0x000d700f

000d7058 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d705a:	4606      	mov	r6, r0
   d705c:	460d      	mov	r5, r1
  size_t n = 0;
   d705e:	188f      	adds	r7, r1, r2
   d7060:	2400      	movs	r4, #0
  while (size--) {
   d7062:	42bd      	cmp	r5, r7
   d7064:	d00c      	beq.n	d7080 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7066:	6833      	ldr	r3, [r6, #0]
   d7068:	f815 1b01 	ldrb.w	r1, [r5], #1
   d706c:	689b      	ldr	r3, [r3, #8]
   d706e:	4630      	mov	r0, r6
   d7070:	4798      	blx	r3
     if (chunk>=0)
   d7072:	1e03      	subs	r3, r0, #0
   d7074:	db01      	blt.n	d707a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7076:	441c      	add	r4, r3
  while (size--) {
   d7078:	e7f3      	b.n	d7062 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d707a:	2c00      	cmp	r4, #0
   d707c:	bf08      	it	eq
   d707e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7080:	4620      	mov	r0, r4
   d7082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7084 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7084:	b513      	push	{r0, r1, r4, lr}
   d7086:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7088:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d708a:	b159      	cbz	r1, d70a4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d708c:	9101      	str	r1, [sp, #4]
   d708e:	f001 f98f 	bl	d83b0 <strlen>
   d7092:	6823      	ldr	r3, [r4, #0]
   d7094:	9901      	ldr	r1, [sp, #4]
   d7096:	68db      	ldr	r3, [r3, #12]
   d7098:	4602      	mov	r2, r0
   d709a:	4620      	mov	r0, r4
    }
   d709c:	b002      	add	sp, #8
   d709e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d70a2:	4718      	bx	r3
    }
   d70a4:	b002      	add	sp, #8
   d70a6:	bd10      	pop	{r4, pc}

000d70a8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d70a8:	b508      	push	{r3, lr}
  return write(str);
   d70aa:	f7ff ffeb 	bl	d7084 <_ZN5Print5writeEPKc>
}
   d70ae:	bd08      	pop	{r3, pc}

000d70b0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d70b0:	6803      	ldr	r3, [r0, #0]
   d70b2:	689b      	ldr	r3, [r3, #8]
   d70b4:	4718      	bx	r3

000d70b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d70b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d70b8:	210d      	movs	r1, #13
{
   d70ba:	4605      	mov	r5, r0
  size_t n = print('\r');
   d70bc:	f7ff fff8 	bl	d70b0 <_ZN5Print5printEc>
  n += print('\n');
   d70c0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d70c2:	4604      	mov	r4, r0
  n += print('\n');
   d70c4:	4628      	mov	r0, r5
   d70c6:	f7ff fff3 	bl	d70b0 <_ZN5Print5printEc>
  return n;
}
   d70ca:	4420      	add	r0, r4
   d70cc:	bd38      	pop	{r3, r4, r5, pc}

000d70ce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d70ce:	b538      	push	{r3, r4, r5, lr}
   d70d0:	4605      	mov	r5, r0
  return write(str);
   d70d2:	f7ff ffd7 	bl	d7084 <_ZN5Print5writeEPKc>
   d70d6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d70d8:	4628      	mov	r0, r5
   d70da:	f7ff ffec 	bl	d70b6 <_ZN5Print7printlnEv>
  return n;
}
   d70de:	4420      	add	r0, r4
   d70e0:	bd38      	pop	{r3, r4, r5, pc}

000d70e2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d70e2:	b530      	push	{r4, r5, lr}
   d70e4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d70e6:	2300      	movs	r3, #0
   d70e8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d70ec:	2a01      	cmp	r2, #1
   d70ee:	bf98      	it	ls
   d70f0:	220a      	movls	r2, #10
   d70f2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d70f4:	460d      	mov	r5, r1
   d70f6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d70fa:	fb01 5312 	mls	r3, r1, r2, r5
   d70fe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7102:	2b09      	cmp	r3, #9
   d7104:	bf94      	ite	ls
   d7106:	3330      	addls	r3, #48	; 0x30
   d7108:	3337      	addhi	r3, #55	; 0x37
   d710a:	b2db      	uxtb	r3, r3
  } while(n);
   d710c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d710e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7112:	d9ef      	bls.n	d70f4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7114:	4621      	mov	r1, r4
   d7116:	f7ff ffb5 	bl	d7084 <_ZN5Print5writeEPKc>
}
   d711a:	b00b      	add	sp, #44	; 0x2c
   d711c:	bd30      	pop	{r4, r5, pc}

000d711e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d711e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7122:	b086      	sub	sp, #24
   d7124:	af00      	add	r7, sp, #0
   d7126:	4605      	mov	r5, r0
   d7128:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d712a:	1d38      	adds	r0, r7, #4
   d712c:	2114      	movs	r1, #20
{
   d712e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7130:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7132:	f7ff fe17 	bl	d6d64 <vsnprintf>

    if (n<bufsize)
   d7136:	2813      	cmp	r0, #19
   d7138:	d80e      	bhi.n	d7158 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d713a:	1d39      	adds	r1, r7, #4
   d713c:	4628      	mov	r0, r5
   d713e:	f7ff ffa1 	bl	d7084 <_ZN5Print5writeEPKc>
   d7142:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7144:	b11e      	cbz	r6, d714e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d7146:	4628      	mov	r0, r5
   d7148:	f7ff ffb5 	bl	d70b6 <_ZN5Print7printlnEv>
   d714c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d714e:	4620      	mov	r0, r4
   d7150:	3718      	adds	r7, #24
   d7152:	46bd      	mov	sp, r7
   d7154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7158:	f100 0308 	add.w	r3, r0, #8
   d715c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7160:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7162:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d7166:	4622      	mov	r2, r4
   d7168:	1c41      	adds	r1, r0, #1
   d716a:	683b      	ldr	r3, [r7, #0]
   d716c:	4668      	mov	r0, sp
   d716e:	f7ff fdf9 	bl	d6d64 <vsnprintf>
  return write(str);
   d7172:	4669      	mov	r1, sp
   d7174:	4628      	mov	r0, r5
   d7176:	f7ff ff85 	bl	d7084 <_ZN5Print5writeEPKc>
   d717a:	4604      	mov	r4, r0
   d717c:	46c5      	mov	sp, r8
   d717e:	e7e1      	b.n	d7144 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7180 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d7180:	b510      	push	{r4, lr}
   d7182:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d7184:	f7ff fbaa 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d7188:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d718a:	6823      	ldr	r3, [r4, #0]
   d718c:	4620      	mov	r0, r4
   d718e:	695b      	ldr	r3, [r3, #20]
   d7190:	4798      	blx	r3
    if (c >= 0) return c;
   d7192:	2800      	cmp	r0, #0
   d7194:	da08      	bge.n	d71a8 <_ZN6Stream9timedReadEv+0x28>
   d7196:	f7ff fba1 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d719a:	68e3      	ldr	r3, [r4, #12]
   d719c:	1ac0      	subs	r0, r0, r3
   d719e:	68a3      	ldr	r3, [r4, #8]
   d71a0:	4298      	cmp	r0, r3
   d71a2:	d3f2      	bcc.n	d718a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d71a4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d71a8:	bd10      	pop	{r4, pc}

000d71aa <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d71aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d71ac:	4606      	mov	r6, r0
   d71ae:	460d      	mov	r5, r1
   d71b0:	4617      	mov	r7, r2
  size_t count = 0;
   d71b2:	2400      	movs	r4, #0
  while (count < length) {
   d71b4:	42bc      	cmp	r4, r7
   d71b6:	d007      	beq.n	d71c8 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d71b8:	4630      	mov	r0, r6
   d71ba:	f7ff ffe1 	bl	d7180 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d71be:	1e03      	subs	r3, r0, #0
   d71c0:	db02      	blt.n	d71c8 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d71c2:	552b      	strb	r3, [r5, r4]
    count++;
   d71c4:	3401      	adds	r4, #1
  while (count < length) {
   d71c6:	e7f5      	b.n	d71b4 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d71c8:	4620      	mov	r0, r4
   d71ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d71cc <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d71cc:	2300      	movs	r3, #0
   d71ce:	6840      	ldr	r0, [r0, #4]
   d71d0:	461a      	mov	r2, r3
   d71d2:	4619      	mov	r1, r3
   d71d4:	f7ff bd5e 	b.w	d6c94 <network_on>

000d71d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d71d8:	4b01      	ldr	r3, [pc, #4]	; (d71e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d71da:	4a02      	ldr	r2, [pc, #8]	; (d71e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d71dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d71de:	4770      	bx	lr
   d71e0:	2003e66c 	.word	0x2003e66c
   d71e4:	000d9d8c 	.word	0x000d9d8c

000d71e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d71e8:	4b02      	ldr	r3, [pc, #8]	; (d71f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d71ea:	681a      	ldr	r2, [r3, #0]
   d71ec:	4b02      	ldr	r3, [pc, #8]	; (d71f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d71ee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d71f0:	4770      	bx	lr
   d71f2:	bf00      	nop
   d71f4:	2003e4cc 	.word	0x2003e4cc
   d71f8:	2003e670 	.word	0x2003e670

000d71fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d71fc:	2100      	movs	r1, #0
   d71fe:	f7ff bd05 	b.w	d6c0c <system_delay_ms>

000d7202 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7202:	b510      	push	{r4, lr}
   d7204:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7206:	f7ff ff0a 	bl	d701e <_ZNSt14_Function_baseD1Ev>
   d720a:	4620      	mov	r0, r4
   d720c:	bd10      	pop	{r4, pc}
	...

000d7210 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7210:	4803      	ldr	r0, [pc, #12]	; (d7220 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7212:	4a04      	ldr	r2, [pc, #16]	; (d7224 <_GLOBAL__sub_I_RGB+0x14>)
   d7214:	4904      	ldr	r1, [pc, #16]	; (d7228 <_GLOBAL__sub_I_RGB+0x18>)
   d7216:	2300      	movs	r3, #0
   d7218:	6083      	str	r3, [r0, #8]
   d721a:	f000 bf53 	b.w	d80c4 <__aeabi_atexit>
   d721e:	bf00      	nop
   d7220:	2003e674 	.word	0x2003e674
   d7224:	2003e534 	.word	0x2003e534
   d7228:	000d7203 	.word	0x000d7203

000d722c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d722c:	4b01      	ldr	r3, [pc, #4]	; (d7234 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d722e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7230:	4770      	bx	lr
   d7232:	bf00      	nop
   d7234:	2003e4d0 	.word	0x2003e4d0

000d7238 <serialEventRun>:
{
   d7238:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d723a:	4b0b      	ldr	r3, [pc, #44]	; (d7268 <serialEventRun+0x30>)
   d723c:	b143      	cbz	r3, d7250 <serialEventRun+0x18>
   d723e:	f000 f97d 	bl	d753c <_Z16_fetch_usbserialv>
   d7242:	6803      	ldr	r3, [r0, #0]
   d7244:	691b      	ldr	r3, [r3, #16]
   d7246:	4798      	blx	r3
   d7248:	2800      	cmp	r0, #0
   d724a:	dd01      	ble.n	d7250 <serialEventRun+0x18>
        serialEvent();
   d724c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7250:	4b06      	ldr	r3, [pc, #24]	; (d726c <serialEventRun+0x34>)
   d7252:	b143      	cbz	r3, d7266 <serialEventRun+0x2e>
   d7254:	f000 f9f0 	bl	d7638 <_Z22__fetch_global_Serial1v>
   d7258:	6803      	ldr	r3, [r0, #0]
   d725a:	691b      	ldr	r3, [r3, #16]
   d725c:	4798      	blx	r3
   d725e:	2800      	cmp	r0, #0
   d7260:	dd01      	ble.n	d7266 <serialEventRun+0x2e>
        serialEvent1();
   d7262:	f3af 8000 	nop.w
}
   d7266:	bd08      	pop	{r3, pc}
	...

000d7270 <_post_loop>:
{
   d7270:	b508      	push	{r3, lr}
	serialEventRun();
   d7272:	f7ff ffe1 	bl	d7238 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7276:	f7ff fb31 	bl	d68dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d727a:	4b01      	ldr	r3, [pc, #4]	; (d7280 <_post_loop+0x10>)
   d727c:	6018      	str	r0, [r3, #0]
}
   d727e:	bd08      	pop	{r3, pc}
   d7280:	2003e7d4 	.word	0x2003e7d4

000d7284 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7284:	4802      	ldr	r0, [pc, #8]	; (d7290 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7286:	4a03      	ldr	r2, [pc, #12]	; (d7294 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7288:	4903      	ldr	r1, [pc, #12]	; (d7298 <_Z33system_initialize_user_backup_ramv+0x14>)
   d728a:	1a12      	subs	r2, r2, r0
   d728c:	f001 b84c 	b.w	d8328 <memcpy>
   d7290:	2003f400 	.word	0x2003f400
   d7294:	2003f404 	.word	0x2003f404
   d7298:	000da160 	.word	0x000da160

000d729c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d729c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d729e:	2300      	movs	r3, #0
   d72a0:	9300      	str	r3, [sp, #0]
   d72a2:	461a      	mov	r2, r3
   d72a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d72a8:	f7ff fcca 	bl	d6c40 <system_ctrl_set_result>
}
   d72ac:	b003      	add	sp, #12
   d72ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d72b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d72b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d72b6:	8843      	ldrh	r3, [r0, #2]
   d72b8:	2b0a      	cmp	r3, #10
   d72ba:	d008      	beq.n	d72ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d72bc:	2b50      	cmp	r3, #80	; 0x50
   d72be:	d10b      	bne.n	d72d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d72c0:	4b09      	ldr	r3, [pc, #36]	; (d72e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d72c2:	681b      	ldr	r3, [r3, #0]
   d72c4:	b14b      	cbz	r3, d72da <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d72c6:	b003      	add	sp, #12
   d72c8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d72cc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d72ce:	f7ff ffe5 	bl	d729c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d72d2:	b003      	add	sp, #12
   d72d4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d72d8:	2300      	movs	r3, #0
   d72da:	9300      	str	r3, [sp, #0]
   d72dc:	461a      	mov	r2, r3
   d72de:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d72e2:	f7ff fcad 	bl	d6c40 <system_ctrl_set_result>
}
   d72e6:	e7f4      	b.n	d72d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d72e8:	2003e688 	.word	0x2003e688

000d72ec <module_user_init_hook>:
{
   d72ec:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d72ee:	4c12      	ldr	r4, [pc, #72]	; (d7338 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d72f0:	4812      	ldr	r0, [pc, #72]	; (d733c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d72f2:	4d13      	ldr	r5, [pc, #76]	; (d7340 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d72f4:	2100      	movs	r1, #0
   d72f6:	f7ff fd45 	bl	d6d84 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d72fa:	6823      	ldr	r3, [r4, #0]
   d72fc:	42ab      	cmp	r3, r5
   d72fe:	4b11      	ldr	r3, [pc, #68]	; (d7344 <module_user_init_hook+0x58>)
   d7300:	bf0c      	ite	eq
   d7302:	2201      	moveq	r2, #1
   d7304:	2200      	movne	r2, #0
   d7306:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7308:	d002      	beq.n	d7310 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d730a:	f7ff ffbb 	bl	d7284 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d730e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7310:	f7ff fad4 	bl	d68bc <HAL_RNG_GetRandomNumber>
   d7314:	4604      	mov	r4, r0
    srand(seed);
   d7316:	f001 f81d 	bl	d8354 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d731a:	4b0b      	ldr	r3, [pc, #44]	; (d7348 <module_user_init_hook+0x5c>)
   d731c:	b113      	cbz	r3, d7324 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d731e:	4620      	mov	r0, r4
   d7320:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7324:	2100      	movs	r1, #0
   d7326:	4808      	ldr	r0, [pc, #32]	; (d7348 <module_user_init_hook+0x5c>)
   d7328:	f7ff fcfc 	bl	d6d24 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d732c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7330:	4806      	ldr	r0, [pc, #24]	; (d734c <module_user_init_hook+0x60>)
   d7332:	2100      	movs	r1, #0
   d7334:	f7ff bc7a 	b.w	d6c2c <system_ctrl_set_app_request_handler>
   d7338:	2003f400 	.word	0x2003f400
   d733c:	000d722d 	.word	0x000d722d
   d7340:	9a271c1e 	.word	0x9a271c1e
   d7344:	2003e684 	.word	0x2003e684
   d7348:	00000000 	.word	0x00000000
   d734c:	000d72b5 	.word	0x000d72b5

000d7350 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d7350:	4770      	bx	lr

000d7352 <_ZN9IPAddressD0Ev>:
   d7352:	b510      	push	{r4, lr}
   d7354:	2118      	movs	r1, #24
   d7356:	4604      	mov	r4, r0
   d7358:	f000 feb9 	bl	d80ce <_ZdlPvj>
   d735c:	4620      	mov	r0, r4
   d735e:	bd10      	pop	{r4, pc}

000d7360 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7360:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7362:	7d03      	ldrb	r3, [r0, #20]
   d7364:	2b06      	cmp	r3, #6
{
   d7366:	b08d      	sub	sp, #52	; 0x34
   d7368:	460e      	mov	r6, r1
   d736a:	f100 0704 	add.w	r7, r0, #4
   d736e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7372:	d012      	beq.n	d739a <_ZNK9IPAddress7printToER5Print+0x3a>
   d7374:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7378:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d737c:	220a      	movs	r2, #10
   d737e:	4630      	mov	r0, r6
   d7380:	f7ff feaf 	bl	d70e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7384:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7386:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7388:	d019      	beq.n	d73be <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d738a:	2c00      	cmp	r4, #0
   d738c:	d0f4      	beq.n	d7378 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d738e:	212e      	movs	r1, #46	; 0x2e
   d7390:	4630      	mov	r0, r6
   d7392:	f7ff fe8d 	bl	d70b0 <_ZN5Print5printEc>
   d7396:	4404      	add	r4, r0
   d7398:	e7ee      	b.n	d7378 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d739a:	232f      	movs	r3, #47	; 0x2f
   d739c:	466a      	mov	r2, sp
   d739e:	4639      	mov	r1, r7
   d73a0:	200a      	movs	r0, #10
		buf[0] = 0;
   d73a2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d73a6:	f7ff fac1 	bl	d692c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d73aa:	4668      	mov	r0, sp
   d73ac:	f001 f800 	bl	d83b0 <strlen>
   d73b0:	6833      	ldr	r3, [r6, #0]
   d73b2:	4602      	mov	r2, r0
   d73b4:	68db      	ldr	r3, [r3, #12]
   d73b6:	4669      	mov	r1, sp
   d73b8:	4630      	mov	r0, r6
   d73ba:	4798      	blx	r3
   d73bc:	4604      	mov	r4, r0
    }
    return n;
}
   d73be:	4620      	mov	r0, r4
   d73c0:	b00d      	add	sp, #52	; 0x34
   d73c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d73c4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d73c4:	b510      	push	{r4, lr}
   d73c6:	4b05      	ldr	r3, [pc, #20]	; (d73dc <_ZN9IPAddressC1Ev+0x18>)
   d73c8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d73ca:	2211      	movs	r2, #17
   d73cc:	f840 3b04 	str.w	r3, [r0], #4
   d73d0:	2100      	movs	r1, #0
   d73d2:	f000 ffb7 	bl	d8344 <memset>
}
   d73d6:	4620      	mov	r0, r4
   d73d8:	bd10      	pop	{r4, pc}
   d73da:	bf00      	nop
   d73dc:	000d9db4 	.word	0x000d9db4

000d73e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d73e0:	4603      	mov	r3, r0
   d73e2:	4a07      	ldr	r2, [pc, #28]	; (d7400 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d73e4:	b510      	push	{r4, lr}
   d73e6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d73ea:	f101 0210 	add.w	r2, r1, #16
   d73ee:	f851 4b04 	ldr.w	r4, [r1], #4
   d73f2:	f843 4b04 	str.w	r4, [r3], #4
   d73f6:	4291      	cmp	r1, r2
   d73f8:	d1f9      	bne.n	d73ee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d73fa:	780a      	ldrb	r2, [r1, #0]
   d73fc:	701a      	strb	r2, [r3, #0]
}
   d73fe:	bd10      	pop	{r4, pc}
   d7400:	000d9db4 	.word	0x000d9db4

000d7404 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7404:	7d03      	ldrb	r3, [r0, #20]
   d7406:	2b04      	cmp	r3, #4
   d7408:	d104      	bne.n	d7414 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d740a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d740c:	3800      	subs	r0, #0
   d740e:	bf18      	it	ne
   d7410:	2001      	movne	r0, #1
   d7412:	4770      	bx	lr
    } else if (version() == 6) {
   d7414:	2b06      	cmp	r3, #6
   d7416:	d107      	bne.n	d7428 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7418:	6843      	ldr	r3, [r0, #4]
   d741a:	b93b      	cbnz	r3, d742c <_ZNK9IPAddresscvbEv+0x28>
   d741c:	6883      	ldr	r3, [r0, #8]
   d741e:	b92b      	cbnz	r3, d742c <_ZNK9IPAddresscvbEv+0x28>
   d7420:	68c3      	ldr	r3, [r0, #12]
   d7422:	b91b      	cbnz	r3, d742c <_ZNK9IPAddresscvbEv+0x28>
   d7424:	6900      	ldr	r0, [r0, #16]
   d7426:	e7f1      	b.n	d740c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7428:	2000      	movs	r0, #0
   d742a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d742c:	2001      	movs	r0, #1
}
   d742e:	4770      	bx	lr

000d7430 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7430:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7432:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7436:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d743a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d743e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7442:	2304      	movs	r3, #4
   d7444:	6041      	str	r1, [r0, #4]
   d7446:	7503      	strb	r3, [r0, #20]
}
   d7448:	bd10      	pop	{r4, pc}
	...

000d744c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d744c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d744e:	4d04      	ldr	r5, [pc, #16]	; (d7460 <_ZN9IPAddressC1Ehhhh+0x14>)
   d7450:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d7452:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d7456:	9500      	str	r5, [sp, #0]
   d7458:	f7ff ffea 	bl	d7430 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d745c:	b003      	add	sp, #12
   d745e:	bd30      	pop	{r4, r5, pc}
   d7460:	000d9db4 	.word	0x000d9db4

000d7464 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7464:	b513      	push	{r0, r1, r4, lr}
   d7466:	4b05      	ldr	r3, [pc, #20]	; (d747c <_ZN9IPAddressC1EPKh+0x18>)
   d7468:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d746a:	78cb      	ldrb	r3, [r1, #3]
   d746c:	9300      	str	r3, [sp, #0]
   d746e:	788b      	ldrb	r3, [r1, #2]
   d7470:	784a      	ldrb	r2, [r1, #1]
   d7472:	7809      	ldrb	r1, [r1, #0]
   d7474:	f7ff ffdc 	bl	d7430 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7478:	b002      	add	sp, #8
   d747a:	bd10      	pop	{r4, pc}
   d747c:	000d9db4 	.word	0x000d9db4

000d7480 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7480:	7441      	strb	r1, [r0, #17]
}
   d7482:	4770      	bx	lr

000d7484 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7484:	4770      	bx	lr

000d7486 <_ZN9USBSerial4readEv>:
{
   d7486:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7488:	2100      	movs	r1, #0
   d748a:	7c00      	ldrb	r0, [r0, #16]
   d748c:	f7ff fb8e 	bl	d6bac <HAL_USB_USART_Receive_Data>
}
   d7490:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7494:	bd08      	pop	{r3, pc}

000d7496 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7496:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7498:	2101      	movs	r1, #1
   d749a:	7c00      	ldrb	r0, [r0, #16]
   d749c:	f7ff fb86 	bl	d6bac <HAL_USB_USART_Receive_Data>
}
   d74a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d74a4:	bd08      	pop	{r3, pc}

000d74a6 <_ZN9USBSerial17availableForWriteEv>:
{
   d74a6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d74a8:	7c00      	ldrb	r0, [r0, #16]
   d74aa:	f7ff fb77 	bl	d6b9c <HAL_USB_USART_Available_Data_For_Write>
}
   d74ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d74b2:	bd08      	pop	{r3, pc}

000d74b4 <_ZN9USBSerial9availableEv>:
{
   d74b4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d74b6:	7c00      	ldrb	r0, [r0, #16]
   d74b8:	f7ff fb68 	bl	d6b8c <HAL_USB_USART_Available_Data>
}
   d74bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d74c0:	bd08      	pop	{r3, pc}

000d74c2 <_ZN9USBSerial5writeEh>:
{
   d74c2:	b513      	push	{r0, r1, r4, lr}
   d74c4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d74c6:	7c00      	ldrb	r0, [r0, #16]
{
   d74c8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d74ca:	f7ff fb67 	bl	d6b9c <HAL_USB_USART_Available_Data_For_Write>
   d74ce:	2800      	cmp	r0, #0
   d74d0:	9901      	ldr	r1, [sp, #4]
   d74d2:	dc01      	bgt.n	d74d8 <_ZN9USBSerial5writeEh+0x16>
   d74d4:	7c60      	ldrb	r0, [r4, #17]
   d74d6:	b120      	cbz	r0, d74e2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d74d8:	7c20      	ldrb	r0, [r4, #16]
   d74da:	f7ff fb6f 	bl	d6bbc <HAL_USB_USART_Send_Data>
   d74de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d74e2:	b002      	add	sp, #8
   d74e4:	bd10      	pop	{r4, pc}

000d74e6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d74e6:	7c00      	ldrb	r0, [r0, #16]
   d74e8:	f7ff bb70 	b.w	d6bcc <HAL_USB_USART_Flush_Data>

000d74ec <_ZN9USBSerialD0Ev>:
   d74ec:	b510      	push	{r4, lr}
   d74ee:	2114      	movs	r1, #20
   d74f0:	4604      	mov	r4, r0
   d74f2:	f000 fdec 	bl	d80ce <_ZdlPvj>
   d74f6:	4620      	mov	r0, r4
   d74f8:	bd10      	pop	{r4, pc}
	...

000d74fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d74fc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d74fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7502:	4604      	mov	r4, r0
   d7504:	4608      	mov	r0, r1
   d7506:	2100      	movs	r1, #0
   d7508:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d750c:	4b04      	ldr	r3, [pc, #16]	; (d7520 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d750e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7510:	2301      	movs	r3, #1
  _serial = serial;
   d7512:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7514:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7516:	4611      	mov	r1, r2
   d7518:	f7ff fb28 	bl	d6b6c <HAL_USB_USART_Init>
}
   d751c:	4620      	mov	r0, r4
   d751e:	bd10      	pop	{r4, pc}
   d7520:	000d9dc8 	.word	0x000d9dc8

000d7524 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7524:	7c00      	ldrb	r0, [r0, #16]
   d7526:	2200      	movs	r2, #0
   d7528:	f7ff bb28 	b.w	d6b7c <HAL_USB_USART_Begin>

000d752c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d752c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d752e:	2214      	movs	r2, #20
{
   d7530:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7532:	2100      	movs	r1, #0
   d7534:	f000 ff06 	bl	d8344 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7538:	4620      	mov	r0, r4
   d753a:	bd10      	pop	{r4, pc}

000d753c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d753c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d753e:	4c10      	ldr	r4, [pc, #64]	; (d7580 <_Z16_fetch_usbserialv+0x44>)
{
   d7540:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7542:	a803      	add	r0, sp, #12
   d7544:	f7ff fff2 	bl	d752c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7548:	7821      	ldrb	r1, [r4, #0]
   d754a:	f3bf 8f5b 	dmb	ish
   d754e:	f011 0101 	ands.w	r1, r1, #1
   d7552:	d111      	bne.n	d7578 <_Z16_fetch_usbserialv+0x3c>
   d7554:	4620      	mov	r0, r4
   d7556:	9101      	str	r1, [sp, #4]
   d7558:	f7fc fdac 	bl	d40b4 <__cxa_guard_acquire>
   d755c:	9901      	ldr	r1, [sp, #4]
   d755e:	b158      	cbz	r0, d7578 <_Z16_fetch_usbserialv+0x3c>
   d7560:	aa03      	add	r2, sp, #12
   d7562:	4808      	ldr	r0, [pc, #32]	; (d7584 <_Z16_fetch_usbserialv+0x48>)
   d7564:	f7ff ffca 	bl	d74fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7568:	4620      	mov	r0, r4
   d756a:	f7fc fda8 	bl	d40be <__cxa_guard_release>
   d756e:	4a06      	ldr	r2, [pc, #24]	; (d7588 <_Z16_fetch_usbserialv+0x4c>)
   d7570:	4906      	ldr	r1, [pc, #24]	; (d758c <_Z16_fetch_usbserialv+0x50>)
   d7572:	4804      	ldr	r0, [pc, #16]	; (d7584 <_Z16_fetch_usbserialv+0x48>)
   d7574:	f000 fda6 	bl	d80c4 <__aeabi_atexit>
	return _usbserial;
}
   d7578:	4802      	ldr	r0, [pc, #8]	; (d7584 <_Z16_fetch_usbserialv+0x48>)
   d757a:	b008      	add	sp, #32
   d757c:	bd10      	pop	{r4, pc}
   d757e:	bf00      	nop
   d7580:	2003e68c 	.word	0x2003e68c
   d7584:	2003e690 	.word	0x2003e690
   d7588:	2003e534 	.word	0x2003e534
   d758c:	000d7485 	.word	0x000d7485

000d7590 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7590:	4770      	bx	lr

000d7592 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7592:	7441      	strb	r1, [r0, #17]
}
   d7594:	4770      	bx	lr

000d7596 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7596:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7598:	7c00      	ldrb	r0, [r0, #16]
   d759a:	f7ff fa17 	bl	d69cc <hal_usart_available_data_for_write>
}
   d759e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d75a2:	bd08      	pop	{r3, pc}

000d75a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d75a4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d75a6:	7c00      	ldrb	r0, [r0, #16]
   d75a8:	f7ff f9e8 	bl	d697c <hal_usart_available>
}
   d75ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d75b0:	bd08      	pop	{r3, pc}

000d75b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d75b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d75b4:	7c00      	ldrb	r0, [r0, #16]
   d75b6:	f7ff f9f1 	bl	d699c <hal_usart_peek>
}
   d75ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d75be:	bd08      	pop	{r3, pc}

000d75c0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d75c0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d75c2:	7c00      	ldrb	r0, [r0, #16]
   d75c4:	f7ff f9e2 	bl	d698c <hal_usart_read>
}
   d75c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d75cc:	bd08      	pop	{r3, pc}

000d75ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d75ce:	7c00      	ldrb	r0, [r0, #16]
   d75d0:	f7ff b9ec 	b.w	d69ac <hal_usart_flush>

000d75d4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d75d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d75d6:	7c45      	ldrb	r5, [r0, #17]
{
   d75d8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d75da:	b12d      	cbz	r5, d75e8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d75dc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d75de:	b003      	add	sp, #12
   d75e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d75e4:	f7ff b9c2 	b.w	d696c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d75e8:	7c00      	ldrb	r0, [r0, #16]
   d75ea:	9101      	str	r1, [sp, #4]
   d75ec:	f7ff f9ee 	bl	d69cc <hal_usart_available_data_for_write>
   d75f0:	2800      	cmp	r0, #0
   d75f2:	9901      	ldr	r1, [sp, #4]
   d75f4:	dcf2      	bgt.n	d75dc <_ZN11USARTSerial5writeEh+0x8>
}
   d75f6:	4628      	mov	r0, r5
   d75f8:	b003      	add	sp, #12
   d75fa:	bd30      	pop	{r4, r5, pc}

000d75fc <_ZN11USARTSerialD0Ev>:
   d75fc:	b510      	push	{r4, lr}
   d75fe:	2114      	movs	r1, #20
   d7600:	4604      	mov	r4, r0
   d7602:	f000 fd64 	bl	d80ce <_ZdlPvj>
   d7606:	4620      	mov	r0, r4
   d7608:	bd10      	pop	{r4, pc}
	...

000d760c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d760c:	b510      	push	{r4, lr}
   d760e:	f04f 0c00 	mov.w	ip, #0
   d7612:	4604      	mov	r4, r0
   d7614:	4608      	mov	r0, r1
   d7616:	4611      	mov	r1, r2
   d7618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d761c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7620:	4a04      	ldr	r2, [pc, #16]	; (d7634 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7622:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7624:	2201      	movs	r2, #1
  _serial = serial;
   d7626:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7628:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d762a:	461a      	mov	r2, r3
   d762c:	f7ff f996 	bl	d695c <hal_usart_init>
}
   d7630:	4620      	mov	r0, r4
   d7632:	bd10      	pop	{r4, pc}
   d7634:	000d9df8 	.word	0x000d9df8

000d7638 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7638:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d763a:	4c0e      	ldr	r4, [pc, #56]	; (d7674 <_Z22__fetch_global_Serial1v+0x3c>)
   d763c:	7821      	ldrb	r1, [r4, #0]
   d763e:	f3bf 8f5b 	dmb	ish
   d7642:	f011 0101 	ands.w	r1, r1, #1
   d7646:	d112      	bne.n	d766e <_Z22__fetch_global_Serial1v+0x36>
   d7648:	4620      	mov	r0, r4
   d764a:	9101      	str	r1, [sp, #4]
   d764c:	f7fc fd32 	bl	d40b4 <__cxa_guard_acquire>
   d7650:	9901      	ldr	r1, [sp, #4]
   d7652:	b160      	cbz	r0, d766e <_Z22__fetch_global_Serial1v+0x36>
   d7654:	4a08      	ldr	r2, [pc, #32]	; (d7678 <_Z22__fetch_global_Serial1v+0x40>)
   d7656:	4b09      	ldr	r3, [pc, #36]	; (d767c <_Z22__fetch_global_Serial1v+0x44>)
   d7658:	4809      	ldr	r0, [pc, #36]	; (d7680 <_Z22__fetch_global_Serial1v+0x48>)
   d765a:	f7ff ffd7 	bl	d760c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d765e:	4620      	mov	r0, r4
   d7660:	f7fc fd2d 	bl	d40be <__cxa_guard_release>
   d7664:	4a07      	ldr	r2, [pc, #28]	; (d7684 <_Z22__fetch_global_Serial1v+0x4c>)
   d7666:	4908      	ldr	r1, [pc, #32]	; (d7688 <_Z22__fetch_global_Serial1v+0x50>)
   d7668:	4805      	ldr	r0, [pc, #20]	; (d7680 <_Z22__fetch_global_Serial1v+0x48>)
   d766a:	f000 fd2b 	bl	d80c4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d766e:	4804      	ldr	r0, [pc, #16]	; (d7680 <_Z22__fetch_global_Serial1v+0x48>)
   d7670:	b002      	add	sp, #8
   d7672:	bd10      	pop	{r4, pc}
   d7674:	2003e6a4 	.word	0x2003e6a4
   d7678:	2003e6a8 	.word	0x2003e6a8
   d767c:	2003e72c 	.word	0x2003e72c
   d7680:	2003e7b0 	.word	0x2003e7b0
   d7684:	2003e534 	.word	0x2003e534
   d7688:	000d7591 	.word	0x000d7591

000d768c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d768c:	4770      	bx	lr

000d768e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d768e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7690:	4606      	mov	r6, r0
   d7692:	4615      	mov	r5, r2
   d7694:	460c      	mov	r4, r1
   d7696:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7698:	42bc      	cmp	r4, r7
   d769a:	d006      	beq.n	d76aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d769c:	6833      	ldr	r3, [r6, #0]
   d769e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d76a2:	689b      	ldr	r3, [r3, #8]
   d76a4:	4630      	mov	r0, r6
   d76a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d76a8:	e7f6      	b.n	d7698 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d76aa:	4628      	mov	r0, r5
   d76ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d76ae:	7c00      	ldrb	r0, [r0, #16]
   d76b0:	2200      	movs	r2, #0
   d76b2:	f7ff b9b3 	b.w	d6a1c <hal_i2c_write>

000d76b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d76b6:	7c00      	ldrb	r0, [r0, #16]
   d76b8:	2100      	movs	r1, #0
   d76ba:	f7ff b9b7 	b.w	d6a2c <hal_i2c_available>

000d76be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d76be:	7c00      	ldrb	r0, [r0, #16]
   d76c0:	2100      	movs	r1, #0
   d76c2:	f7ff b9bb 	b.w	d6a3c <hal_i2c_read>

000d76c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d76c6:	7c00      	ldrb	r0, [r0, #16]
   d76c8:	2100      	movs	r1, #0
   d76ca:	f7ff b9bf 	b.w	d6a4c <hal_i2c_peek>

000d76ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d76ce:	7c00      	ldrb	r0, [r0, #16]
   d76d0:	2100      	movs	r1, #0
   d76d2:	f7ff b9c3 	b.w	d6a5c <hal_i2c_flush>

000d76d6 <_ZN7TwoWireD0Ev>:
   d76d6:	b510      	push	{r4, lr}
   d76d8:	2114      	movs	r1, #20
   d76da:	4604      	mov	r4, r0
   d76dc:	f000 fcf7 	bl	d80ce <_ZdlPvj>
   d76e0:	4620      	mov	r0, r4
   d76e2:	bd10      	pop	{r4, pc}

000d76e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d76e4:	b510      	push	{r4, lr}
   d76e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d76ea:	4604      	mov	r4, r0
   d76ec:	4608      	mov	r0, r1
   d76ee:	2100      	movs	r1, #0
   d76f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d76f4:	4b03      	ldr	r3, [pc, #12]	; (d7704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d76f6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d76f8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d76fa:	4611      	mov	r1, r2
   d76fc:	f7ff f9be 	bl	d6a7c <hal_i2c_init>
}
   d7700:	4620      	mov	r0, r4
   d7702:	bd10      	pop	{r4, pc}
   d7704:	000d9e28 	.word	0x000d9e28

000d7708 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d7708:	7c00      	ldrb	r0, [r0, #16]
   d770a:	2200      	movs	r2, #0
   d770c:	f7ff b966 	b.w	d69dc <hal_i2c_set_speed>

000d7710 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7710:	2300      	movs	r3, #0
   d7712:	7c00      	ldrb	r0, [r0, #16]
   d7714:	461a      	mov	r2, r3
   d7716:	4619      	mov	r1, r3
   d7718:	f7ff b968 	b.w	d69ec <hal_i2c_begin>

000d771c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d771c:	7c00      	ldrb	r0, [r0, #16]
   d771e:	2200      	movs	r2, #0
   d7720:	f7ff b96c 	b.w	d69fc <hal_i2c_begin_transmission>

000d7724 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7724:	b2c9      	uxtb	r1, r1
   d7726:	f7ff bff9 	b.w	d771c <_ZN7TwoWire17beginTransmissionEh>

000d772a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d772a:	7c00      	ldrb	r0, [r0, #16]
   d772c:	2200      	movs	r2, #0
   d772e:	f7ff b96d 	b.w	d6a0c <hal_i2c_end_transmission>

000d7732 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7732:	2101      	movs	r1, #1
   d7734:	f7ff bff9 	b.w	d772a <_ZN7TwoWire15endTransmissionEh>

000d7738 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7738:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d773a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d773c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7740:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7742:	2201      	movs	r2, #1
   d7744:	f04f 33ff 	mov.w	r3, #4294967295
   d7748:	f10d 0107 	add.w	r1, sp, #7
   d774c:	47a0      	blx	r4
}
   d774e:	b002      	add	sp, #8
   d7750:	bd10      	pop	{r4, pc}

000d7752 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7752:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7754:	6803      	ldr	r3, [r0, #0]
   d7756:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7758:	f04f 33ff 	mov.w	r3, #4294967295
   d775c:	46a4      	mov	ip, r4
}
   d775e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7762:	4760      	bx	ip

000d7764 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7764:	b513      	push	{r0, r1, r4, lr}
   d7766:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d7768:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d776a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d776e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7770:	f10d 0107 	add.w	r1, sp, #7
   d7774:	2201      	movs	r2, #1
   d7776:	47a0      	blx	r4
}
   d7778:	b002      	add	sp, #8
   d777a:	bd10      	pop	{r4, pc}

000d777c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d777c:	4770      	bx	lr

000d777e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d777e:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7780:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7782:	681a      	ldr	r2, [r3, #0]
   d7784:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d7786:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d7788:	da10      	bge.n	d77ac <_ZN9TCPClient9connectedEv+0x2e>
   d778a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d778e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7792:	429a      	cmp	r2, r3
   d7794:	d10a      	bne.n	d77ac <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d7796:	6803      	ldr	r3, [r0, #0]
   d7798:	691b      	ldr	r3, [r3, #16]
   d779a:	4798      	blx	r3
        if (!rv) {
   d779c:	4604      	mov	r4, r0
   d779e:	b928      	cbnz	r0, d77ac <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d77a0:	682b      	ldr	r3, [r5, #0]
   d77a2:	4628      	mov	r0, r5
   d77a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d77a6:	4798      	blx	r3
        rv = available();
   d77a8:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d77aa:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d77ac:	2001      	movs	r0, #1
   d77ae:	e7fc      	b.n	d77aa <_ZN9TCPClient9connectedEv+0x2c>

000d77b0 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d77b0:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d77b2:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d77b4:	43c0      	mvns	r0, r0
   d77b6:	0fc0      	lsrs	r0, r0, #31
   d77b8:	4770      	bx	lr

000d77ba <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d77ba:	4770      	bx	lr

000d77bc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d77bc:	4b06      	ldr	r3, [pc, #24]	; (d77d8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d77be:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d77c0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d77c2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d77c6:	d005      	beq.n	d77d4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d77c8:	4608      	mov	r0, r1
   d77ca:	f000 fc85 	bl	d80d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d77ce:	2800      	cmp	r0, #0
	return nullptr;
   d77d0:	bf08      	it	eq
   d77d2:	2400      	moveq	r4, #0
      }
   d77d4:	4620      	mov	r0, r4
   d77d6:	bd10      	pop	{r4, pc}
   d77d8:	000d9d84 	.word	0x000d9d84

000d77dc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d77dc:	b510      	push	{r4, lr}
   d77de:	21ac      	movs	r1, #172	; 0xac
   d77e0:	4604      	mov	r4, r0
   d77e2:	f000 fc74 	bl	d80ce <_ZdlPvj>
   d77e6:	4620      	mov	r0, r4
   d77e8:	bd10      	pop	{r4, pc}

000d77ea <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d77ea:	f7fc bc56 	b.w	d409a <_ZdlPv>

000d77ee <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d77ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d77f2:	f04f 0800 	mov.w	r8, #0
   d77f6:	b086      	sub	sp, #24
   d77f8:	461d      	mov	r5, r3
   d77fa:	f8c0 8004 	str.w	r8, [r0, #4]
   d77fe:	4604      	mov	r4, r0
   d7800:	460e      	mov	r6, r1
   d7802:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7804:	4641      	mov	r1, r8
   d7806:	2210      	movs	r2, #16
   d7808:	a802      	add	r0, sp, #8
   d780a:	f000 fd9b 	bl	d8344 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d780e:	1c6b      	adds	r3, r5, #1
   d7810:	d009      	beq.n	d7826 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d7812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7816:	fbb5 f3f0 	udiv	r3, r5, r0
   d781a:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d781e:	fb00 5313 	mls	r3, r0, r3, r5
   d7822:	4358      	muls	r0, r3
   d7824:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7826:	6960      	ldr	r0, [r4, #20]
   d7828:	2310      	movs	r3, #16
   d782a:	9300      	str	r3, [sp, #0]
   d782c:	6800      	ldr	r0, [r0, #0]
   d782e:	ab02      	add	r3, sp, #8
   d7830:	f241 0205 	movw	r2, #4101	; 0x1005
   d7834:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7838:	f7ff f928 	bl	d6a8c <sock_setsockopt>
    if (ret < 0) {
   d783c:	2800      	cmp	r0, #0
   d783e:	da07      	bge.n	d7850 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d7840:	f7ff fa98 	bl	d6d74 <__errno>
   d7844:	6803      	ldr	r3, [r0, #0]
   d7846:	6063      	str	r3, [r4, #4]
        return 0;
   d7848:	2000      	movs	r0, #0
}
   d784a:	b006      	add	sp, #24
   d784c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d7850:	6960      	ldr	r0, [r4, #20]
   d7852:	2300      	movs	r3, #0
   d7854:	6800      	ldr	r0, [r0, #0]
   d7856:	463a      	mov	r2, r7
   d7858:	4631      	mov	r1, r6
   d785a:	f7ff f937 	bl	d6acc <sock_send>
    if (ret < 0) {
   d785e:	1e03      	subs	r3, r0, #0
   d7860:	dbee      	blt.n	d7840 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d7862:	4618      	mov	r0, r3
   d7864:	e7f1      	b.n	d784a <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d7868 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d7868:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d786a:	6984      	ldr	r4, [r0, #24]
   d786c:	4b0a      	ldr	r3, [pc, #40]	; (d7898 <_ZN9TCPClientD1Ev+0x30>)
   d786e:	6003      	str	r3, [r0, #0]
   d7870:	4605      	mov	r5, r0
   d7872:	b17c      	cbz	r4, d7894 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d7874:	6863      	ldr	r3, [r4, #4]
   d7876:	3b01      	subs	r3, #1
   d7878:	6063      	str	r3, [r4, #4]
   d787a:	b95b      	cbnz	r3, d7894 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d787c:	6823      	ldr	r3, [r4, #0]
   d787e:	4620      	mov	r0, r4
   d7880:	689b      	ldr	r3, [r3, #8]
   d7882:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7884:	68a3      	ldr	r3, [r4, #8]
   d7886:	3b01      	subs	r3, #1
   d7888:	60a3      	str	r3, [r4, #8]
   d788a:	b91b      	cbnz	r3, d7894 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d788c:	6823      	ldr	r3, [r4, #0]
   d788e:	4620      	mov	r0, r4
   d7890:	68db      	ldr	r3, [r3, #12]
   d7892:	4798      	blx	r3
   d7894:	4628      	mov	r0, r5
   d7896:	bd38      	pop	{r3, r4, r5, pc}
   d7898:	000d9e84 	.word	0x000d9e84

000d789c <_ZN9TCPClientD0Ev>:
   d789c:	b510      	push	{r4, lr}
   d789e:	4604      	mov	r4, r0
   d78a0:	f7ff ffe2 	bl	d7868 <_ZN9TCPClientD1Ev>
   d78a4:	4620      	mov	r0, r4
   d78a6:	211c      	movs	r1, #28
   d78a8:	f000 fc11 	bl	d80ce <_ZdlPvj>
   d78ac:	4620      	mov	r0, r4
   d78ae:	bd10      	pop	{r4, pc}

000d78b0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d78b0:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d78b2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d78b4:	4b05      	ldr	r3, [pc, #20]	; (d78cc <_ZN9TCPClient8remoteIPEv+0x1c>)
   d78b6:	4604      	mov	r4, r0
   d78b8:	358c      	adds	r5, #140	; 0x8c
   d78ba:	f844 3b04 	str.w	r3, [r4], #4
   d78be:	4606      	mov	r6, r0
   d78c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d78c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d78c4:	682b      	ldr	r3, [r5, #0]
   d78c6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d78c8:	4630      	mov	r0, r6
   d78ca:	bd70      	pop	{r4, r5, r6, pc}
   d78cc:	000d9db4 	.word	0x000d9db4

000d78d0 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d78d0:	b510      	push	{r4, lr}
   d78d2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d78d4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d78d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d78dc:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d78de:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d78e0:	d005      	beq.n	d78ee <_ZN9TCPClient4peekEv+0x1e>
   d78e2:	6963      	ldr	r3, [r4, #20]
   d78e4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d78e8:	4413      	add	r3, r2
   d78ea:	7918      	ldrb	r0, [r3, #4]
}
   d78ec:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d78ee:	6803      	ldr	r3, [r0, #0]
   d78f0:	691b      	ldr	r3, [r3, #16]
   d78f2:	4798      	blx	r3
   d78f4:	2800      	cmp	r0, #0
   d78f6:	d1f4      	bne.n	d78e2 <_ZN9TCPClient4peekEv+0x12>
   d78f8:	f04f 30ff 	mov.w	r0, #4294967295
   d78fc:	e7f6      	b.n	d78ec <_ZN9TCPClient4peekEv+0x1c>

000d78fe <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d78fe:	b510      	push	{r4, lr}
   d7900:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7902:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7906:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d790a:	429a      	cmp	r2, r3
int TCPClient::read() {
   d790c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d790e:	d008      	beq.n	d7922 <_ZN9TCPClient4readEv+0x24>
   d7910:	6963      	ldr	r3, [r4, #20]
   d7912:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7916:	1c51      	adds	r1, r2, #1
   d7918:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d791c:	4413      	add	r3, r2
   d791e:	7918      	ldrb	r0, [r3, #4]
}
   d7920:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7922:	6803      	ldr	r3, [r0, #0]
   d7924:	691b      	ldr	r3, [r3, #16]
   d7926:	4798      	blx	r3
   d7928:	2800      	cmp	r0, #0
   d792a:	d1f1      	bne.n	d7910 <_ZN9TCPClient4readEv+0x12>
   d792c:	f04f 30ff 	mov.w	r0, #4294967295
   d7930:	e7f6      	b.n	d7920 <_ZN9TCPClient4readEv+0x22>

000d7932 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7934:	6943      	ldr	r3, [r0, #20]
   d7936:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d7938:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d793c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7940:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7942:	4605      	mov	r5, r0
   d7944:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d7946:	d016      	beq.n	d7976 <_ZN9TCPClient4readEPhj+0x44>
   d7948:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d794a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d794e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7952:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7954:	42bc      	cmp	r4, r7
   d7956:	bf28      	it	cs
   d7958:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d795a:	3304      	adds	r3, #4
   d795c:	4622      	mov	r2, r4
   d795e:	4419      	add	r1, r3
   d7960:	4630      	mov	r0, r6
   d7962:	f000 fce1 	bl	d8328 <memcpy>
   d7966:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7968:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d796c:	4423      	add	r3, r4
   d796e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d7972:	4620      	mov	r0, r4
   d7974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d7976:	6803      	ldr	r3, [r0, #0]
   d7978:	691b      	ldr	r3, [r3, #16]
   d797a:	4798      	blx	r3
   d797c:	2800      	cmp	r0, #0
   d797e:	d1e3      	bne.n	d7948 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7980:	f04f 34ff 	mov.w	r4, #4294967295
   d7984:	e7f5      	b.n	d7972 <_ZN9TCPClient4readEPhj+0x40>

000d7986 <_ZN9TCPClient12flush_bufferEv>:
   d7986:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7988:	2300      	movs	r3, #0
   d798a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d798e:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7990:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d7994:	4770      	bx	lr

000d7996 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d799a:	461f      	mov	r7, r3
    stop();
   d799c:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d799e:	460c      	mov	r4, r1
    stop();
   d79a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d79a2:	b08a      	sub	sp, #40	; 0x28
   d79a4:	4605      	mov	r5, r0
   d79a6:	4616      	mov	r6, r2
    stop();
   d79a8:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d79aa:	7d23      	ldrb	r3, [r4, #20]
   d79ac:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d79b0:	2b04      	cmp	r3, #4
   d79b2:	bf0c      	ite	eq
   d79b4:	2002      	moveq	r0, #2
   d79b6:	200a      	movne	r0, #10
   d79b8:	2206      	movs	r2, #6
   d79ba:	2101      	movs	r1, #1
   d79bc:	f7ff f88e 	bl	d6adc <sock_socket>
   d79c0:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d79c4:	696b      	ldr	r3, [r5, #20]
   d79c6:	681b      	ldr	r3, [r3, #0]
   d79c8:	2b00      	cmp	r3, #0
   d79ca:	da08      	bge.n	d79de <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d79cc:	682b      	ldr	r3, [r5, #0]
   d79ce:	4628      	mov	r0, r5
   d79d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d79d2:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d79d4:	4798      	blx	r3
}
   d79d6:	4620      	mov	r0, r4
   d79d8:	b00a      	add	sp, #40	; 0x28
   d79da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d79de:	4628      	mov	r0, r5
   d79e0:	f7ff ffd1 	bl	d7986 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d79e4:	b1b7      	cbz	r7, d7a14 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d79e6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d79e8:	a903      	add	r1, sp, #12
   d79ea:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d79ec:	9303      	str	r3, [sp, #12]
   d79ee:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d79f2:	f7fe ff5b 	bl	d68ac <if_index_to_name>
   d79f6:	2800      	cmp	r0, #0
   d79f8:	d1e8      	bne.n	d79cc <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d79fa:	6968      	ldr	r0, [r5, #20]
   d79fc:	2306      	movs	r3, #6
   d79fe:	9300      	str	r3, [sp, #0]
   d7a00:	6800      	ldr	r0, [r0, #0]
   d7a02:	ab03      	add	r3, sp, #12
   d7a04:	f241 020b 	movw	r2, #4107	; 0x100b
   d7a08:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7a0c:	f7ff f83e 	bl	d6a8c <sock_setsockopt>
   d7a10:	2800      	cmp	r0, #0
   d7a12:	d1db      	bne.n	d79cc <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d7a14:	221c      	movs	r2, #28
   d7a16:	2100      	movs	r1, #0
   d7a18:	a803      	add	r0, sp, #12
   d7a1a:	f000 fc93 	bl	d8344 <memset>
    if (ip.version() == 4) {
   d7a1e:	7d23      	ldrb	r3, [r4, #20]
   d7a20:	2b04      	cmp	r3, #4
   d7a22:	d11d      	bne.n	d7a60 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d7a24:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d7a28:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d7a2a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d7a2e:	f7fe ff8d 	bl	d694c <inet_htons>
   d7a32:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7a36:	6860      	ldr	r0, [r4, #4]
   d7a38:	f7fe ff80 	bl	d693c <inet_htonl>
   d7a3c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7a3e:	696b      	ldr	r3, [r5, #20]
   d7a40:	221c      	movs	r2, #28
   d7a42:	6818      	ldr	r0, [r3, #0]
   d7a44:	a903      	add	r1, sp, #12
   d7a46:	f7ff f831 	bl	d6aac <sock_connect>
   d7a4a:	2800      	cmp	r0, #0
   d7a4c:	d1be      	bne.n	d79cc <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7a4e:	3404      	adds	r4, #4
   d7a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7a52:	696d      	ldr	r5, [r5, #20]
   d7a54:	358c      	adds	r5, #140	; 0x8c
   d7a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7a58:	6823      	ldr	r3, [r4, #0]
   d7a5a:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d7a5c:	2401      	movs	r4, #1
   d7a5e:	e7ba      	b.n	d79d6 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d7a60:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d7a64:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d7a66:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d7a6a:	f7fe ff6f 	bl	d694c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7a6e:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7a70:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7a74:	1d23      	adds	r3, r4, #4
   d7a76:	f104 0714 	add.w	r7, r4, #20
   d7a7a:	6818      	ldr	r0, [r3, #0]
   d7a7c:	6859      	ldr	r1, [r3, #4]
   d7a7e:	4632      	mov	r2, r6
   d7a80:	c203      	stmia	r2!, {r0, r1}
   d7a82:	3308      	adds	r3, #8
   d7a84:	42bb      	cmp	r3, r7
   d7a86:	4616      	mov	r6, r2
   d7a88:	d1f7      	bne.n	d7a7a <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d7a8a:	e7d8      	b.n	d7a3e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d7a8c <_ZN9TCPClient9availableEv>:
{
   d7a8c:	b530      	push	{r4, r5, lr}
   d7a8e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7a90:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d7a94:	b08b      	sub	sp, #44	; 0x2c
   d7a96:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d7a98:	b12b      	cbz	r3, d7aa6 <_ZN9TCPClient9availableEv+0x1a>
   d7a9a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7a9e:	429a      	cmp	r2, r3
   d7aa0:	d101      	bne.n	d7aa6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d7aa2:	f7ff ff70 	bl	d7986 <_ZN9TCPClient12flush_bufferEv>
   d7aa6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d7aa8:	6808      	ldr	r0, [r1, #0]
   d7aaa:	2800      	cmp	r0, #0
   d7aac:	db18      	blt.n	d7ae0 <_ZN9TCPClient9availableEv+0x54>
   d7aae:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d7ab2:	2d7f      	cmp	r5, #127	; 0x7f
   d7ab4:	d814      	bhi.n	d7ae0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7ab6:	3104      	adds	r1, #4
   d7ab8:	2308      	movs	r3, #8
   d7aba:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7abe:	4429      	add	r1, r5
   d7ac0:	f7fe fffc 	bl	d6abc <sock_recv>
            if (ret > 0) {
   d7ac4:	2800      	cmp	r0, #0
   d7ac6:	dd13      	ble.n	d7af0 <_ZN9TCPClient9availableEv+0x64>
   d7ac8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7aca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7ace:	b90a      	cbnz	r2, d7ad4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7ad0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7ad4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d7ad6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7ada:	4410      	add	r0, r2
   d7adc:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7ae0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7ae2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d7ae6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d7aea:	1ac0      	subs	r0, r0, r3
   d7aec:	b00b      	add	sp, #44	; 0x2c
   d7aee:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7af0:	f7ff f940 	bl	d6d74 <__errno>
   d7af4:	6803      	ldr	r3, [r0, #0]
   d7af6:	2b0b      	cmp	r3, #11
   d7af8:	d0f2      	beq.n	d7ae0 <_ZN9TCPClient9availableEv+0x54>
   d7afa:	f7ff f93b 	bl	d6d74 <__errno>
   d7afe:	6803      	ldr	r3, [r0, #0]
   d7b00:	2b0b      	cmp	r3, #11
   d7b02:	d0ed      	beq.n	d7ae0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d7b04:	2320      	movs	r3, #32
   d7b06:	2500      	movs	r5, #0
   d7b08:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d7b0c:	f7ff f932 	bl	d6d74 <__errno>
   d7b10:	6803      	ldr	r3, [r0, #0]
   d7b12:	9301      	str	r3, [sp, #4]
   d7b14:	4b08      	ldr	r3, [pc, #32]	; (d7b38 <_ZN9TCPClient9availableEv+0xac>)
   d7b16:	4909      	ldr	r1, [pc, #36]	; (d7b3c <_ZN9TCPClient9availableEv+0xb0>)
   d7b18:	9300      	str	r3, [sp, #0]
   d7b1a:	aa02      	add	r2, sp, #8
   d7b1c:	462b      	mov	r3, r5
   d7b1e:	2032      	movs	r0, #50	; 0x32
   d7b20:	f7ff f864 	bl	d6bec <log_message>
                    sock_close(d_->sock);
   d7b24:	6963      	ldr	r3, [r4, #20]
   d7b26:	6818      	ldr	r0, [r3, #0]
   d7b28:	f7fe ffb8 	bl	d6a9c <sock_close>
   d7b2c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7b2e:	f04f 32ff 	mov.w	r2, #4294967295
   d7b32:	601a      	str	r2, [r3, #0]
   d7b34:	e7d4      	b.n	d7ae0 <_ZN9TCPClient9availableEv+0x54>
   d7b36:	bf00      	nop
   d7b38:	000d9e4f 	.word	0x000d9e4f
   d7b3c:	000d9e48 	.word	0x000d9e48

000d7b40 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d7b40:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7b42:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d7b44:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7b46:	6818      	ldr	r0, [r3, #0]
   d7b48:	2800      	cmp	r0, #0
   d7b4a:	db01      	blt.n	d7b50 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7b4c:	f7fe ffa6 	bl	d6a9c <sock_close>
   d7b50:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d7b52:	f04f 32ff 	mov.w	r2, #4294967295
   d7b56:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d7b58:	6960      	ldr	r0, [r4, #20]
   d7b5a:	2211      	movs	r2, #17
   d7b5c:	2100      	movs	r1, #0
   d7b5e:	308c      	adds	r0, #140	; 0x8c
   d7b60:	f000 fbf0 	bl	d8344 <memset>
    flush_buffer();
   d7b64:	4620      	mov	r0, r4
}
   d7b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d7b6a:	f7ff bf0c 	b.w	d7986 <_ZN9TCPClient12flush_bufferEv>

000d7b6e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d7b6e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7b70:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d7b72:	4604      	mov	r4, r0
          total(0) {
   d7b74:	6001      	str	r1, [r0, #0]
   d7b76:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d7b7a:	3088      	adds	r0, #136	; 0x88
   d7b7c:	f7ff fc22 	bl	d73c4 <_ZN9IPAddressC1Ev>
}
   d7b80:	4620      	mov	r0, r4
   d7b82:	bd10      	pop	{r4, pc}

000d7b84 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d7b84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7b86:	2300      	movs	r3, #0
   d7b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7b8c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d7b90:	4a0e      	ldr	r2, [pc, #56]	; (d7bcc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d7b92:	6103      	str	r3, [r0, #16]
   d7b94:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7b96:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d7b98:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7b9a:	20ac      	movs	r0, #172	; 0xac
   d7b9c:	9101      	str	r1, [sp, #4]
   d7b9e:	f7fc fa78 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d7ba2:	1e05      	subs	r5, r0, #0
   d7ba4:	f105 060c 	add.w	r6, r5, #12
   d7ba8:	d008      	beq.n	d7bbc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d7baa:	2301      	movs	r3, #1
   d7bac:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d7bb0:	4b07      	ldr	r3, [pc, #28]	; (d7bd0 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7bb2:	9901      	ldr	r1, [sp, #4]
   d7bb4:	602b      	str	r3, [r5, #0]
   d7bb6:	4630      	mov	r0, r6
   d7bb8:	f7ff ffd9 	bl	d7b6e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d7bbc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d7bbe:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d7bc2:	f7ff fee0 	bl	d7986 <_ZN9TCPClient12flush_bufferEv>
}
   d7bc6:	b002      	add	sp, #8
   d7bc8:	bd70      	pop	{r4, r5, r6, pc}
   d7bca:	bf00      	nop
   d7bcc:	000d9e84 	.word	0x000d9e84
   d7bd0:	000d9e68 	.word	0x000d9e68

000d7bd4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d7bd4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7bd6:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d7bda:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7bdc:	f7ff ffd2 	bl	d7b84 <_ZN9TCPClientC1Ei>
}
   d7be0:	4620      	mov	r0, r4
   d7be2:	bd10      	pop	{r4, pc}

000d7be4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d7be4:	b510      	push	{r4, lr}
   d7be6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7be8:	6800      	ldr	r0, [r0, #0]
   d7bea:	2800      	cmp	r0, #0
   d7bec:	db01      	blt.n	d7bf2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7bee:	f7fe ff55 	bl	d6a9c <sock_close>
    }
}
   d7bf2:	4620      	mov	r0, r4
   d7bf4:	bd10      	pop	{r4, pc}

000d7bf6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d7bf6:	300c      	adds	r0, #12
   d7bf8:	f7ff bff4 	b.w	d7be4 <_ZN9TCPClient4DataD1Ev>

000d7bfc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7c00:	4698      	mov	r8, r3
    stop();
   d7c02:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7c04:	b093      	sub	sp, #76	; 0x4c
   d7c06:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d7c08:	2400      	movs	r4, #0
    stop();
   d7c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7c0c:	4606      	mov	r6, r0
   d7c0e:	4617      	mov	r7, r2
    stop();
   d7c10:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7c12:	4628      	mov	r0, r5
   d7c14:	466b      	mov	r3, sp
   d7c16:	4622      	mov	r2, r4
   d7c18:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d7c1a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7c1c:	f7fe fdfe 	bl	d681c <netdb_getaddrinfo>
   d7c20:	4605      	mov	r5, r0
   d7c22:	2800      	cmp	r0, #0
   d7c24:	d163      	bne.n	d7cee <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d7c26:	9b00      	ldr	r3, [sp, #0]
   d7c28:	2b00      	cmp	r3, #0
   d7c2a:	d04b      	beq.n	d7cc4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7c2c:	695b      	ldr	r3, [r3, #20]
   d7c2e:	2b00      	cmp	r3, #0
   d7c30:	d048      	beq.n	d7cc4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d7c32:	a806      	add	r0, sp, #24
   d7c34:	f7ff fbc6 	bl	d73c4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7c38:	9b00      	ldr	r3, [sp, #0]
   d7c3a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7c3c:	7863      	ldrb	r3, [r4, #1]
   d7c3e:	2b02      	cmp	r3, #2
   d7c40:	d104      	bne.n	d7c4c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7c42:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7c44:	a806      	add	r0, sp, #24
   d7c46:	f7ff f9d3 	bl	d6ff0 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d7c4a:	e026      	b.n	d7c9a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d7c4c:	2b0a      	cmp	r3, #10
   d7c4e:	d124      	bne.n	d7c9a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d7c50:	2211      	movs	r2, #17
   d7c52:	4629      	mov	r1, r5
   d7c54:	a801      	add	r0, sp, #4
   d7c56:	f000 fb75 	bl	d8344 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7c5a:	68a3      	ldr	r3, [r4, #8]
   d7c5c:	2b00      	cmp	r3, #0
   d7c5e:	d038      	beq.n	d7cd2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7c60:	f104 0308 	add.w	r3, r4, #8
   d7c64:	f10d 0c04 	add.w	ip, sp, #4
   d7c68:	3418      	adds	r4, #24
   d7c6a:	6818      	ldr	r0, [r3, #0]
   d7c6c:	6859      	ldr	r1, [r3, #4]
   d7c6e:	4662      	mov	r2, ip
   d7c70:	c203      	stmia	r2!, {r0, r1}
   d7c72:	3308      	adds	r3, #8
   d7c74:	42a3      	cmp	r3, r4
   d7c76:	4694      	mov	ip, r2
   d7c78:	d1f7      	bne.n	d7c6a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d7c7a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7c7c:	a901      	add	r1, sp, #4
   d7c7e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d7c80:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7c84:	f7ff fbac 	bl	d73e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d7c88:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d7c8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7c90:	ac07      	add	r4, sp, #28
   d7c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7c94:	f8dc 3000 	ldr.w	r3, [ip]
   d7c98:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d7c9a:	a806      	add	r0, sp, #24
   d7c9c:	f7ff fbb2 	bl	d7404 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7ca0:	b180      	cbz	r0, d7cc4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d7ca2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d7ca4:	ad07      	add	r5, sp, #28
   d7ca6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7caa:	4b12      	ldr	r3, [pc, #72]	; (d7cf4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d7cac:	930c      	str	r3, [sp, #48]	; 0x30
   d7cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7cb0:	ac0d      	add	r4, sp, #52	; 0x34
   d7cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7cb4:	682b      	ldr	r3, [r5, #0]
   d7cb6:	7023      	strb	r3, [r4, #0]
   d7cb8:	463a      	mov	r2, r7
   d7cba:	4643      	mov	r3, r8
   d7cbc:	a90c      	add	r1, sp, #48	; 0x30
   d7cbe:	4630      	mov	r0, r6
   d7cc0:	47c8      	blx	r9
   d7cc2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d7cc4:	9800      	ldr	r0, [sp, #0]
   d7cc6:	f7fe fda1 	bl	d680c <netdb_freeaddrinfo>
}
   d7cca:	4628      	mov	r0, r5
   d7ccc:	b013      	add	sp, #76	; 0x4c
   d7cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7cd2:	68e3      	ldr	r3, [r4, #12]
   d7cd4:	2b00      	cmp	r3, #0
   d7cd6:	d1c3      	bne.n	d7c60 <_ZN9TCPClient7connectEPKctm+0x64>
   d7cd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7cdc:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7ce0:	f7fe fe2c 	bl	d693c <inet_htonl>
   d7ce4:	4581      	cmp	r9, r0
   d7ce6:	d1bb      	bne.n	d7c60 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d7ce8:	f104 0114 	add.w	r1, r4, #20
   d7cec:	e7aa      	b.n	d7c44 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7cee:	4625      	mov	r5, r4
   d7cf0:	e7e8      	b.n	d7cc4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7cf2:	bf00      	nop
   d7cf4:	000d9db4 	.word	0x000d9db4

000d7cf8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7cf8:	2200      	movs	r2, #0
   d7cfa:	6840      	ldr	r0, [r0, #4]
   d7cfc:	4611      	mov	r1, r2
   d7cfe:	f7fe bfc1 	b.w	d6c84 <network_ready>

000d7d02 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7d02:	2200      	movs	r2, #0
   d7d04:	6840      	ldr	r0, [r0, #4]
   d7d06:	4611      	mov	r1, r2
   d7d08:	f7fe bfdc 	b.w	d6cc4 <network_listening>

000d7d0c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7d0c:	2200      	movs	r2, #0
   d7d0e:	6840      	ldr	r0, [r0, #4]
   d7d10:	4611      	mov	r1, r2
   d7d12:	f7fe bfe7 	b.w	d6ce4 <network_get_listen_timeout>

000d7d16 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7d16:	6840      	ldr	r0, [r0, #4]
   d7d18:	2200      	movs	r2, #0
   d7d1a:	f7fe bfdb 	b.w	d6cd4 <network_set_listen_timeout>

000d7d1e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7d1e:	6840      	ldr	r0, [r0, #4]
   d7d20:	2200      	movs	r2, #0
   d7d22:	f081 0101 	eor.w	r1, r1, #1
   d7d26:	f7fe bfc5 	b.w	d6cb4 <network_listen>

000d7d2a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7d2a:	2300      	movs	r3, #0
   d7d2c:	6840      	ldr	r0, [r0, #4]
   d7d2e:	461a      	mov	r2, r3
   d7d30:	4619      	mov	r1, r3
   d7d32:	f7fe bfb7 	b.w	d6ca4 <network_off>

000d7d36 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7d36:	2200      	movs	r2, #0
   d7d38:	6840      	ldr	r0, [r0, #4]
   d7d3a:	4611      	mov	r1, r2
   d7d3c:	f7fe bf92 	b.w	d6c64 <network_connecting>

000d7d40 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7d40:	6840      	ldr	r0, [r0, #4]
   d7d42:	2200      	movs	r2, #0
   d7d44:	2102      	movs	r1, #2
   d7d46:	f7fe bf95 	b.w	d6c74 <network_disconnect>

000d7d4a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7d4a:	2300      	movs	r3, #0
   d7d4c:	6840      	ldr	r0, [r0, #4]
   d7d4e:	461a      	mov	r2, r3
   d7d50:	f7fe bf80 	b.w	d6c54 <network_connect>

000d7d54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7d54:	4b02      	ldr	r3, [pc, #8]	; (d7d60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7d56:	2204      	movs	r2, #4
   d7d58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7d5a:	4a02      	ldr	r2, [pc, #8]	; (d7d64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7d5c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7d5e:	4770      	bx	lr
   d7d60:	2003e7c4 	.word	0x2003e7c4
   d7d64:	000d9ed0 	.word	0x000d9ed0

000d7d68 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7d68:	2300      	movs	r3, #0
   d7d6a:	6840      	ldr	r0, [r0, #4]
   d7d6c:	461a      	mov	r2, r3
   d7d6e:	f7fe bf71 	b.w	d6c54 <network_connect>

000d7d72 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7d72:	6840      	ldr	r0, [r0, #4]
   d7d74:	2200      	movs	r2, #0
   d7d76:	2102      	movs	r1, #2
   d7d78:	f7fe bf7c 	b.w	d6c74 <network_disconnect>

000d7d7c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7d7c:	2200      	movs	r2, #0
   d7d7e:	6840      	ldr	r0, [r0, #4]
   d7d80:	4611      	mov	r1, r2
   d7d82:	f7fe bf6f 	b.w	d6c64 <network_connecting>

000d7d86 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7d86:	2200      	movs	r2, #0
   d7d88:	6840      	ldr	r0, [r0, #4]
   d7d8a:	4611      	mov	r1, r2
   d7d8c:	f7fe bf7a 	b.w	d6c84 <network_ready>

000d7d90 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7d90:	2300      	movs	r3, #0
   d7d92:	6840      	ldr	r0, [r0, #4]
   d7d94:	461a      	mov	r2, r3
   d7d96:	4619      	mov	r1, r3
   d7d98:	f7fe bf7c 	b.w	d6c94 <network_on>

000d7d9c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7d9c:	2300      	movs	r3, #0
   d7d9e:	6840      	ldr	r0, [r0, #4]
   d7da0:	461a      	mov	r2, r3
   d7da2:	4619      	mov	r1, r3
   d7da4:	f7fe bf7e 	b.w	d6ca4 <network_off>

000d7da8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7da8:	6840      	ldr	r0, [r0, #4]
   d7daa:	2100      	movs	r1, #0
   d7dac:	f7fe bfa2 	b.w	d6cf4 <network_is_on>

000d7db0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7db0:	6840      	ldr	r0, [r0, #4]
   d7db2:	2100      	movs	r1, #0
   d7db4:	f7fe bfa6 	b.w	d6d04 <network_is_off>

000d7db8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7db8:	6840      	ldr	r0, [r0, #4]
   d7dba:	2200      	movs	r2, #0
   d7dbc:	f081 0101 	eor.w	r1, r1, #1
   d7dc0:	f7fe bf78 	b.w	d6cb4 <network_listen>

000d7dc4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7dc4:	6840      	ldr	r0, [r0, #4]
   d7dc6:	2200      	movs	r2, #0
   d7dc8:	f7fe bf84 	b.w	d6cd4 <network_set_listen_timeout>

000d7dcc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7dcc:	2200      	movs	r2, #0
   d7dce:	6840      	ldr	r0, [r0, #4]
   d7dd0:	4611      	mov	r1, r2
   d7dd2:	f7fe bf87 	b.w	d6ce4 <network_get_listen_timeout>

000d7dd6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7dd6:	2200      	movs	r2, #0
   d7dd8:	6840      	ldr	r0, [r0, #4]
   d7dda:	4611      	mov	r1, r2
   d7ddc:	f7fe bf72 	b.w	d6cc4 <network_listening>

000d7de0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7de4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7de6:	b095      	sub	sp, #84	; 0x54
   d7de8:	4616      	mov	r6, r2
   d7dea:	460d      	mov	r5, r1
   d7dec:	4607      	mov	r7, r0
    IPAddress addr;
   d7dee:	f7ff fae9 	bl	d73c4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7df2:	4621      	mov	r1, r4
   d7df4:	2218      	movs	r2, #24
   d7df6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7df8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7dfa:	f000 faa3 	bl	d8344 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7dfe:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7e00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7e04:	4621      	mov	r1, r4
   d7e06:	466b      	mov	r3, sp
   d7e08:	aa0c      	add	r2, sp, #48	; 0x30
   d7e0a:	4630      	mov	r0, r6
   d7e0c:	f7fe fd06 	bl	d681c <netdb_getaddrinfo>
    if (!r) {
   d7e10:	4604      	mov	r4, r0
   d7e12:	2800      	cmp	r0, #0
   d7e14:	d14c      	bne.n	d7eb0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7e16:	4602      	mov	r2, r0
   d7e18:	2101      	movs	r1, #1
   d7e1a:	6868      	ldr	r0, [r5, #4]
   d7e1c:	f7fe ff32 	bl	d6c84 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e20:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7e22:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e24:	4622      	mov	r2, r4
   d7e26:	6868      	ldr	r0, [r5, #4]
   d7e28:	f7fe ff2c 	bl	d6c84 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e2c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e2e:	4681      	mov	r9, r0
        bool ok = false;
   d7e30:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e32:	2e00      	cmp	r6, #0
   d7e34:	d03c      	beq.n	d7eb0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7e36:	2900      	cmp	r1, #0
   d7e38:	d13a      	bne.n	d7eb0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7e3a:	6873      	ldr	r3, [r6, #4]
   d7e3c:	2b02      	cmp	r3, #2
   d7e3e:	d003      	beq.n	d7e48 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7e40:	2b0a      	cmp	r3, #10
   d7e42:	d011      	beq.n	d7e68 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e44:	69f6      	ldr	r6, [r6, #28]
   d7e46:	e7f4      	b.n	d7e32 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7e48:	f1b8 0f00 	cmp.w	r8, #0
   d7e4c:	d00a      	beq.n	d7e64 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7e4e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7e50:	a806      	add	r0, sp, #24
   d7e52:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7e54:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7e56:	f7ff fb05 	bl	d7464 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7e5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7e5c:	1d3c      	adds	r4, r7, #4
   d7e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7e60:	682b      	ldr	r3, [r5, #0]
   d7e62:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7e64:	4641      	mov	r1, r8
   d7e66:	e7ed      	b.n	d7e44 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7e68:	f1b9 0f00 	cmp.w	r9, #0
   d7e6c:	d101      	bne.n	d7e72 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7e6e:	4649      	mov	r1, r9
   d7e70:	e7e8      	b.n	d7e44 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7e72:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7e74:	2210      	movs	r2, #16
   d7e76:	a801      	add	r0, sp, #4
   d7e78:	f000 fa64 	bl	d8344 <memset>
                    a.v = 6;
   d7e7c:	2306      	movs	r3, #6
   d7e7e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7e82:	ad01      	add	r5, sp, #4
   d7e84:	f104 0308 	add.w	r3, r4, #8
   d7e88:	3418      	adds	r4, #24
   d7e8a:	6818      	ldr	r0, [r3, #0]
   d7e8c:	6859      	ldr	r1, [r3, #4]
   d7e8e:	462a      	mov	r2, r5
   d7e90:	c203      	stmia	r2!, {r0, r1}
   d7e92:	3308      	adds	r3, #8
   d7e94:	42a3      	cmp	r3, r4
   d7e96:	4615      	mov	r5, r2
   d7e98:	d1f7      	bne.n	d7e8a <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7e9a:	a901      	add	r1, sp, #4
   d7e9c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7e9e:	ad07      	add	r5, sp, #28
   d7ea0:	f7ff fa9e 	bl	d73e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ea6:	1d3c      	adds	r4, r7, #4
   d7ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7eaa:	682b      	ldr	r3, [r5, #0]
   d7eac:	7023      	strb	r3, [r4, #0]
   d7eae:	e7de      	b.n	d7e6e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7eb0:	9800      	ldr	r0, [sp, #0]
   d7eb2:	f7fe fcab 	bl	d680c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7eb6:	4638      	mov	r0, r7
   d7eb8:	b015      	add	sp, #84	; 0x54
   d7eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7ec0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7ec0:	4b02      	ldr	r3, [pc, #8]	; (d7ecc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7ec2:	4a03      	ldr	r2, [pc, #12]	; (d7ed0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7ec4:	601a      	str	r2, [r3, #0]
   d7ec6:	2200      	movs	r2, #0
   d7ec8:	605a      	str	r2, [r3, #4]

} // spark
   d7eca:	4770      	bx	lr
   d7ecc:	2003e7cc 	.word	0x2003e7cc
   d7ed0:	000d9f0c 	.word	0x000d9f0c

000d7ed4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7ed4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7ed6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7ed8:	d902      	bls.n	d7ee0 <pinAvailable+0xc>
    return false;
   d7eda:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7edc:	b002      	add	sp, #8
   d7ede:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7ee0:	f1a0 030b 	sub.w	r3, r0, #11
   d7ee4:	2b02      	cmp	r3, #2
   d7ee6:	d81a      	bhi.n	d7f1e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7ee8:	4c17      	ldr	r4, [pc, #92]	; (d7f48 <pinAvailable+0x74>)
   d7eea:	7821      	ldrb	r1, [r4, #0]
   d7eec:	f3bf 8f5b 	dmb	ish
   d7ef0:	f011 0101 	ands.w	r1, r1, #1
   d7ef4:	d10b      	bne.n	d7f0e <pinAvailable+0x3a>
   d7ef6:	4620      	mov	r0, r4
   d7ef8:	9101      	str	r1, [sp, #4]
   d7efa:	f7fc f8db 	bl	d40b4 <__cxa_guard_acquire>
   d7efe:	9901      	ldr	r1, [sp, #4]
   d7f00:	b128      	cbz	r0, d7f0e <pinAvailable+0x3a>
   d7f02:	4812      	ldr	r0, [pc, #72]	; (d7f4c <pinAvailable+0x78>)
   d7f04:	f7fe ff8a 	bl	d6e1c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7f08:	4620      	mov	r0, r4
   d7f0a:	f7fc f8d8 	bl	d40be <__cxa_guard_release>
   d7f0e:	4b0f      	ldr	r3, [pc, #60]	; (d7f4c <pinAvailable+0x78>)
   d7f10:	7818      	ldrb	r0, [r3, #0]
   d7f12:	f7fe fe03 	bl	d6b1c <hal_spi_is_enabled>
   d7f16:	2800      	cmp	r0, #0
   d7f18:	d1df      	bne.n	d7eda <pinAvailable+0x6>
  return true; // 'pin' is available
   d7f1a:	2001      	movs	r0, #1
   d7f1c:	e7de      	b.n	d7edc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7f1e:	2801      	cmp	r0, #1
   d7f20:	d809      	bhi.n	d7f36 <pinAvailable+0x62>
   d7f22:	f000 f8a7 	bl	d8074 <_Z19__fetch_global_Wirev>
   d7f26:	2100      	movs	r1, #0
   d7f28:	7c00      	ldrb	r0, [r0, #16]
   d7f2a:	f7fe fd9f 	bl	d6a6c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7f2e:	f080 0001 	eor.w	r0, r0, #1
   d7f32:	b2c0      	uxtb	r0, r0
   d7f34:	e7d2      	b.n	d7edc <pinAvailable+0x8>
   d7f36:	3809      	subs	r0, #9
   d7f38:	2801      	cmp	r0, #1
   d7f3a:	d8ee      	bhi.n	d7f1a <pinAvailable+0x46>
   d7f3c:	f7ff fb7c 	bl	d7638 <_Z22__fetch_global_Serial1v>
   d7f40:	7c00      	ldrb	r0, [r0, #16]
   d7f42:	f7fe fd3b 	bl	d69bc <hal_usart_is_enabled>
   d7f46:	e7f2      	b.n	d7f2e <pinAvailable+0x5a>
   d7f48:	2003e538 	.word	0x2003e538
   d7f4c:	2003e53c 	.word	0x2003e53c

000d7f50 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7f50:	2823      	cmp	r0, #35	; 0x23
{
   d7f52:	b538      	push	{r3, r4, r5, lr}
   d7f54:	4604      	mov	r4, r0
   d7f56:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7f58:	d80a      	bhi.n	d7f70 <pinMode+0x20>
   d7f5a:	29ff      	cmp	r1, #255	; 0xff
   d7f5c:	d008      	beq.n	d7f70 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7f5e:	f7ff ffb9 	bl	d7ed4 <pinAvailable>
   d7f62:	b128      	cbz	r0, d7f70 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7f64:	4629      	mov	r1, r5
   d7f66:	4620      	mov	r0, r4
}
   d7f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7f6c:	f7fe bc66 	b.w	d683c <HAL_Pin_Mode>
}
   d7f70:	bd38      	pop	{r3, r4, r5, pc}

000d7f72 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7f72:	b538      	push	{r3, r4, r5, lr}
   d7f74:	4604      	mov	r4, r0
   d7f76:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7f78:	f7fe fc68 	bl	d684c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7f7c:	28ff      	cmp	r0, #255	; 0xff
   d7f7e:	d010      	beq.n	d7fa2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7f80:	2806      	cmp	r0, #6
   d7f82:	d804      	bhi.n	d7f8e <digitalWrite+0x1c>
   d7f84:	234d      	movs	r3, #77	; 0x4d
   d7f86:	fa23 f000 	lsr.w	r0, r3, r0
   d7f8a:	07c3      	lsls	r3, r0, #31
   d7f8c:	d409      	bmi.n	d7fa2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7f8e:	4620      	mov	r0, r4
   d7f90:	f7ff ffa0 	bl	d7ed4 <pinAvailable>
   d7f94:	b128      	cbz	r0, d7fa2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7f96:	4629      	mov	r1, r5
   d7f98:	4620      	mov	r0, r4
}
   d7f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7f9e:	f7fe bc5d 	b.w	d685c <HAL_GPIO_Write>
}
   d7fa2:	bd38      	pop	{r3, r4, r5, pc}

000d7fa4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7fa4:	b510      	push	{r4, lr}
   d7fa6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7fa8:	f7fe fc50 	bl	d684c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7fac:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7fae:	b2db      	uxtb	r3, r3
   d7fb0:	2b01      	cmp	r3, #1
   d7fb2:	d908      	bls.n	d7fc6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7fb4:	4620      	mov	r0, r4
   d7fb6:	f7ff ff8d 	bl	d7ed4 <pinAvailable>
   d7fba:	b120      	cbz	r0, d7fc6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7fbc:	4620      	mov	r0, r4
}
   d7fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7fc2:	f7fe bc53 	b.w	d686c <HAL_GPIO_Read>
}
   d7fc6:	2000      	movs	r0, #0
   d7fc8:	bd10      	pop	{r4, pc}

000d7fca <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7fca:	280d      	cmp	r0, #13
{
   d7fcc:	b510      	push	{r4, lr}
   d7fce:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7fd0:	bf9c      	itt	ls
   d7fd2:	340e      	addls	r4, #14
   d7fd4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7fd6:	4620      	mov	r0, r4
   d7fd8:	f7ff ff7c 	bl	d7ed4 <pinAvailable>
   d7fdc:	b150      	cbz	r0, d7ff4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7fde:	2103      	movs	r1, #3
   d7fe0:	4620      	mov	r0, r4
   d7fe2:	f7fe fc23 	bl	d682c <HAL_Validate_Pin_Function>
   d7fe6:	2803      	cmp	r0, #3
   d7fe8:	d104      	bne.n	d7ff4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7fea:	4620      	mov	r0, r4
}
   d7fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7ff0:	f7fe bc4c 	b.w	d688c <hal_adc_read>
}
   d7ff4:	2000      	movs	r0, #0
   d7ff6:	bd10      	pop	{r4, pc}

000d7ff8 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d7ff8:	b538      	push	{r3, r4, r5, lr}
   d7ffa:	4604      	mov	r4, r0
   d7ffc:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d7ffe:	f7ff ff69 	bl	d7ed4 <pinAvailable>
   d8002:	b1f0      	cbz	r0, d8042 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d8004:	2104      	movs	r1, #4
   d8006:	4620      	mov	r0, r4
   d8008:	f7fe fc10 	bl	d682c <HAL_Validate_Pin_Function>
   d800c:	2804      	cmp	r0, #4
   d800e:	d105      	bne.n	d801c <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d8010:	b2a9      	uxth	r1, r5
   d8012:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d8014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d8018:	f7fe bc30 	b.w	d687c <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d801c:	2102      	movs	r1, #2
   d801e:	4620      	mov	r0, r4
   d8020:	f7fe fc04 	bl	d682c <HAL_Validate_Pin_Function>
   d8024:	2802      	cmp	r0, #2
   d8026:	d10c      	bne.n	d8042 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d8028:	4620      	mov	r0, r4
   d802a:	f7fe fc0f 	bl	d684c <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d802e:	2801      	cmp	r0, #1
   d8030:	d001      	beq.n	d8036 <_Z11analogWritetm+0x3e>
   d8032:	2804      	cmp	r0, #4
   d8034:	d105      	bne.n	d8042 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d8036:	4629      	mov	r1, r5
   d8038:	4620      	mov	r0, r4
}
   d803a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d803e:	f7fe bc2d 	b.w	d689c <hal_pwm_write_ext>
}
   d8042:	bd38      	pop	{r3, r4, r5, pc}

000d8044 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8044:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8046:	2300      	movs	r3, #0
   d8048:	2520      	movs	r5, #32
   d804a:	8043      	strh	r3, [r0, #2]
   d804c:	2314      	movs	r3, #20
{
   d804e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8050:	8003      	strh	r3, [r0, #0]
   d8052:	6085      	str	r5, [r0, #8]
   d8054:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8056:	4906      	ldr	r1, [pc, #24]	; (d8070 <_Z17acquireWireBufferv+0x2c>)
   d8058:	4628      	mov	r0, r5
   d805a:	f000 f83a 	bl	d80d2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d805e:	4904      	ldr	r1, [pc, #16]	; (d8070 <_Z17acquireWireBufferv+0x2c>)
	};
   d8060:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8062:	4628      	mov	r0, r5
   d8064:	f000 f835 	bl	d80d2 <_ZnajRKSt9nothrow_t>
	};
   d8068:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d806a:	4620      	mov	r0, r4
   d806c:	bd38      	pop	{r3, r4, r5, pc}
   d806e:	bf00      	nop
   d8070:	000d9f40 	.word	0x000d9f40

000d8074 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8074:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8076:	4d0f      	ldr	r5, [pc, #60]	; (d80b4 <_Z19__fetch_global_Wirev+0x40>)
   d8078:	7829      	ldrb	r1, [r5, #0]
   d807a:	f3bf 8f5b 	dmb	ish
   d807e:	f011 0401 	ands.w	r4, r1, #1
{
   d8082:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8084:	d113      	bne.n	d80ae <_Z19__fetch_global_Wirev+0x3a>
   d8086:	4628      	mov	r0, r5
   d8088:	f7fc f814 	bl	d40b4 <__cxa_guard_acquire>
   d808c:	b178      	cbz	r0, d80ae <_Z19__fetch_global_Wirev+0x3a>
   d808e:	a801      	add	r0, sp, #4
   d8090:	f7ff ffd8 	bl	d8044 <_Z17acquireWireBufferv>
   d8094:	aa01      	add	r2, sp, #4
   d8096:	4621      	mov	r1, r4
   d8098:	4807      	ldr	r0, [pc, #28]	; (d80b8 <_Z19__fetch_global_Wirev+0x44>)
   d809a:	f7ff fb23 	bl	d76e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d809e:	4628      	mov	r0, r5
   d80a0:	f7fc f80d 	bl	d40be <__cxa_guard_release>
   d80a4:	4a05      	ldr	r2, [pc, #20]	; (d80bc <_Z19__fetch_global_Wirev+0x48>)
   d80a6:	4906      	ldr	r1, [pc, #24]	; (d80c0 <_Z19__fetch_global_Wirev+0x4c>)
   d80a8:	4803      	ldr	r0, [pc, #12]	; (d80b8 <_Z19__fetch_global_Wirev+0x44>)
   d80aa:	f000 f80b 	bl	d80c4 <__aeabi_atexit>
	return wire;
}
   d80ae:	4802      	ldr	r0, [pc, #8]	; (d80b8 <_Z19__fetch_global_Wirev+0x44>)
   d80b0:	b007      	add	sp, #28
   d80b2:	bd30      	pop	{r4, r5, pc}
   d80b4:	2003e7d8 	.word	0x2003e7d8
   d80b8:	2003e7dc 	.word	0x2003e7dc
   d80bc:	2003e534 	.word	0x2003e534
   d80c0:	000d768d 	.word	0x000d768d

000d80c4 <__aeabi_atexit>:
   d80c4:	460b      	mov	r3, r1
   d80c6:	4601      	mov	r1, r0
   d80c8:	4618      	mov	r0, r3
   d80ca:	f000 b91f 	b.w	d830c <__cxa_atexit>

000d80ce <_ZdlPvj>:
   d80ce:	f7fb bfe4 	b.w	d409a <_ZdlPv>

000d80d2 <_ZnajRKSt9nothrow_t>:
   d80d2:	f7fb bfe0 	b.w	d4096 <_Znaj>
	...

000d80d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d80d8:	4901      	ldr	r1, [pc, #4]	; (d80e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d80da:	f000 b8f9 	b.w	d82d0 <_ZNKSt9type_infoeqERKS_>
   d80de:	bf00      	nop
   d80e0:	000d9f5c 	.word	0x000d9f5c

000d80e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d80e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d80e6:	2400      	movs	r4, #0
   d80e8:	2310      	movs	r3, #16
   d80ea:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d80ee:	6803      	ldr	r3, [r0, #0]
   d80f0:	9400      	str	r4, [sp, #0]
   d80f2:	699e      	ldr	r6, [r3, #24]
   d80f4:	f88d 4004 	strb.w	r4, [sp, #4]
   d80f8:	4615      	mov	r5, r2
   d80fa:	466b      	mov	r3, sp
   d80fc:	6812      	ldr	r2, [r2, #0]
   d80fe:	47b0      	blx	r6
   d8100:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d8104:	f003 0306 	and.w	r3, r3, #6
   d8108:	2b06      	cmp	r3, #6
   d810a:	bf03      	ittte	eq
   d810c:	9b00      	ldreq	r3, [sp, #0]
   d810e:	602b      	streq	r3, [r5, #0]
   d8110:	2001      	moveq	r0, #1
   d8112:	4620      	movne	r0, r4
   d8114:	b004      	add	sp, #16
   d8116:	bd70      	pop	{r4, r5, r6, pc}

000d8118 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d8118:	9800      	ldr	r0, [sp, #0]
   d811a:	4290      	cmp	r0, r2
   d811c:	bf14      	ite	ne
   d811e:	2001      	movne	r0, #1
   d8120:	2006      	moveq	r0, #6
   d8122:	4770      	bx	lr

000d8124 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d8124:	b510      	push	{r4, lr}
   d8126:	4b03      	ldr	r3, [pc, #12]	; (d8134 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d8128:	6003      	str	r3, [r0, #0]
   d812a:	4604      	mov	r4, r0
   d812c:	f000 f8cd 	bl	d82ca <_ZNSt9type_infoD1Ev>
   d8130:	4620      	mov	r0, r4
   d8132:	bd10      	pop	{r4, pc}
   d8134:	000d9f9c 	.word	0x000d9f9c

000d8138 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8138:	b510      	push	{r4, lr}
   d813a:	4604      	mov	r4, r0
   d813c:	f7ff fff2 	bl	d8124 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8140:	4620      	mov	r0, r4
   d8142:	2108      	movs	r1, #8
   d8144:	f7ff ffc3 	bl	d80ce <_ZdlPvj>
   d8148:	4620      	mov	r0, r4
   d814a:	bd10      	pop	{r4, pc}

000d814c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d814c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8150:	461f      	mov	r7, r3
   d8152:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d8156:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d815a:	4598      	cmp	r8, r3
   d815c:	4606      	mov	r6, r0
   d815e:	4615      	mov	r5, r2
   d8160:	d107      	bne.n	d8172 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8162:	9907      	ldr	r1, [sp, #28]
   d8164:	f000 f8b4 	bl	d82d0 <_ZNKSt9type_infoeqERKS_>
   d8168:	b118      	cbz	r0, d8172 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d816a:	7165      	strb	r5, [r4, #5]
   d816c:	2000      	movs	r0, #0
   d816e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8172:	4639      	mov	r1, r7
   d8174:	4630      	mov	r0, r6
   d8176:	f000 f8ab 	bl	d82d0 <_ZNKSt9type_infoeqERKS_>
   d817a:	2800      	cmp	r0, #0
   d817c:	d0f6      	beq.n	d816c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d817e:	2301      	movs	r3, #1
   d8180:	f8c4 8000 	str.w	r8, [r4]
   d8184:	7125      	strb	r5, [r4, #4]
   d8186:	71a3      	strb	r3, [r4, #6]
   d8188:	e7f0      	b.n	d816c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d818a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d818a:	b538      	push	{r3, r4, r5, lr}
   d818c:	4615      	mov	r5, r2
   d818e:	461c      	mov	r4, r3
   d8190:	f000 f89e 	bl	d82d0 <_ZNKSt9type_infoeqERKS_>
   d8194:	b120      	cbz	r0, d81a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d8196:	2308      	movs	r3, #8
   d8198:	60e3      	str	r3, [r4, #12]
   d819a:	2306      	movs	r3, #6
   d819c:	6025      	str	r5, [r4, #0]
   d819e:	7123      	strb	r3, [r4, #4]
   d81a0:	bd38      	pop	{r3, r4, r5, pc}

000d81a2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d81a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d81a4:	4605      	mov	r5, r0
   d81a6:	460c      	mov	r4, r1
   d81a8:	9201      	str	r2, [sp, #4]
   d81aa:	461e      	mov	r6, r3
   d81ac:	f000 f890 	bl	d82d0 <_ZNKSt9type_infoeqERKS_>
   d81b0:	b950      	cbnz	r0, d81c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d81b2:	2e03      	cmp	r6, #3
   d81b4:	d808      	bhi.n	d81c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d81b6:	6823      	ldr	r3, [r4, #0]
   d81b8:	9a01      	ldr	r2, [sp, #4]
   d81ba:	695b      	ldr	r3, [r3, #20]
   d81bc:	4629      	mov	r1, r5
   d81be:	4620      	mov	r0, r4
   d81c0:	b002      	add	sp, #8
   d81c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d81c6:	4718      	bx	r3
   d81c8:	b002      	add	sp, #8
   d81ca:	bd70      	pop	{r4, r5, r6, pc}

000d81cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d81cc:	b510      	push	{r4, lr}
   d81ce:	4b03      	ldr	r3, [pc, #12]	; (d81dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d81d0:	6003      	str	r3, [r0, #0]
   d81d2:	4604      	mov	r4, r0
   d81d4:	f7ff ffa6 	bl	d8124 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d81d8:	4620      	mov	r0, r4
   d81da:	bd10      	pop	{r4, pc}
   d81dc:	000d9ffc 	.word	0x000d9ffc

000d81e0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d81e0:	b510      	push	{r4, lr}
   d81e2:	4604      	mov	r4, r0
   d81e4:	f7ff fff2 	bl	d81cc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d81e8:	4620      	mov	r0, r4
   d81ea:	210c      	movs	r1, #12
   d81ec:	f7ff ff6f 	bl	d80ce <_ZdlPvj>
   d81f0:	4620      	mov	r0, r4
   d81f2:	bd10      	pop	{r4, pc}

000d81f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d81f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d81f6:	9f08      	ldr	r7, [sp, #32]
   d81f8:	4297      	cmp	r7, r2
   d81fa:	4605      	mov	r5, r0
   d81fc:	460e      	mov	r6, r1
   d81fe:	4614      	mov	r4, r2
   d8200:	d00a      	beq.n	d8218 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d8202:	68a8      	ldr	r0, [r5, #8]
   d8204:	6802      	ldr	r2, [r0, #0]
   d8206:	9708      	str	r7, [sp, #32]
   d8208:	6a15      	ldr	r5, [r2, #32]
   d820a:	4631      	mov	r1, r6
   d820c:	4622      	mov	r2, r4
   d820e:	46ac      	mov	ip, r5
   d8210:	b003      	add	sp, #12
   d8212:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8216:	4760      	bx	ip
   d8218:	4619      	mov	r1, r3
   d821a:	9301      	str	r3, [sp, #4]
   d821c:	f000 f858 	bl	d82d0 <_ZNKSt9type_infoeqERKS_>
   d8220:	9b01      	ldr	r3, [sp, #4]
   d8222:	2800      	cmp	r0, #0
   d8224:	d0ed      	beq.n	d8202 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d8226:	2006      	movs	r0, #6
   d8228:	b003      	add	sp, #12
   d822a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d822c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d822c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8230:	460d      	mov	r5, r1
   d8232:	4619      	mov	r1, r3
   d8234:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8238:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d823c:	4681      	mov	r9, r0
   d823e:	4617      	mov	r7, r2
   d8240:	4698      	mov	r8, r3
   d8242:	f000 f845 	bl	d82d0 <_ZNKSt9type_infoeqERKS_>
   d8246:	b190      	cbz	r0, d826e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8248:	2d00      	cmp	r5, #0
   d824a:	6034      	str	r4, [r6, #0]
   d824c:	7137      	strb	r7, [r6, #4]
   d824e:	db09      	blt.n	d8264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d8250:	1961      	adds	r1, r4, r5
   d8252:	458a      	cmp	sl, r1
   d8254:	bf0c      	ite	eq
   d8256:	2106      	moveq	r1, #6
   d8258:	2101      	movne	r1, #1
   d825a:	71b1      	strb	r1, [r6, #6]
   d825c:	2000      	movs	r0, #0
   d825e:	b001      	add	sp, #4
   d8260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8264:	3502      	adds	r5, #2
   d8266:	d1f9      	bne.n	d825c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8268:	2301      	movs	r3, #1
   d826a:	71b3      	strb	r3, [r6, #6]
   d826c:	e7f6      	b.n	d825c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d826e:	4554      	cmp	r4, sl
   d8270:	d106      	bne.n	d8280 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8272:	4659      	mov	r1, fp
   d8274:	4648      	mov	r0, r9
   d8276:	f000 f82b 	bl	d82d0 <_ZNKSt9type_infoeqERKS_>
   d827a:	b108      	cbz	r0, d8280 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d827c:	7177      	strb	r7, [r6, #5]
   d827e:	e7ed      	b.n	d825c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8280:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d8284:	6803      	ldr	r3, [r0, #0]
   d8286:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d828a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d828e:	69dc      	ldr	r4, [r3, #28]
   d8290:	463a      	mov	r2, r7
   d8292:	4643      	mov	r3, r8
   d8294:	4629      	mov	r1, r5
   d8296:	46a4      	mov	ip, r4
   d8298:	b001      	add	sp, #4
   d829a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d829e:	4760      	bx	ip

000d82a0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d82a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d82a4:	4607      	mov	r7, r0
   d82a6:	460c      	mov	r4, r1
   d82a8:	4615      	mov	r5, r2
   d82aa:	461e      	mov	r6, r3
   d82ac:	f7ff ff6d 	bl	d818a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d82b0:	b948      	cbnz	r0, d82c6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d82b2:	68b8      	ldr	r0, [r7, #8]
   d82b4:	6803      	ldr	r3, [r0, #0]
   d82b6:	699f      	ldr	r7, [r3, #24]
   d82b8:	462a      	mov	r2, r5
   d82ba:	4633      	mov	r3, r6
   d82bc:	4621      	mov	r1, r4
   d82be:	46bc      	mov	ip, r7
   d82c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d82c4:	4760      	bx	ip
   d82c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d82ca <_ZNSt9type_infoD1Ev>:
   d82ca:	4770      	bx	lr

000d82cc <_ZNKSt9type_info14__is_pointer_pEv>:
   d82cc:	2000      	movs	r0, #0
   d82ce:	4770      	bx	lr

000d82d0 <_ZNKSt9type_infoeqERKS_>:
   d82d0:	4281      	cmp	r1, r0
   d82d2:	b508      	push	{r3, lr}
   d82d4:	d00e      	beq.n	d82f4 <_ZNKSt9type_infoeqERKS_+0x24>
   d82d6:	6840      	ldr	r0, [r0, #4]
   d82d8:	7803      	ldrb	r3, [r0, #0]
   d82da:	2b2a      	cmp	r3, #42	; 0x2a
   d82dc:	d00c      	beq.n	d82f8 <_ZNKSt9type_infoeqERKS_+0x28>
   d82de:	6849      	ldr	r1, [r1, #4]
   d82e0:	780b      	ldrb	r3, [r1, #0]
   d82e2:	2b2a      	cmp	r3, #42	; 0x2a
   d82e4:	bf08      	it	eq
   d82e6:	3101      	addeq	r1, #1
   d82e8:	f000 f858 	bl	d839c <strcmp>
   d82ec:	fab0 f080 	clz	r0, r0
   d82f0:	0940      	lsrs	r0, r0, #5
   d82f2:	bd08      	pop	{r3, pc}
   d82f4:	2001      	movs	r0, #1
   d82f6:	e7fc      	b.n	d82f2 <_ZNKSt9type_infoeqERKS_+0x22>
   d82f8:	2000      	movs	r0, #0
   d82fa:	e7fa      	b.n	d82f2 <_ZNKSt9type_infoeqERKS_+0x22>

000d82fc <atoi>:
   d82fc:	220a      	movs	r2, #10
   d82fe:	2100      	movs	r1, #0
   d8300:	f000 b8ec 	b.w	d84dc <strtol>

000d8304 <atol>:
   d8304:	220a      	movs	r2, #10
   d8306:	2100      	movs	r1, #0
   d8308:	f000 b8e8 	b.w	d84dc <strtol>

000d830c <__cxa_atexit>:
   d830c:	b510      	push	{r4, lr}
   d830e:	4c05      	ldr	r4, [pc, #20]	; (d8324 <__cxa_atexit+0x18>)
   d8310:	4613      	mov	r3, r2
   d8312:	b12c      	cbz	r4, d8320 <__cxa_atexit+0x14>
   d8314:	460a      	mov	r2, r1
   d8316:	4601      	mov	r1, r0
   d8318:	2002      	movs	r0, #2
   d831a:	f3af 8000 	nop.w
   d831e:	bd10      	pop	{r4, pc}
   d8320:	4620      	mov	r0, r4
   d8322:	e7fc      	b.n	d831e <__cxa_atexit+0x12>
   d8324:	00000000 	.word	0x00000000

000d8328 <memcpy>:
   d8328:	440a      	add	r2, r1
   d832a:	4291      	cmp	r1, r2
   d832c:	f100 33ff 	add.w	r3, r0, #4294967295
   d8330:	d100      	bne.n	d8334 <memcpy+0xc>
   d8332:	4770      	bx	lr
   d8334:	b510      	push	{r4, lr}
   d8336:	f811 4b01 	ldrb.w	r4, [r1], #1
   d833a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d833e:	4291      	cmp	r1, r2
   d8340:	d1f9      	bne.n	d8336 <memcpy+0xe>
   d8342:	bd10      	pop	{r4, pc}

000d8344 <memset>:
   d8344:	4402      	add	r2, r0
   d8346:	4603      	mov	r3, r0
   d8348:	4293      	cmp	r3, r2
   d834a:	d100      	bne.n	d834e <memset+0xa>
   d834c:	4770      	bx	lr
   d834e:	f803 1b01 	strb.w	r1, [r3], #1
   d8352:	e7f9      	b.n	d8348 <memset+0x4>

000d8354 <srand>:
   d8354:	b538      	push	{r3, r4, r5, lr}
   d8356:	4b0d      	ldr	r3, [pc, #52]	; (d838c <srand+0x38>)
   d8358:	681d      	ldr	r5, [r3, #0]
   d835a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d835c:	4604      	mov	r4, r0
   d835e:	b97b      	cbnz	r3, d8380 <srand+0x2c>
   d8360:	2018      	movs	r0, #24
   d8362:	f7fe fce7 	bl	d6d34 <malloc>
   d8366:	4a0a      	ldr	r2, [pc, #40]	; (d8390 <srand+0x3c>)
   d8368:	4b0a      	ldr	r3, [pc, #40]	; (d8394 <srand+0x40>)
   d836a:	63a8      	str	r0, [r5, #56]	; 0x38
   d836c:	e9c0 2300 	strd	r2, r3, [r0]
   d8370:	4b09      	ldr	r3, [pc, #36]	; (d8398 <srand+0x44>)
   d8372:	6083      	str	r3, [r0, #8]
   d8374:	230b      	movs	r3, #11
   d8376:	8183      	strh	r3, [r0, #12]
   d8378:	2201      	movs	r2, #1
   d837a:	2300      	movs	r3, #0
   d837c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8380:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8382:	2200      	movs	r2, #0
   d8384:	611c      	str	r4, [r3, #16]
   d8386:	615a      	str	r2, [r3, #20]
   d8388:	bd38      	pop	{r3, r4, r5, pc}
   d838a:	bf00      	nop
   d838c:	2003e4d0 	.word	0x2003e4d0
   d8390:	abcd330e 	.word	0xabcd330e
   d8394:	e66d1234 	.word	0xe66d1234
   d8398:	0005deec 	.word	0x0005deec

000d839c <strcmp>:
   d839c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d83a0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d83a4:	2a01      	cmp	r2, #1
   d83a6:	bf28      	it	cs
   d83a8:	429a      	cmpcs	r2, r3
   d83aa:	d0f7      	beq.n	d839c <strcmp>
   d83ac:	1ad0      	subs	r0, r2, r3
   d83ae:	4770      	bx	lr

000d83b0 <strlen>:
   d83b0:	4603      	mov	r3, r0
   d83b2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d83b6:	2a00      	cmp	r2, #0
   d83b8:	d1fb      	bne.n	d83b2 <strlen+0x2>
   d83ba:	1a18      	subs	r0, r3, r0
   d83bc:	3801      	subs	r0, #1
   d83be:	4770      	bx	lr

000d83c0 <strncpy>:
   d83c0:	b510      	push	{r4, lr}
   d83c2:	3901      	subs	r1, #1
   d83c4:	4603      	mov	r3, r0
   d83c6:	b132      	cbz	r2, d83d6 <strncpy+0x16>
   d83c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d83cc:	f803 4b01 	strb.w	r4, [r3], #1
   d83d0:	3a01      	subs	r2, #1
   d83d2:	2c00      	cmp	r4, #0
   d83d4:	d1f7      	bne.n	d83c6 <strncpy+0x6>
   d83d6:	441a      	add	r2, r3
   d83d8:	2100      	movs	r1, #0
   d83da:	4293      	cmp	r3, r2
   d83dc:	d100      	bne.n	d83e0 <strncpy+0x20>
   d83de:	bd10      	pop	{r4, pc}
   d83e0:	f803 1b01 	strb.w	r1, [r3], #1
   d83e4:	e7f9      	b.n	d83da <strncpy+0x1a>
	...

000d83e8 <_strtol_l.isra.0>:
   d83e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d83ec:	4e3a      	ldr	r6, [pc, #232]	; (d84d8 <_strtol_l.isra.0+0xf0>)
   d83ee:	4686      	mov	lr, r0
   d83f0:	468c      	mov	ip, r1
   d83f2:	4660      	mov	r0, ip
   d83f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d83f8:	5da5      	ldrb	r5, [r4, r6]
   d83fa:	f015 0508 	ands.w	r5, r5, #8
   d83fe:	d1f8      	bne.n	d83f2 <_strtol_l.isra.0+0xa>
   d8400:	2c2d      	cmp	r4, #45	; 0x2d
   d8402:	d133      	bne.n	d846c <_strtol_l.isra.0+0x84>
   d8404:	f89c 4000 	ldrb.w	r4, [ip]
   d8408:	f04f 0801 	mov.w	r8, #1
   d840c:	f100 0c02 	add.w	ip, r0, #2
   d8410:	2b00      	cmp	r3, #0
   d8412:	d05c      	beq.n	d84ce <_strtol_l.isra.0+0xe6>
   d8414:	2b10      	cmp	r3, #16
   d8416:	d10c      	bne.n	d8432 <_strtol_l.isra.0+0x4a>
   d8418:	2c30      	cmp	r4, #48	; 0x30
   d841a:	d10a      	bne.n	d8432 <_strtol_l.isra.0+0x4a>
   d841c:	f89c 0000 	ldrb.w	r0, [ip]
   d8420:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8424:	2858      	cmp	r0, #88	; 0x58
   d8426:	d14d      	bne.n	d84c4 <_strtol_l.isra.0+0xdc>
   d8428:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d842c:	2310      	movs	r3, #16
   d842e:	f10c 0c02 	add.w	ip, ip, #2
   d8432:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d8436:	3f01      	subs	r7, #1
   d8438:	2600      	movs	r6, #0
   d843a:	fbb7 f9f3 	udiv	r9, r7, r3
   d843e:	4630      	mov	r0, r6
   d8440:	fb03 7a19 	mls	sl, r3, r9, r7
   d8444:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d8448:	2d09      	cmp	r5, #9
   d844a:	d818      	bhi.n	d847e <_strtol_l.isra.0+0x96>
   d844c:	462c      	mov	r4, r5
   d844e:	42a3      	cmp	r3, r4
   d8450:	dd24      	ble.n	d849c <_strtol_l.isra.0+0xb4>
   d8452:	1c75      	adds	r5, r6, #1
   d8454:	d007      	beq.n	d8466 <_strtol_l.isra.0+0x7e>
   d8456:	4581      	cmp	r9, r0
   d8458:	d31d      	bcc.n	d8496 <_strtol_l.isra.0+0xae>
   d845a:	d101      	bne.n	d8460 <_strtol_l.isra.0+0x78>
   d845c:	45a2      	cmp	sl, r4
   d845e:	db1a      	blt.n	d8496 <_strtol_l.isra.0+0xae>
   d8460:	fb00 4003 	mla	r0, r0, r3, r4
   d8464:	2601      	movs	r6, #1
   d8466:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d846a:	e7eb      	b.n	d8444 <_strtol_l.isra.0+0x5c>
   d846c:	2c2b      	cmp	r4, #43	; 0x2b
   d846e:	bf08      	it	eq
   d8470:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8474:	46a8      	mov	r8, r5
   d8476:	bf08      	it	eq
   d8478:	f100 0c02 	addeq.w	ip, r0, #2
   d847c:	e7c8      	b.n	d8410 <_strtol_l.isra.0+0x28>
   d847e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8482:	2d19      	cmp	r5, #25
   d8484:	d801      	bhi.n	d848a <_strtol_l.isra.0+0xa2>
   d8486:	3c37      	subs	r4, #55	; 0x37
   d8488:	e7e1      	b.n	d844e <_strtol_l.isra.0+0x66>
   d848a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d848e:	2d19      	cmp	r5, #25
   d8490:	d804      	bhi.n	d849c <_strtol_l.isra.0+0xb4>
   d8492:	3c57      	subs	r4, #87	; 0x57
   d8494:	e7db      	b.n	d844e <_strtol_l.isra.0+0x66>
   d8496:	f04f 36ff 	mov.w	r6, #4294967295
   d849a:	e7e4      	b.n	d8466 <_strtol_l.isra.0+0x7e>
   d849c:	1c73      	adds	r3, r6, #1
   d849e:	d106      	bne.n	d84ae <_strtol_l.isra.0+0xc6>
   d84a0:	2322      	movs	r3, #34	; 0x22
   d84a2:	f8ce 3000 	str.w	r3, [lr]
   d84a6:	4638      	mov	r0, r7
   d84a8:	b942      	cbnz	r2, d84bc <_strtol_l.isra.0+0xd4>
   d84aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84ae:	f1b8 0f00 	cmp.w	r8, #0
   d84b2:	d000      	beq.n	d84b6 <_strtol_l.isra.0+0xce>
   d84b4:	4240      	negs	r0, r0
   d84b6:	2a00      	cmp	r2, #0
   d84b8:	d0f7      	beq.n	d84aa <_strtol_l.isra.0+0xc2>
   d84ba:	b10e      	cbz	r6, d84c0 <_strtol_l.isra.0+0xd8>
   d84bc:	f10c 31ff 	add.w	r1, ip, #4294967295
   d84c0:	6011      	str	r1, [r2, #0]
   d84c2:	e7f2      	b.n	d84aa <_strtol_l.isra.0+0xc2>
   d84c4:	2430      	movs	r4, #48	; 0x30
   d84c6:	2b00      	cmp	r3, #0
   d84c8:	d1b3      	bne.n	d8432 <_strtol_l.isra.0+0x4a>
   d84ca:	2308      	movs	r3, #8
   d84cc:	e7b1      	b.n	d8432 <_strtol_l.isra.0+0x4a>
   d84ce:	2c30      	cmp	r4, #48	; 0x30
   d84d0:	d0a4      	beq.n	d841c <_strtol_l.isra.0+0x34>
   d84d2:	230a      	movs	r3, #10
   d84d4:	e7ad      	b.n	d8432 <_strtol_l.isra.0+0x4a>
   d84d6:	bf00      	nop
   d84d8:	000da036 	.word	0x000da036

000d84dc <strtol>:
   d84dc:	4613      	mov	r3, r2
   d84de:	460a      	mov	r2, r1
   d84e0:	4601      	mov	r1, r0
   d84e2:	4802      	ldr	r0, [pc, #8]	; (d84ec <strtol+0x10>)
   d84e4:	6800      	ldr	r0, [r0, #0]
   d84e6:	f7ff bf7f 	b.w	d83e8 <_strtol_l.isra.0>
   d84ea:	bf00      	nop
   d84ec:	2003e4d0 	.word	0x2003e4d0

000d84f0 <dynalib_user>:
   d84f0:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d8500:	00000000 61666564 20746c75 42534d00     ....default .MSB
   d8510:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   d8520:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   d8530:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   d8540:	45444f4d 003e7525 25006925 5800696c     MODE%u>.%i.%li.X
   d8550:	00203d20 2059203b 6900203d 756f006e      = .; Y = .in.ou
   d8560:	77700074 7764006d 00776100 7767464b     t.pwm.dw.aw.KFgw
   d8570:	4b677950 465a645a 6b5f4935 70744a6b     PygKZdZF5I_kkJtp
   d8580:	7172337a 35576472 4a305a35 74657300     z3rqrdW55Z0J.set
   d8590:	75537075 73656363 64253d73 6f684300     upSuccess=%d.Cho
   d85a0:	2065736f 20656874 66666964 6c756369     ose the difficul
   d85b0:	41007974 6165203a 64207973 69666669     ty.A: easy diffi
   d85c0:	746c7563 3a420079 64656d20 206d7569     culty.B: medium 
   d85d0:	66666964 6c756369 43007974 6168203a     difficulty.C: ha
   d85e0:	64206472 69666669 746c7563 72500079     rd difficulty.Pr
   d85f0:	20737365 6f742041 616c7020 69772079     ess A to play wi
   d8600:	74206874 61206568 6c656363 6d6f7265     th the accelerom
   d8610:	72657465 65725000 42207373 206f7420     eter.Press B to 
   d8620:	79616c70 74697720 68742068 6f4a2065     play with the Jo
   d8630:	7473796c 006b6369 252c6425 64252c64     lystick.%d,%d,%d
   d8640:	206f6e00 706d6173 0000656c              .no sample..

000d864c <_ZTVN8particle11SPISettingsE>:
	...
   d8654:	000d4155 000d40c5 000d40c7              UA...@...@..

000d8660 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d8660:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d8670:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d8680:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d8690:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d86a0:	32203531 20313230 343a3831 30353a35     15 2021 18:45:50
   d86b0:	                                         ...

000d86b3 <_ZL5maze1>:
   d86b3:	ffffffff ffffffff 0080ffff 00000000     ................
   d86c3:	ff000000 00000080 00000000 0080ff00     ................
   d86d3:	00000000 ff000000 00000080 00000000     ................
   d86e3:	e087ff00 c0ff0100 fff00300 00002084     ............. ..
   d86f3:	02004000 2084ff00 40000000 ff000200     .@..... ...@....
   d8703:	00002084 02004000 2084ff00 40000000     . ...@..... ...@
   d8713:	ff000200 ff073f84 02f0ffff 0184ff0f     .....?..........
   d8723:	00000000 7f000200 00000084 02000000     ................
   d8733:	00847f00 00000000 7f000200 00000084     ................
   d8743:	02000000 00847f00 00000000 7f000200     ................
	...
   d875b:	0000ff10 00000000 ff100000 00000000     ................
   d876b:	00000000 0000ff10 00000000 ff100000     ................
   d877b:	00000100 00000000 ff87ff10 ffffc1ff     ................
   d878b:	ff10fcff 01000084 00004000 0084ff10     .........@......
   d879b:	40000100 ff100000 01000084 00004000     ...@.........@..
   d87ab:	0084ff10 40000100 ff100000 fe071f84     .......@........
   d87bb:	03f03f08 0084fff0 00080000 ff000000     .?..............
   d87cb:	00000084 00000008 0084ff00 00080000     ................
   d87db:	ff000000 00000084 00000008 ffffff00     ................
   d87eb:	ffffffff ffffffff                       ........

000d87f3 <_ZL5maze2>:
   d87f3:	ffffffff ffffffff 002080ff 00400800     .......... ...@.
   d8803:	20801f00 40080000 801f0000 08000020     ... ...@.... ...
   d8813:	1f000040 00002080 00004008 ff20801f     @.... ...@.... .
   d8823:	ff4108c0 00841ffc 40000100 841f0000     ..A........@....
   d8833:	00010000 1f000040 01000084 00004000     ....@........@..
   d8843:	0000841f 00400001 ff871f00 7ef0ffff     ......@........~
   d8853:	80ff0300 00000020 1f000040 00002080     .... ...@.... ..
   d8863:	00004000 0020801f 00400000 20801f00     .@.... ...@.... 
   d8873:	40000000 801f0000 00000020 1f001040     ...@.... ...@...
   d8883:	00000004 00104008 0000041f 00400800     .....@........@.
   d8893:	00041f00 40080000 041f0000 08000000     .......@........
   d88a3:	1f000040 00000004 00004008 ffff871f     @........@......
   d88b3:	00fe07c1 01841f7c 00000100 841f0000     ....|...........
   d88c3:	00010001 1f000000 01000184 00000000     ................
   d88d3:	0001841f 00000001 20801f00 ffff3f00     ........... .?..
   d88e3:	80ff83ff 00000020 00000000 00002080     .... ........ ..
   d88f3:	00000000 00208000 00000000 20800000     ...... ........ 
   d8903:	00000000 ff000000 ffffffff ffffffff     ................

000d8913 <_ZL5maze3>:
   d8913:	ffffffff ffffffff ffffffff 0084ffff     ................
   d8923:	00080000 40000000 00000010 00000084     .......@........
   d8933:	00000008 00104000 00840000 00080000     .....@..........
   d8943:	40000000 00000010 00000084 00000008     ...@............
   d8953:	00104000 00840000 3f00ffff 4300feff     .@.........?...C
   d8963:	ff1f7cf0 00002080 40000000 00004000     .|... .....@.@..
   d8973:	20800710 00000000 40004000 07100000     ... .....@.@....
   d8983:	00002080 40000000 00004000 20800710     . .....@.@..... 
   d8993:	00000000 40004000 07100000 3f00e0ff     .....@.@.......?
   d89a3:	4100c0ff 80ff7ff0 0080071f 00000000     ...A............
   d89b3:	40000008 07100000 00000080 00080000     ...@............
   d89c3:	00004000 00800710 00000000 40000008     .@.............@
   d89d3:	07100000 00000080 00080000 00004000     .............@..
   d89e3:	01800710 20000004 40000208 07100000     ....... ...@....
   d89f3:	01042000 02002000 00104000 20008700     . ... ...@..... 
   d8a03:	00000100 40000000 87000010 01002000     .......@..... ..
   d8a13:	00000000 00104000 20008700 00000100     .....@..... ....
   d8a23:	40000000 87000010 01002000 02000000     ...@..... ......
   d8a33:	00104000 1f848700 ff073f00 7f007ef0     .@.......?...~..
   d8a43:	07ff7ff0 01000084 40000000 00100000     ...........@....
   d8a53:	00840710 00000100 00004000 07100010     .........@......
   d8a63:	01000084 40000000 00100000 00840710     .......@........
   d8a73:	00000100 00004000 07100010 e107ff87     .....@..........
   d8a83:	01f83ff8 0000feff 0080071f 00002000     .?........... ..
   d8a93:	02000008 07000000 20000080 00080000     ........... ....
   d8aa3:	00000200 00800700 00002000 02000008     ......... ......
   d8ab3:	07000000 20000080 00080000 00000200     ....... ........
   d8ac3:	ffff0700 ffffffff ffffffff ffffffff     ................

000d8ad3 <_ZL6youWin>:
   d8ad3:	ffffffff ffffffff ffffffff fffffff0     ................
   d8ae3:	ffffffff ffffffff fffff0ff ffffffff     ................
   d8af3:	ffffffff fff0ffff ffffffff ffffffff     ................
   d8b03:	f0ffffff ffffffff ffffffff ffffffff     ................
   d8b13:	fffffff0 ffffffff ffffffff fffff0ff     ................
   d8b23:	ffffffff ffffffff fff0ffff ffffffff     ................
   d8b33:	ffffffff f0ffffff ffffffff ffffffff     ................
   d8b43:	ffffffff fffffff0 ffffffff ffffffff     ................
   d8b53:	fffff0ff ffffffff ffffffff fff03ffc     .............?..
   d8b63:	ffffffff ffffffff f03ff8ff ffffffff     ..........?.....
   d8b73:	ffffffff 3ff0ffff 06fcfff0 1e7f1e01     .......?........
   d8b83:	e0738e3c fefff07f 3f0c210c 238c388c     <.s......!.?.8.#
   d8b93:	fff07fe0 8c7038ff 8c398c3f f0ffc007     .....8p.?.9.....
   d8ba3:	303cffff 11c07f80 ffe10789 3efefff0     ..<0...........>
   d8bb3:	e17f8001 e78f8183 fffff0ff ffffffff     ................
   d8bc3:	ffffffff fff0ff87 ffffffff ffffffff     ................
   d8bd3:	f0ffe7ff ffffffff ffffffff ffffffff     ................
   d8be3:	fffffff0 ffffffff ffffffff fffff0ff     ................
   d8bf3:	ffffffff ffffffff fff0ffff ffffffff     ................
   d8c03:	ffffffff f0ffffff ffffffff ffffffff     ................
   d8c13:	ffffffff fffffff0 ffffffff ffffffff     ................
   d8c23:	fffff0ff ffffffff ffffffff fff0ffff     ................
   d8c33:	ffffffff ffffffff f0ffffff ffffffff     ................
   d8c43:	ffffffff ffffffff fffffff0 ffffffff     ................
   d8c53:	ffffffff fffff0ff ffffffff ffffffff     ................
   d8c63:	fff0ffff ffffffff ffffffff f0ffffff     ................

000d8c73 <_ZL8IoTStart>:
	...
   d8cab:	00f00300 00000000 00000000 ff3f0000     ..............?.
   d8cbb:	00000080 00000000 ff070000 0000fcff     ................
   d8ccb:	00000000 ff000000 e0ffffff 00000000     ................
   d8cdb:	0f000000 ffffffff 000000fe 01000000     ................
   d8ceb:	ffffffff 00f0ffff 00000000 ffffff3f     ............?...
   d8cfb:	ffffffff 00000000 3f80ff03 0080ffff     ...........?....
   d8d0b:	00001800 80ff1f00 80ffff3f 801f0000     ........?.......
   d8d1b:	ff1f0000 00f03f80 ff0100f0 1f000080     .....?..........
   d8d2b:	003f80ff 1fc01f00 000080ff 3e80ff1f     ..?............>
   d8d3b:	c007f000 0080ff3f 80ff1f00 03f8033c     ....?.......<...
   d8d4b:	80ff3fc0 ff1f0000 f8033c80 ff3fc003     .?.......<....?.
   d8d5b:	1f000080 013c80ff 3fc007f0 000080ff     ......<....?....
   d8d6b:	3e80ff1f c00f0000 0080ff3f 80ff0300     ...>....?.......
   d8d7b:	7f00c03f 00fc3fc0 3f000000 ffffffff     ?....?.....?....
   d8d8b:	c0ffffff 00000000 ffffff01 f8ffffff     ................
   d8d9b:	00000000 ff0f0000 ffffffff 00000000     ................
   d8dab:	00000000 ffffffff 000000f0 00000000     ................
   d8dbb:	ffff0700 000000fe 00000000 3f000000     ...............?
   d8dcb:	0000c0ff 00000000 00000000 0000fc03     ................
	...

000d8e13 <_ZL4font>:
   d8e13:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   d8e23:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   d8e33:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   d8e43:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   d8e53:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   d8e63:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   d8e73:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   d8e83:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   d8e93:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   d8ea3:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   d8eb3:	00000000 5f000000 07000000 14000700     ......._........
   d8ec3:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   d8ed3:	00502056 00030708 41221c00 22410000     V P......."A..A"
   d8ee3:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   d8ef3:	08080800 00000808 20006060 02040810     ........``. ....
   d8f03:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   d8f13:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   d8f23:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   d8f33:	00001e29 00000014 00003440 22140800     ).......@4....."
   d8f43:	14141441 41001414 02081422 06095901     A......A"....Y..
   d8f53:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   d8f63:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   d8f73:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   d8f83:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   d8f93:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   d8fa3:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   d8fb3:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   d8fc3:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   d8fd3:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   d8fe3:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   d8ff3:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   d9003:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   d9013:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   d9023:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   d9033:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   d9043:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   d9053:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   d9063:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   d9073:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   d9083:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   d9093:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   d90a3:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   d90b3:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   d90c3:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   d90d3:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   d90e3:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   d90f3:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   d9103:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   d9113:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   d9123:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   d9133:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   d9143:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   d9153:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   d9163:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   d9173:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   d9183:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   d9193:	00ff0000 ff101010 14141400 101000ff     ................
   d91a3:	10ff00ff f010f010 fc141414 f7141400     ................
   d91b3:	0000ff00 14ff00ff fc04f414 10171414     ................
   d91c3:	1f10101f 14141f10 10001f14 00f01010     ................
   d91d3:	1f000000 10101010 1010101f 0010f010     ................
   d91e3:	10ff0000 10101010 10101010 000010ff     ................
   d91f3:	0014ff00 ff00ff00 101f0000 fc000017     ................
   d9203:	1414f404 14171017 f404f414 00ff0000     ................
   d9213:	141414f7 14141414 14f700f7 14171414     ................
   d9223:	101f1010 1414141f 101014f4 00f010f0     ................
   d9233:	1f101f00 1f000000 00000014 000014fc     ................
   d9243:	10f010f0 ff10ff10 ff141414 10101014     ................
   d9253:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   d9263:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   d9273:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   d9283:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   d9293:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   d92a3:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   d92b3:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   d92c3:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   d92d3:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   d92e3:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   d92f3:	00000018 30001010 0101ff40 01011f00     .......0@.......
   d9303:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....
	...

000d9314 <_ZTV12Adafruit_GFX>:
	...
   d9324:	000d58e5 000d7059 000d40a1 000d52ed     .X..Yp...@...R..
   d9334:	000d52ef 000d5321 000d52fd 000d530f     .R..!S...R...S..
   d9344:	000d5231 000d52ed 000d5519 000d5493     1R...R...U...T..
   d9354:	000d5339 000d5377 000d53b1 000d53f7     9S..wS...S...S..
   d9364:	000d5495 000d5413                       .T...T..

000d936c <_ZTV16OledWingAdafruit>:
	...
   d9374:	000d59f5 000d5a15 000d58e5 000d7059     .Y...Z...X..Yp..
   d9384:	000d5c25 000d52ed 000d52ef 000d5321     %\...R...R..!S..
   d9394:	000d52fd 000d530f 000d5231 000d52ed     .R...S..1R...R..
   d93a4:	000d5519 000d5ddf 000d6373 000d6325     .U...]..sc..%c..
   d93b4:	000d53b1 000d53f7 000d5495 000d5413     .S...S...T...T..

000d93c4 <_ZL12splash1_data>:
   d93c4:	00000000 00800100 00000000 00000000     ................
   d93d4:	00008003 00000000 07000000 000000c0     ................
   d93e4:	00000000 c0070000 00000000 00000000     ................
   d93f4:	00c00f00 00000000 00000000 0000e01f     ................
   d9404:	00000000 1f000000 000000e0 00000000     ................
   d9414:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   d942c:	0000f07f 00000000 7ff81f00 000000f0     ................
   d943c:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   d944c:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   d945c:	00000000 f9ff0f00 0000c0ff 00000000     ................
   d946c:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   d947c:	00000000 fc030000 80ffff73 00000000     ........s.......
   d948c:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   d949c:	000000ff 00000000 fc1ffe7f 00000000     ................
   d94ac:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   d94bc:	0000e0ff 00000000 ff191f00 000000c0     ................
   d94cc:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   d94dc:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   d94ec:	00000000 fcffff00 00000000 00000000     ................
   d94fc:	00feffff 00000000 ff000000 0000feff     ................
   d950c:	00000000 efff0100 000000fe 00000000     ................
   d951c:	fecfff01 00000000 03000000 00fe07ff     ................
   d952c:	00000000 fc030000 0000fe07 00000000     ................
   d953c:	03f00300 000000fe 00000000 fe008001     ................
	...
   d9554:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   d956c:	0000000c 07000000 00fc0080 00c00300     ................
   d957c:	80070000 0000fc01 0000c003 01800700     ................
   d958c:	030000fc 000000c0 e0018007 1e000000     ................
   d959c:	07000000 00e00180 001e0000 9ff7e37f     ................
   d95ac:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   d95bc:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   d95cc:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   d95dc:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   d95ec:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   d95fc:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   d960c:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   d961c:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   d962c:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   d963c:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   d964c:	ffffff00 ffffffff c0ffffff ffffffff     ................
   d965c:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   d966c:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   d967c:	5b6bfdff c0fd6adb                       ..k[.j..

000d9684 <_ZL12splash2_data>:
   d9684:	00600000 00000000 00000000 00000000     ..`.............
   d9694:	0000e000 00000000 00000000 01000000     ................
   d96a4:	000000e0 00000000 00000000 f0010000     ................
	...
   d96c0:	00f00300 00000000 00000000 00000000     ................
   d96d0:	0000f007 00000000 00000000 07000000     ................
   d96e0:	000000f8 00000000 00000000 f80f0000     ................
   d96f0:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   d9700:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   d9710:	00c00300 010000fe ffff00e0 000000f8     ................
   d9720:	f000c003 0f000000 7ffe7f00 030000c0     ................
   d9730:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   d9740:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   d9750:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   d9760:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   d9770:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   d9780:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   d9790:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   d97a0:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   d97b0:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   d97c0:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   d97d0:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   d97e0:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   d97f0:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   d9800:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   d9818:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   d9828:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   d9838:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   d9848:	ff7f000f a5feffff 198d9dad 060000e0     ................
   d9858:	ffff7f00 adb5feff e07eb5ed              ..........~.

000d9864 <_ZTV16Adafruit_SSD1306>:
	...
   d986c:	000d5bf9 000d5c11 000d58e5 000d7059     .[...\...X..Yp..
   d987c:	000d5c25 000d52ed 000d52ef 000d5321     %\...R...R..!S..
   d988c:	000d52fd 000d530f 000d5231 000d52ed     .R...S..1R...R..
   d989c:	000d5519 000d5ddf 000d6373 000d6325     .U...]..sc..%c..
   d98ac:	000d53b1 000d53f7 000d5495 000d5413     .S...S...T...T..

000d98bc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d98bc:	e0c08000 fefcf8f0                       ........

000d98c4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d98c4:	07030100 7f3f1f0f                       ......?.

000d98cc <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d98cc:	a880d5ae                                ....

000d98d0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d98d0:	8d4000d3                                ..@.

000d98d4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d98d4:	c8a10020                                 ...

000d98d8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d98d8:	a6a440db                                 .@....

000d98de <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d98de:	8f8102da                                ....

000d98e2 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d98e2:	                                         ...

000d98e5 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d98e5:	                                         ...

000d98e8 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d98e8:	21ff0022 76656400 20656369 20746f6e     "..!.device not 
   d98f8:	6e756f66 00000064                       found...

000d9900 <_ZTV6LIS3DH>:
	...
   d9910:	000d6679 000d40a1 000d40a1              yf...@...@..

000d991c <_ZTV9LIS3DHSPI>:
	...
   d9924:	000d6569 000d656b 000d669b 000d65a9     ie..ke...f...e..
   d9934:	000d65eb 000d6579 000d6593              .e..ye...e..

000d9940 <_ZL22BlynkReadHandlerVector>:
   d9940:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9950:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9960:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9970:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9980:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9990:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d99a0:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d99b0:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d99c0:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d99d0:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d99e0:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d99f0:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9a00:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9a10:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9a20:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9a30:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9a40:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9a50:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9a60:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9a70:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9a80:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9a90:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9aa0:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9ab0:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9ac0:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9ad0:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9ae0:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9af0:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9b00:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9b10:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9b20:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..
   d9b30:	000d67dd 000d67dd 000d67dd 000d67dd     .g...g...g...g..

000d9b40 <_ZL23BlynkWriteHandlerVector>:
   d9b40:	000d67df 000d4291 000d67df 000d67df     .g...B...g...g..
   d9b50:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9b60:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9b70:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9b80:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9b90:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9ba0:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9bb0:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9bc0:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9bd0:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9be0:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9bf0:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9c00:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9c10:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9c20:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9c30:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9c40:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9c50:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9c60:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9c70:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9c80:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9c90:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9ca0:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9cb0:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9cc0:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9cd0:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9ce0:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9cf0:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9d00:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9d10:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9d20:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..
   d9d30:	000d67df 000d67df 000d67df 000d67df     .g...g...g...g..

000d9d40 <_ZTVN5spark13EthernetClassE>:
	...
   d9d48:	000d6df3 000d6de9 000d6ddf 000d6dd5     .m...m...m...m..
   d9d58:	000d6dc9 000d6dbd 000d7da9 000d7db1     .m...m...}...}..
   d9d68:	000d6db1 000d6da9 000d6d9f 000d6d95     .m...m...m...m..
   d9d78:	000d7de1                                .}..

000d9d7c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9d7c:	18100800 38302820                       .... (08

000d9d84 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d9d8c:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d9d9c:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d9dac <_ZTV9IPAddress>:
	...
   d9db4:	000d7361 000d7351 000d7353              as..Qs..Ss..

000d9dc0 <_ZTV9USBSerial>:
	...
   d9dc8:	000d7485 000d74ed 000d74c3 000d7059     .t...t...t..Yp..
   d9dd8:	000d74b5 000d7487 000d7497 000d74e7     .t...t...t...t..
   d9de8:	000d74a7 000d7481                       .t...t..

000d9df0 <_ZTV11USARTSerial>:
	...
   d9df8:	000d7591 000d75fd 000d75d5 000d7059     .u...u...u..Yp..
   d9e08:	000d75a5 000d75c1 000d75b3 000d75cf     .u...u...u...u..
   d9e18:	000d7593 000d7597                       .u...u..

000d9e20 <_ZTV7TwoWire>:
	...
   d9e28:	000d768d 000d76d7 000d76af 000d768f     .v...v...v...v..
   d9e38:	000d76b7 000d76bf 000d76c7 000d76cf     .v...v...v...v..
   d9e48:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d9e58:	203d2072 00006425                       r = %d..

000d9e60 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9e68:	000d77bb 000d77dd 000d7bf7 000d77eb     .w...w...{...w..
   d9e78:	000d77bd                                .w..

000d9e7c <_ZTV9TCPClient>:
	...
   d9e84:	000d7869 000d789d 000d7739 000d7753     ix...x..9w..Sw..
   d9e94:	000d7a8d 000d78ff 000d78d1 000d777d     .z...x...x..}w..
   d9ea4:	000d7997 000d7bfd 000d7933 000d7b41     .y...{..3y..A{..
   d9eb4:	000d777f 000d77b1 000d7765 000d77ef     .w...w..ew...w..
   d9ec4:	000d78b1                                .x..

000d9ec8 <_ZTVN5spark9WiFiClassE>:
	...
   d9ed0:	000d7d4b 000d7d41 000d7d37 000d7cf9     K}..A}..7}...|..
   d9ee0:	000d71cd 000d7d2b 000d7da9 000d7db1     .q..+}...}...}..
   d9ef0:	000d7d1f 000d7d17 000d7d0d 000d7d03     .}...}...}...}..
   d9f00:	000d7de1                                .}..

000d9f04 <_ZTVN5spark12NetworkClassE>:
	...
   d9f0c:	000d7d69 000d7d73 000d7d7d 000d7d87     i}..s}..}}...}..
   d9f1c:	000d7d91 000d7d9d 000d7da9 000d7db1     .}...}...}...}..
   d9f2c:	000d7db9 000d7dc5 000d7dcd 000d7dd7     .}...}...}...}..
   d9f3c:	000d7de1                                .}..

000d9f40 <_ZSt7nothrow>:
	...

000d9f41 <_ZTSSt19_Sp_make_shared_tag>:
   d9f41:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d9f51:	5f646572 00676174                        red_tag....

000d9f5c <_ZTISt19_Sp_make_shared_tag>:
   d9f5c:	000d9f9c 000d9f41                       ....A...

000d9f64 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d9f64:	000d9ffc 000d9f70 000da020              ....p... ...

000d9f70 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d9f70:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d9f80:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d9f90:	00000045                                E...

000d9f94 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d9f94:	00000000 000d9f64 000d8125 000d8139     ....d...%...9...
   d9fa4:	000d82cd 000d82cd 000d81a3 000d80e5     ................
   d9fb4:	000d818b 000d814d 000d8119              ....M.......

000d9fc0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d9fc0:	000d9ffc 000d9fcc 000d9f64              ........d...

000d9fcc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d9fcc:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d9fdc:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d9fec:	456f666e 00000000                       nfoE....

000d9ff4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d9ff4:	00000000 000d9fc0 000d81cd 000d81e1     ................
   da004:	000d82cd 000d82cd 000d81a3 000d80e5     ................
   da014:	000d82a1 000d822d 000d81f5              ....-.......

000da020 <_ZTISt9type_info>:
   da020:	000d9f9c 000da028                       ....(...

000da028 <_ZTSSt9type_info>:
   da028:	74397453 5f657079 6f666e69               St9type_info.

000da035 <_ctype_>:
   da035:	20202000 20202020 28282020 20282828     .         ((((( 
   da045:	20202020 20202020 20202020 20202020                     
   da055:	10108820 10101010 10101010 10101010      ...............
   da065:	04040410 04040404 10040404 10101010     ................
   da075:	41411010 41414141 01010101 01010101     ..AAAAAA........
   da085:	01010101 01010101 01010101 10101010     ................
   da095:	42421010 42424242 02020202 02020202     ..BBBBBB........
   da0a5:	02020202 02020202 02020202 10101010     ................
   da0b5:	00000020 00000000 00000000 00000000      ...............
	...

000da136 <link_const_variable_data_end>:
	...

000da138 <link_constructors_location>:
   da138:	000d4cd5 	.word	0x000d4cd5
   da13c:	000d6dfd 	.word	0x000d6dfd
   da140:	000d6fb5 	.word	0x000d6fb5
   da144:	000d7031 	.word	0x000d7031
   da148:	000d71d9 	.word	0x000d71d9
   da14c:	000d71e9 	.word	0x000d71e9
   da150:	000d7211 	.word	0x000d7211
   da154:	000d7d55 	.word	0x000d7d55
   da158:	000d7ec1 	.word	0x000d7ec1

000da15c <link_constructors_end>:
   da15c:	00000000 	.word	0x00000000
